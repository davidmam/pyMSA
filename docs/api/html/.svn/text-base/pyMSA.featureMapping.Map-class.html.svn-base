<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>pyMSA.featureMapping.Map</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        <a href="pyMSA-module.html">Package&nbsp;pyMSA</a> ::
        <a href="pyMSA.featureMapping-module.html">Module&nbsp;featureMapping</a> ::
        Class&nbsp;Map
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="pyMSA.featureMapping.Map-class.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<!-- ==================== CLASS DESCRIPTION ==================== -->
<h1 class="epydoc">Class Map</h1><p class="nomargin-top"><span class="codelink"><a href="pyMSA.featureMapping-pysrc.html#Map">source&nbsp;code</a></span></p>
<p>FeatureMappingQuality contains functions to compare two mapped 
  featureXML files.</p>
  <p><b>Changes:</b></p>
  <p>I don't really like how I did this class, it's inconsistent, has some 
  redundancy and difficult to understand. Could use a revamp.</p>

<!-- ==================== INSTANCE METHODS ==================== -->
<a name="section-InstanceMethods"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Instance Methods</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-InstanceMethods"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="pyMSA.featureMapping.Map-class.html#__init__" class="summary-sig-name">__init__</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">mapped_featureXML_1</span>,
        <span class="summary-sig-arg">mapped_featureXML_2</span>,
        <span class="summary-sig-arg">trafoXML_file</span>)</span></td>
          <td align="right" valign="top">
            <span class="codelink"><a href="pyMSA.featureMapping-pysrc.html#Map.__init__">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">dict</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="pyMSA.featureMapping.Map-class.html#mapping" class="summary-sig-name">mapping</a>(<span class="summary-sig-arg">self</span>)</span><br />
      Map the retention times of the two featureXML file to the 
      corresponding trafoXML file.</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="pyMSA.featureMapping-pysrc.html#Map.mapping">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">list</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="pyMSA.featureMapping.Map-class.html#getMappedFeatureIds" class="summary-sig-name">getMappedFeatureIds</a>(<span class="summary-sig-arg">self</span>)</span><br />
      Return self.trafoXML_list.</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="pyMSA.featureMapping-pysrc.html#Map.getMappedFeatureIds">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">two lists</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="pyMSA.featureMapping.Map-class.html#unmappedIntensities" class="summary-sig-name">unmappedIntensities</a>(<span class="summary-sig-arg">self</span>)</span><br />
      Get the intensities of the features that weren't mapped.</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="pyMSA.featureMapping-pysrc.html#Map.unmappedIntensities">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">two lists</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="pyMSA.featureMapping.Map-class.html#mappedIntensities" class="summary-sig-name">mappedIntensities</a>(<span class="summary-sig-arg">self</span>)</span><br />
      Calculate how many features did get mapped and what their intensities
      are.</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="pyMSA.featureMapping-pysrc.html#Map.mappedIntensities">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
<!-- ==================== METHOD DETAILS ==================== -->
<a name="section-MethodDetails"></a>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Method Details</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-MethodDetails"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
</table>
<a name="__init__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__init__</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">mapped_featureXML_1</span>,
        <span class="sig-arg">mapped_featureXML_2</span>,
        <span class="sig-arg">trafoXML_file</span>)</span>
    <br /><em class="fname">(Constructor)</em>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="pyMSA.featureMapping-pysrc.html#Map.__init__">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  
  <dl class="fields">
    <dt>Parameters:</dt>
    <dd><ul class="nomargin-top">
        <li><strong class="pname"><code>mapped_featureXML_1</code></strong> (pyMS.pareFeatureXML.Reader) - An instance of <a href="pyMSA.parseFeatureXML.Reader-class.html" 
          class="link">parseFeatureXML.Reader</a>. This is one of the files
          mapped by OpenMS's MapAlignerPoseClustering.</li>
        <li><strong class="pname"><code>mapped_featureXML_2</code></strong> (pyMS.pareFeatureXML.Reader) - An instance of <a href="pyMSA.parseFeatureXML.Reader-class.html" 
          class="link">parseFeatureXML.Reader</a>. This is one of the files
          mapped by OpenMS's MapAlignerPoseClustering.</li>
        <li><strong class="pname"><code>trafoXML_file</code></strong> (string) - path to the trafoXML file that corresponds to featureXML instance
          1 and featureXML instance 2. Has to be the linear file, because 
          the identity file doesn't contain transformations</li>
    </ul></dd>
    <dt>Raises:</dt>
    <dd><ul class="nomargin-top">
        <li><code><strong class='fraise'>IOError</strong></code> - trafoXML is an identity file (need a linear file)</li>
        <li><code><strong class='fraise'>RuntimeError</strong></code> - FeatureXML and trafo_xml didn't match up</li>
    </ul></dd>
  </dl>
</td></tr></table>
</div>
<a name="mapping"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">mapping</span>(<span class="sig-arg">self</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="pyMSA.featureMapping-pysrc.html#Map.mapping">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Map the retention times of the two featureXML file to the 
  corresponding trafoXML file.</p>
  <dl class="fields">
    <dt>Returns: dict</dt>
        <dd>Return the retention times of both featureXML_1 and featureXML_2 
          (those given to __init__) that don't and do map. They are 
          returned in a dict with keys 'featureXML_1_mapped', 
          'featureXML_1_not_mapped','featureXML_2_mapped' and 
          'featureXML_2_not_mapped. The values are a list of retention 
          times.</dd>
  </dl>
<div class="fields">      <p><strong>Attention:</strong>
        This function might b e useless, possibly the same thing is already
        archieved in the __init__. Have't come around to check this yet to 
        make sure though.
        <p><b>Example:</b></p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">import</span> parseFeatureXML
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">import</span> featureMapping <span class="py-keyword">as</span> fm
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML_1 = parseFeatureXML.Reader(<span class="py-string">'featureXML_example.featureXML'</span>)            
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML_2 = parseFeatureXML.Reader(<span class="py-string">'featureXML_example.featureXML'</span>)
<span class="py-prompt">&gt;&gt;&gt; </span>featureMapping = fm.FeatureMapping(featureXML_1, featureXML_2, <span class="py-string">'trafoXML_example.trafoXML'</span>)
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">print</span> featureMapping.mapping()
<span class="py-output">{'featureXML_1_mapped': set(['4009.59', '5107.29', '5109.29']),'featureXML_1_not_mapped': set(['7052.29']), 'featureXML_2_mapped': set(['3969.59', '5189.29', '5197.29']),'featureXML_2_not_mapped': set(['5345.29'])}</span></pre>
      </p>
</div></td></tr></table>
</div>
<a name="getMappedFeatureIds"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">getMappedFeatureIds</span>(<span class="sig-arg">self</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="pyMSA.featureMapping-pysrc.html#Map.getMappedFeatureIds">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Return self.trafoXML_list. Because this class was such a mess this 
  function used to be redundant, calling self.mapping() when it's not 
  necesarry etc. Might be more fixable.</p>
  <dl class="fields">
    <dt>Returns: list</dt>
        <dd>Return the mapping feature ids and the mapped feature ids as a 
          list of dictionaries
          <p><b>Example:</b></p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">import</span> parseFeatureXML
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">import</span> featureMapping <span class="py-keyword">as</span> fm
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML_1 = parseFeatureXML.Reader(<span class="py-string">'featureXML_example.featureXML'</span>)            
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML_2 = parseFeatureXML.Reader(<span class="py-string">'featureXML_example.featureXML'</span>)
<span class="py-prompt">&gt;&gt;&gt; </span>featureMapping = fm.FeatureMapping(featureXML_1, featureXML_2, <span class="py-string">'trafoXML_example.trafoXML'</span>)
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">for</span> feautureID_dict <span class="py-keyword">in</span> featureMapping.getMappedFeatureIds():
<span class="py-more">... </span>   <span class="py-keyword">print</span> feaureID_dict
<span class="py-output">{'from_featureID': 'f_13020522388175237334','to_featureID': 'f_13020522388175237334'}</span>
<span class="py-output">{'from_featureID': 'f_43922326584371237334','to_featureID': 'f_43922326584371237334'}</span>
<span class="py-output">{'from_featureID': 'f_8613715360396561740', 'to_featureID': 'f_8613715360396561740'}</span></pre></dd>
  </dl>
</td></tr></table>
</div>
<a name="unmappedIntensities"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">unmappedIntensities</span>(<span class="sig-arg">self</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="pyMSA.featureMapping-pysrc.html#Map.unmappedIntensities">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Get the intensities of the features that weren't mapped.</p>
  <dl class="fields">
    <dt>Returns: two lists</dt>
        <dd>Two lists with the intensities of all the features of the first 
          and second featureXML given to FeatureMappingQuality that weren't
          in the trafoXML file
          <p><b>Example:</b></p>
          <p>Get the intensities of all the non-mapped features of both 
          featureXML files</p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">import</span> parseFeatureXML
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">import</span> featureMapping <span class="py-keyword">as</span> fm
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML_1 = parseFeatureXML.Reader(<span class="py-string">'featureXML_example.featureXML'</span>)            
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML_2 = parseFeatureXML.Reader(<span class="py-string">'featureXML_example.featureXML'</span>)
<span class="py-prompt">&gt;&gt;&gt; </span>featureMapping = fm.FeatureMapping(featureXML_1, featureXML_2, <span class="py-string">'trafoXML_example.trafoXML'</span>)
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">print</span> featureMapping.unmappedIntensities()
<span class="py-output">(['556384', '111429', '234284'], ['524284', '111329', '524284'])</span></pre></dd>
  </dl>
</td></tr></table>
</div>
<a name="mappedIntensities"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">mappedIntensities</span>(<span class="sig-arg">self</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="pyMSA.featureMapping-pysrc.html#Map.mappedIntensities">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Calculate how many features did get mapped and what their intensities 
  are.</p>
  <dl class="fields">
    <dt>Returns: two lists</dt>
        <dd>Two lists with the intensities of all the features of the first 
          and second featureXML given to FeatureMappingQuality that were in
          the trafoXML file
          <p><b>Example:</b></p>
          <p>Get the intensities of all mapped features of both featureXML 
          files.</p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">import</span> parseFeatureXML
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">import</span> featureMapping <span class="py-keyword">as</span> fms
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML_1 = parseFeatureXML.Reader(<span class="py-string">'featureXML_example.featureXML'</span>)            
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML_2 = parseFeatureXML.Reader(<span class="py-string">'featureXML_example.featureXML'</span>)
<span class="py-prompt">&gt;&gt;&gt; </span>featureMappingQuality = fm.FeatureMapping(featureXML_1, featureXML_2, <span class="py-string">'trafoXML_example.trafoXML'</span>)
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">print</span> featureMapping.mappedIntensities()
<span class="py-output">(['52234'], ['524284'])</span></pre></dd>
  </dl>
</td></tr></table>
</div>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0.1 on Tue Jun  5 15:10:33 2012
    </td>
    <td align="right" class="footer">
      <a target="mainFrame" href="http://epydoc.sourceforge.net"
        >http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie();
  // -->
</script>
</body>
</html>
