<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>example_scripts.compare_aligned_features</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        <a href="example_scripts-module.html">Package&nbsp;example_scripts</a> ::
        Module&nbsp;compare_aligned_features
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="example_scripts.compare_aligned_features-module.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<!-- ==================== MODULE DESCRIPTION ==================== -->
<h1 class="epydoc">Module compare_aligned_features</h1><p class="nomargin-top"><span class="codelink"><a href="example_scripts.compare_aligned_features-pysrc.html">source&nbsp;code</a></span></p>
<p>Example how to plot trafoXML data</p>

<!-- ==================== FUNCTIONS ==================== -->
<a name="section-Functions"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Functions</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-Functions"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="example_scripts.compare_aligned_features-module.html#plot_trafoXML" class="summary-sig-name">plot_trafoXML</a>()</span><br />
      Plot points for the change in retention time for all the values in a 
      .trafoXML file.</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="example_scripts.compare_aligned_features-pysrc.html#plot_trafoXML">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="example_scripts.compare_aligned_features-module.html#plot_trafoXML_plusFeatureIntensity" class="summary-sig-name">plot_trafoXML_plusFeatureIntensity</a>()</span><br />
      Plot points for the change in retention time for all the values in a 
      .trafoXML file, and change the color of the points according to the 
      intensity of the feature of the original featureXML file 
      corresponding to that point.</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="example_scripts.compare_aligned_features-pysrc.html#plot_trafoXML_plusFeatureIntensity">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="example_scripts.compare_aligned_features-module.html#plot_mapped_and_unmapped_intensities" class="summary-sig-name">plot_mapped_and_unmapped_intensities</a>()</span><br />
      Plot a boxplot of the # of features that map at each intensity.</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="example_scripts.compare_aligned_features-pysrc.html#plot_mapped_and_unmapped_intensities">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
<!-- ==================== VARIABLES ==================== -->
<a name="section-Variables"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Variables</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-Variables"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a name="__package__"></a><span class="summary-name">__package__</span> = <code title="'example_scripts'"><code class="variable-quote">'</code><code class="variable-string">example_scripts</code><code class="variable-quote">'</code></code>
    </td>
  </tr>
</table>
<!-- ==================== FUNCTION DETAILS ==================== -->
<a name="section-FunctionDetails"></a>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Function Details</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-FunctionDetails"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
</table>
<a name="plot_trafoXML"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">plot_trafoXML</span>()</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="example_scripts.compare_aligned_features-pysrc.html#plot_trafoXML">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Plot points for the change in retention time for all the values in a 
  .trafoXML file. Use the trafoXML file with as name 'linear', not 
  'identity'. Identity is the one that linear maps to, so identity doesn't 
  have any changes.</p>
  <p>This example script uses the following classes and functions:</p>
  <ul>
    <li>
      <a href="pyMSA.elementFunctions-module.html#getItems" 
      class="link">elementFunctions.getItems</a>
    </li>
    <li>
      <a href="pyMSA.rPlotGenerics.Plots-class.html" 
      class="link">rPlotGenerics.Plots</a>
    </li>
  </ul>
  <p><b>Example (more detailed comments in the source code):</b></p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> elementFunctions
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rPlots
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">import</span> rpy2.robjects <span class="py-keyword">as</span> R
<span class="py-prompt">&gt;&gt;&gt; </span>changeList = []                                                                                                                    <span class="py-comment"># list to keep track of the change in retention time </span>
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">for</span> event, element <span class="py-keyword">in</span> cElementTree.iterparse(<span class="py-string">'example_files/input/example_trafoXML.trafoXML'</span>):                                     <span class="py-comment"># looping through all the elements in the trafoXML file</span>
<span class="py-more">... </span>   <span class="py-keyword">if</span> element.tag == <span class="py-string">'Pair'</span>:                                                                                                       <span class="py-comment"># if the element == 'Pair'</span>
<span class="py-more">... </span>        changeList.append(float(elementFunctions.getItems(element)[<span class="py-string">'to'</span>])-float(elementFunctions.getItems(element)[<span class="py-string">'from'</span>]))       <span class="py-comment"># append the change in retention time to the changeList</span>
<span class="py-prompt">&gt;&gt;&gt; </span>changeList.sort()                                                                                                                  <span class="py-comment"># sort the changeList so that the big up and down changes get grouped together</span>
<span class="py-prompt">&gt;&gt;&gt; </span>floatVector = R.FloatVector(changeList)                                                                                            <span class="py-comment"># because rPlots needs R vectors, make a vector out of the list</span>
<span class="py-prompt">&gt;&gt;&gt; </span>plots = rPlots.Plots()                                                                                                             <span class="py-comment"># Instantiate rPlots.Plots</span>
<span class="py-prompt">&gt;&gt;&gt; </span>plots.plot(<span class="py-string">'test plot_trafoXML.png'</span>, floatVector, title=<span class="py-string">'Change in retention time per feature'</span>,                                    <span class="py-comment"># plot a standard plot</span>
<span class="py-output">                xlab='Feature number.', ylab='change in retention time')</span></pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="plot_trafoXML_plusFeatureIntensity"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">plot_trafoXML_plusFeatureIntensity</span>()</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="example_scripts.compare_aligned_features-pysrc.html#plot_trafoXML_plusFeatureIntensity">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Plot points for the change in retention time for all the values in a 
  .trafoXML file, and change the color of the points according to the 
  intensity of the feature of the original featureXML file corresponding to
  that point. Use the trafoXML file with as name 'linear', not 'identity'. 
  Identity is the one that linear maps to, so identity doesn't have any 
  changes.</p>
  <p>This example script uses the following classes and functions:</p>
  <ul>
    <li>
      <a href="pyMSA.elementFunctions-module.html#getItems" 
      class="link">elementFunctions.getItems</a>
    </li>
    <li>
      <a href="pyMSA.rPlotGenerics.Plots-class.html" 
      class="link">rPlotGenerics.Plots</a>
    </li>
    <li>
      <a href="pyMSA.rPlotGenerics.Plots-class.html#plot" 
      class="link">rPlotGenerics.Plots.plot</a>
    </li>
    <li>
      <a href="pyMSA.parseFeatureXML.Reader-class.html" 
      class="link">pyMSA.parseFeatureXML.Reader</a>
    </li>
    <li>
      <a 
      href="pyMSA.parseFeatureXML.Reader-class.html#getSimpleFeatureInfo" 
      class="link">parseFeatureXML.Reader.getSimpleFeatureInfo</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#takeLog" 
      class="link">rFunctions.takeLog</a>
    </li>
  </ul>
  <p><b>Example (see source code for additional comments):</b></p>
  <p>Plot the shift in retention time of one of the featureXML files and 
  color each point a red/blue ratio dependent on its intensity</p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> elementFunctions
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rPlots
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> parseFeatureXML
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rFunctions
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">import</span> rpy2.robjects <span class="py-keyword">as</span> R
<span class="py-prompt">&gt;&gt;&gt; </span>features_C2_01 = parseFeatureXML.Reader(<span class="py-string">'/homes/ndeklein/Doreen data/featureXML/JG_TiO2_C2_01.featureXML'</span>)                             
<span class="py-prompt">&gt;&gt;&gt; </span>mzDict = {}
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">for</span> feature <span class="py-keyword">in</span> features_C2_01.getSimpleFeatureInfo():
<span class="py-more">... </span>   mzDict[str(float(round(features_C2_01[<span class="py-string">'retention time'</span>],2)))] = features_C2_01[<span class="py-string">'intensity'</span>]
<span class="py-prompt">&gt;&gt;&gt; </span>changeDict = collections.defaultdict(int)
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">for</span> event, element <span class="py-keyword">in</span> cElementTree.iterparse(<span class="py-string">'/homes/ndeklein/Doreen data/trafoXML/JG_TiO2-C2_01-C2_01A-file_1.trafoXML'</span>):
<span class="py-more">... </span>   <span class="py-keyword">if</span> element.tag == <span class="py-string">'Transformation'</span>:
<span class="py-more">... </span>       <span class="py-keyword">if</span> elementFunctions.getItems(element)[<span class="py-string">'name'</span>] == <span class="py-string">'identity'</span>:
<span class="py-more">... </span>           sys.exit(<span class="py-string">'This it he trafoXML identity file (see the Transformation node). There is no information in the identity file. Use the '</span>linear<span class="py-string">' file as input'</span>)
<span class="py-more">... </span>   <span class="py-keyword">if</span> element.tag == <span class="py-string">'Pair'</span>:
<span class="py-more">... </span>       retentionTime = str(round(float(elementFunctions.getItems(element)[<span class="py-string">'from'</span>]),2))
<span class="py-more">... </span>       changeDict[float(elementFunctions.getItems(element)[<span class="py-string">'to'</span>])-float(elementFunctions.getItems(element)[<span class="py-string">'from'</span>])] = mzDict[retentionTime]
<span class="py-prompt">&gt;&gt;&gt; </span>colorPalette = R.r[<span class="py-string">'colorRampPalette'</span>](R.StrVector([<span class="py-string">'red'</span>,<span class="py-string">'blue'</span>]))(10)
<span class="py-prompt">&gt;&gt;&gt; </span>colorVector = colorPalette
<span class="py-prompt">&gt;&gt;&gt; </span>changeList = [] 
<span class="py-prompt">&gt;&gt;&gt; </span>intensityList = []
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">for</span> changeAndIntensity <span class="py-keyword">in</span> sorted(changeDict.items()):
<span class="py-more">... </span>   changeList.append(changeAndIntensity[0])
<span class="py-more">... </span>   intensityList.append(changeAndIntensity[1])
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">for</span> index, item <span class="py-keyword">in</span> enumerate(intensityList):
<span class="py-more">... </span>    intensityList[index] = colorPalette[int(rFunctions.takeLog(float(item),10)[0])]
<span class="py-prompt">&gt;&gt;&gt; </span>colorVector = R.StrVector(intensityList)
<span class="py-prompt">&gt;&gt;&gt; </span>floatVector = R.FloatVector(changeList)
<span class="py-prompt">&gt;&gt;&gt; </span>plots = rPlots.Plots()
<span class="py-prompt">&gt;&gt;&gt; </span>extraInput = {<span class="py-string">'col'</span>:colorVector,<span class="py-string">'pch'</span>:20}
<span class="py-prompt">&gt;&gt;&gt; </span>plots.plot(<span class="py-string">'example_files/output/test plot_trafoXML intensity.png'</span>,floatVector, width=1000, height=1000,title=<span class="py-string">'Change in retention time per feature'</span>, xlab=<span class="py-string">'Feature number.'</span>, ylab=<span class="py-string">'change in retention time'</span>, plotArgs=extraInput)</pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="plot_mapped_and_unmapped_intensities"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">plot_mapped_and_unmapped_intensities</span>()</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="example_scripts.compare_aligned_features-pysrc.html#plot_mapped_and_unmapped_intensities">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Plot a boxplot of the # of features that map at each intensity.</p>
  <p>This example script uses the following classes and functions:</p>
  <ul>
    <li>
      <a href="pyMSA.featureMapping.Map-class.html" 
      class="link">featureMapping.Map</a>
    </li>
    <li>
      <a href="pyMSA.featureMapping.Map-class.html#unmappedIntensities" 
      class="link">featureMapping.Map.unmappedIntensities</a>
    </li>
    <li>
      <a href="pyMSA.featureMapping.Map-class.html#mappedIntensities" 
      class="link">featureMapping.Map.mappedIntensities</a>
    </li>
    <li>
      <code class="link">rPlots.PlotGenerics.boxplotDataframe</code>
    </li>
    <li>
      <a href="pyMSA.parseFeatureXML.Reader-class.html" 
      class="link">parseFeatureXML.Reader</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#takeLog" 
      class="link">rFunctions.takeLog</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#fillNA" 
      class="link">rFunctions.fillNA</a>
    </li>
  </ul>
  <p><b>Example:</b></p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> featureMapping <span class="py-keyword">as</span> fm
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> parseFeatureXML
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rPlots
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML_1 = parseFeatureXML.Reader(<span class="py-string">'/homes/ndeklein/Doreen data/featureXML/JG_TiO2_C2_01.featureXML'</span>)            
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML_2 = parseFeatureXML.Reader(<span class="py-string">'/homes/ndeklein/Doreen data/featureXML/JG_TiO2_C2_01A.featureXML'</span>)
<span class="py-prompt">&gt;&gt;&gt; </span>featuremap = featureMapping.Map(featureXML_1, featureXML_2, <span class="py-string">'/homes/ndeklein/Doreen data/trafoXML/JG_TiO2-C2_01-C2_01A-file_1.trafoXML'</span>)
<span class="py-prompt">&gt;&gt;&gt; </span>unmapped_1, unmapped_2 = featureamap.unmappedIntensities()    
<span class="py-prompt">&gt;&gt;&gt; </span>mapped_1, mapped_2 = featuremap.mappedIntensities()  
<span class="py-prompt">&gt;&gt;&gt; </span>maxLength = len(max([unmapped_1, unmapped_2, mapped_1, mapped_2], key = len))
<span class="py-prompt">&gt;&gt;&gt; </span>unmappedVector_1 = rFunctions.takeLog(R.FloatVector(rFunctions.fillNA(unmapped_1, maxLength-len(unmapped_1),<span class="py-string">'na_real'</span>)),10)
<span class="py-prompt">&gt;&gt;&gt; </span>unmappedVector_2 = rFunctions.takeLog(R.FloatVector(rFunctions.fillNA(unmapped_2, maxLength-len(unmapped_2), <span class="py-string">'na_real'</span>)),10)
<span class="py-prompt">&gt;&gt;&gt; </span>mappedVector_1 = rFunctions.takeLog(R.FloatVector(rFunctions.fillNA(mapped_1, maxLength-len(mapped_1),<span class="py-string">'na_real'</span>)),10)
<span class="py-prompt">&gt;&gt;&gt; </span>mappedVector_2 = rFunctions.takeLog(R.FloatVector(rFunctions.fillNA(mapped_2, maxLength-len(mapped_2), <span class="py-string">'na_real'</span>)),10)
<span class="py-prompt">&gt;&gt;&gt; </span>dataDict = {<span class="py-string">'not aligned file 1'</span>:unmappedVector_1, <span class="py-string">'not aligned file 2'</span>:unmappedVector_2,
<span class="py-more">... </span>           <span class="py-string">'aligned file 1'</span>:mappedVector_1, <span class="py-string">'aligned file 2'</span>:mappedVector_2}
<span class="py-prompt">&gt;&gt;&gt; </span>dataframe = R.DataFrame(dataDict)    
<span class="py-prompt">&gt;&gt;&gt; </span>plots = rPlots.Plots()
<span class="py-prompt">&gt;&gt;&gt; </span>plots.boxplotDataframe(<span class="py-string">'example_files/output/intensity_of_mapped_and_unmapped.png'</span>, dataframe, title=<span class="py-string">'Intensity of each aligned or non-aligned feature of two mapped featureXML files'</span>,
<span class="py-more">... </span>                       xlab=<span class="py-string">''</span>, ylab=<span class="py-string">'intensity of each feature'</span>, width=600, height=600)</pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0.1 on Tue Jun  5 15:10:32 2012
    </td>
    <td align="right" class="footer">
      <a target="mainFrame" href="http://epydoc.sourceforge.net"
        >http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie();
  // -->
</script>
</body>
</html>
