<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>pyMS.featureMappingQuality</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        <a href="pyMS-module.html">Package&nbsp;pyMS</a> ::
        Module&nbsp;featureMappingQuality
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="pyMS.featureMappingQuality-pysrc.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<h1 class="epydoc">Source Code for <a href="pyMS.featureMappingQuality-module.html">Module pyMS.featureMappingQuality</a></h1>
<pre class="py-src">
<a name="L1"></a><tt class="py-lineno">  1</tt>  <tt class="py-line"><tt class="py-comment"># Copyright (c) 2012 - N.P. de Klein</tt> </tt>
<a name="L2"></a><tt class="py-lineno">  2</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L3"></a><tt class="py-lineno">  3</tt>  <tt class="py-line"><tt class="py-comment">#     This file is part of pyMS.</tt> </tt>
<a name="L4"></a><tt class="py-lineno">  4</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L5"></a><tt class="py-lineno">  5</tt>  <tt class="py-line"><tt class="py-comment">#     pyMS is free software: you can redistribute it and/or modify</tt> </tt>
<a name="L6"></a><tt class="py-lineno">  6</tt>  <tt class="py-line"><tt class="py-comment">#     it under the terms of the GNU General Public License as published by</tt> </tt>
<a name="L7"></a><tt class="py-lineno">  7</tt>  <tt class="py-line"><tt class="py-comment">#     the Free Software Foundation, either version 3 of the License, or</tt> </tt>
<a name="L8"></a><tt class="py-lineno">  8</tt>  <tt class="py-line"><tt class="py-comment">#     (at your option) any later version.</tt> </tt>
<a name="L9"></a><tt class="py-lineno">  9</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L10"></a><tt class="py-lineno"> 10</tt>  <tt class="py-line"><tt class="py-comment">#     pyMS is distributed in the hope that it will be useful,</tt> </tt>
<a name="L11"></a><tt class="py-lineno"> 11</tt>  <tt class="py-line"><tt class="py-comment">#     but WITHOUT ANY WARRANTY; without even the implied warranty of</tt> </tt>
<a name="L12"></a><tt class="py-lineno"> 12</tt>  <tt class="py-line"><tt class="py-comment">#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</tt> </tt>
<a name="L13"></a><tt class="py-lineno"> 13</tt>  <tt class="py-line"><tt class="py-comment">#     GNU General Public License for more details.</tt> </tt>
<a name="L14"></a><tt class="py-lineno"> 14</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L15"></a><tt class="py-lineno"> 15</tt>  <tt class="py-line"><tt class="py-comment">#     You should have received a copy of the GNU General Public License</tt> </tt>
<a name="L16"></a><tt class="py-lineno"> 16</tt>  <tt class="py-line"><tt class="py-comment">#     along with pyMS.  If not, see &lt;http://www.gnu.org/licenses/&gt;.")</tt> </tt>
<a name="L17"></a><tt class="py-lineno"> 17</tt>  <tt class="py-line"> </tt>
<a name="L18"></a><tt class="py-lineno"> 18</tt>  <tt class="py-line"><tt class="py-docstring">"""</tt> </tt>
<a name="L19"></a><tt class="py-lineno"> 19</tt>  <tt class="py-line"><tt class="py-docstring">Compares quality of data of two mapped featureXML files by looking at which features are, and which features aren't mapped, and what the intensity</tt> </tt>
<a name="L20"></a><tt class="py-lineno"> 20</tt>  <tt class="py-line"><tt class="py-docstring">difference is between tehse two. </tt> </tt>
<a name="L21"></a><tt class="py-lineno"> 21</tt>  <tt class="py-line"><tt class="py-docstring">"""</tt> </tt>
<a name="L22"></a><tt class="py-lineno"> 22</tt>  <tt class="py-line"> </tt>
<a name="L23"></a><tt class="py-lineno"> 23</tt>  <tt class="py-line"><tt class="py-comment"># author: ndeklein</tt> </tt>
<a name="L24"></a><tt class="py-lineno"> 24</tt>  <tt class="py-line"><tt class="py-comment"># date:02/04/2012</tt> </tt>
<a name="L25"></a><tt class="py-lineno"> 25</tt>  <tt class="py-line"><tt class="py-comment"># summary: Compares quality of data of two mapped featureXML files.</tt> </tt>
<a name="L26"></a><tt class="py-lineno"> 26</tt>  <tt class="py-line"> </tt>
<a name="L27"></a><tt class="py-lineno"> 27</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt id="link-0" class="py-name" targets="Module pyMS.parseFeatureXML=pyMS.parseFeatureXML-module.html"><a title="pyMS.parseFeatureXML" class="py-name" href="#" onclick="return doclink('link-0', 'parseFeatureXML', 'link-0');">parseFeatureXML</a></tt> </tt>
<a name="L28"></a><tt class="py-lineno"> 28</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt class="py-name">xml</tt><tt class="py-op">.</tt><tt class="py-name">etree</tt> <tt class="py-keyword">import</tt> <tt class="py-name">cElementTree</tt> </tt>
<a name="L29"></a><tt class="py-lineno"> 29</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt id="link-1" class="py-name" targets="Module pyMS.elementFunctions=pyMS.elementFunctions-module.html"><a title="pyMS.elementFunctions" class="py-name" href="#" onclick="return doclink('link-1', 'elementFunctions', 'link-1');">elementFunctions</a></tt> </tt>
<a name="L30"></a><tt class="py-lineno"> 30</tt>  <tt class="py-line"> </tt>
<a name="parseTrafoXML"></a><div id="parseTrafoXML-def"><a name="L31"></a><tt class="py-lineno"> 31</tt> <a class="py-toggle" href="#" id="parseTrafoXML-toggle" onclick="return toggle('parseTrafoXML');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMS.featureMappingQuality-module.html#parseTrafoXML">parseTrafoXML</a><tt class="py-op">(</tt><tt class="py-param">trafoXML</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="parseTrafoXML-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="parseTrafoXML-expanded"><a name="L32"></a><tt class="py-lineno"> 32</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L33"></a><tt class="py-lineno"> 33</tt>  <tt class="py-line"><tt class="py-docstring">    Parses a trafoXML file and returns a list of dictionaries with keys to and from and their values. </tt> </tt>
<a name="L34"></a><tt class="py-lineno"> 34</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L35"></a><tt class="py-lineno"> 35</tt>  <tt class="py-line"><tt class="py-docstring">    @type trafoXML: string</tt> </tt>
<a name="L36"></a><tt class="py-lineno"> 36</tt>  <tt class="py-line"><tt class="py-docstring">    @param trafoXML: path to a trafoXML file</tt> </tt>
<a name="L37"></a><tt class="py-lineno"> 37</tt>  <tt class="py-line"><tt class="py-docstring">    @rtype: list of dicts and numeric</tt> </tt>
<a name="L38"></a><tt class="py-lineno"> 38</tt>  <tt class="py-line"><tt class="py-docstring">    @return: A dictionary for every change in the trafoXML file with as keys 'To' and 'From'</tt> </tt>
<a name="L39"></a><tt class="py-lineno"> 39</tt>  <tt class="py-line"><tt class="py-docstring">    @raise InputError: An identity trafoXML file given instead of the linear</tt> </tt>
<a name="L40"></a><tt class="py-lineno"> 40</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L41"></a><tt class="py-lineno"> 41</tt>  <tt class="py-line"><tt class="py-docstring">    B{Example:}</tt> </tt>
<a name="L42"></a><tt class="py-lineno"> 42</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L43"></a><tt class="py-lineno"> 43</tt>  <tt class="py-line"><tt class="py-docstring">    Print a list of dictionaries with all the from and to values.</tt> </tt>
<a name="L44"></a><tt class="py-lineno"> 44</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L45"></a><tt class="py-lineno"> 45</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; print trafo.parseTrafoXML(testFolder+'featurexmlTestFile_2.trafoXML')</tt> </tt>
<a name="L46"></a><tt class="py-lineno"> 46</tt>  <tt class="py-line"><tt class="py-docstring">    [{'from': 5189.2922399999998, 'to': 5109.2922399999998},{'from': 5197.2922399999998, 'to': 5107.2922399999998},{'from': 3969.5872599999998, 'to': 4009.5872599999998}]</tt> </tt>
<a name="L47"></a><tt class="py-lineno"> 47</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L48"></a><tt class="py-lineno"> 48</tt>  <tt class="py-line">     </tt>
<a name="L49"></a><tt class="py-lineno"> 49</tt>  <tt class="py-line">    <tt class="py-name">changeList</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L50"></a><tt class="py-lineno"> 50</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">event</tt><tt class="py-op">,</tt> <tt class="py-name">element</tt> <tt class="py-keyword">in</tt> <tt class="py-name">cElementTree</tt><tt class="py-op">.</tt><tt class="py-name">iterparse</tt><tt class="py-op">(</tt><tt class="py-name">trafoXML</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L51"></a><tt class="py-lineno"> 51</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-name">element</tt><tt class="py-op">.</tt><tt class="py-name">tag</tt> <tt class="py-op">==</tt> <tt class="py-string">'Transformation'</tt><tt class="py-op">:</tt> </tt>
<a name="L52"></a><tt class="py-lineno"> 52</tt>  <tt class="py-line">            <tt class="py-keyword">if</tt> <tt id="link-2" class="py-name"><a title="pyMS.elementFunctions" class="py-name" href="#" onclick="return doclink('link-2', 'elementFunctions', 'link-1');">elementFunctions</a></tt><tt class="py-op">.</tt><tt id="link-3" class="py-name" targets="Function pyMS.elementFunctions.getItems()=pyMS.elementFunctions-module.html#getItems"><a title="pyMS.elementFunctions.getItems" class="py-name" href="#" onclick="return doclink('link-3', 'getItems', 'link-3');">getItems</a></tt><tt class="py-op">(</tt><tt class="py-name">element</tt><tt class="py-op">)</tt><tt class="py-op">[</tt><tt class="py-string">'name'</tt><tt class="py-op">]</tt> <tt class="py-op">==</tt> <tt class="py-string">'identity'</tt><tt class="py-op">:</tt> </tt>
<a name="L53"></a><tt class="py-lineno"> 53</tt>  <tt class="py-line">                <tt class="py-keyword">raise</tt> <tt class="py-name">IOError</tt><tt class="py-op">,</tt> <tt class="py-name">trafoXML</tt><tt class="py-op">+</tt><tt class="py-string">' is a trafoXML identity file (see the Transformation node). There is no information in the identity file. Use the \'linear\' file as input'</tt> </tt>
<a name="L54"></a><tt class="py-lineno"> 54</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-name">element</tt><tt class="py-op">.</tt><tt class="py-name">tag</tt> <tt class="py-op">==</tt> <tt class="py-string">'Pair'</tt><tt class="py-op">:</tt> </tt>
<a name="L55"></a><tt class="py-lineno"> 55</tt>  <tt class="py-line">            <tt class="py-name">changeList</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-op">{</tt><tt class="py-string">'from'</tt><tt class="py-op">:</tt><tt class="py-name">float</tt><tt class="py-op">(</tt><tt id="link-4" class="py-name"><a title="pyMS.elementFunctions" class="py-name" href="#" onclick="return doclink('link-4', 'elementFunctions', 'link-1');">elementFunctions</a></tt><tt class="py-op">.</tt><tt id="link-5" class="py-name"><a title="pyMS.elementFunctions.getItems" class="py-name" href="#" onclick="return doclink('link-5', 'getItems', 'link-3');">getItems</a></tt><tt class="py-op">(</tt><tt class="py-name">element</tt><tt class="py-op">)</tt><tt class="py-op">[</tt><tt class="py-string">'from'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'to'</tt><tt class="py-op">:</tt><tt class="py-name">float</tt><tt class="py-op">(</tt><tt id="link-6" class="py-name"><a title="pyMS.elementFunctions" class="py-name" href="#" onclick="return doclink('link-6', 'elementFunctions', 'link-1');">elementFunctions</a></tt><tt class="py-op">.</tt><tt id="link-7" class="py-name"><a title="pyMS.elementFunctions.getItems" class="py-name" href="#" onclick="return doclink('link-7', 'getItems', 'link-3');">getItems</a></tt><tt class="py-op">(</tt><tt class="py-name">element</tt><tt class="py-op">)</tt><tt class="py-op">[</tt><tt class="py-string">'to'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">}</tt><tt class="py-op">)</tt> </tt>
<a name="L56"></a><tt class="py-lineno"> 56</tt>  <tt class="py-line">             </tt>
<a name="L57"></a><tt class="py-lineno"> 57</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">changeList</tt> </tt>
</div><a name="L58"></a><tt class="py-lineno"> 58</tt>  <tt class="py-line">     </tt>
<a name="L59"></a><tt class="py-lineno"> 59</tt>  <tt class="py-line"> </tt>
<a name="FeatureMappingQuality"></a><div id="FeatureMappingQuality-def"><a name="L60"></a><tt class="py-lineno"> 60</tt> <a class="py-toggle" href="#" id="FeatureMappingQuality-toggle" onclick="return toggle('FeatureMappingQuality');">-</a><tt class="py-line"><tt class="py-keyword">class</tt> <a class="py-def-name" href="pyMS.featureMappingQuality.FeatureMappingQuality-class.html">FeatureMappingQuality</a><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="FeatureMappingQuality-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="FeatureMappingQuality-expanded"><a name="L61"></a><tt class="py-lineno"> 61</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L62"></a><tt class="py-lineno"> 62</tt>  <tt class="py-line"><tt class="py-docstring">    FeatureMappingQuality contains functions to compared two mapped featureXML files.        </tt> </tt>
<a name="L63"></a><tt class="py-lineno"> 63</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="FeatureMappingQuality.__init__"></a><div id="FeatureMappingQuality.__init__-def"><a name="L64"></a><tt class="py-lineno"> 64</tt> <a class="py-toggle" href="#" id="FeatureMappingQuality.__init__-toggle" onclick="return toggle('FeatureMappingQuality.__init__');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMS.featureMappingQuality.FeatureMappingQuality-class.html#__init__">__init__</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt><tt class="py-param">mapped_featureXML_1</tt><tt class="py-op">,</tt> <tt class="py-param">mapped_featureXML_2</tt><tt class="py-op">,</tt> <tt class="py-param">trafoXML_list</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="FeatureMappingQuality.__init__-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="FeatureMappingQuality.__init__-expanded"><a name="L65"></a><tt class="py-lineno"> 65</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L66"></a><tt class="py-lineno"> 66</tt>  <tt class="py-line"><tt class="py-docstring">        @type mapped_featureXML_1: pyMS.pareFeatureXML.Reader</tt> </tt>
<a name="L67"></a><tt class="py-lineno"> 67</tt>  <tt class="py-line"><tt class="py-docstring">        @param mapped_featureXML_1: An instance of L{pyMS.parseFeatureXML.Reader}. This is one of the files mapped by OpenMS's MapAlignerPoseClustering.</tt> </tt>
<a name="L68"></a><tt class="py-lineno"> 68</tt>  <tt class="py-line"><tt class="py-docstring">        @type mapped_featureXML_2: pyMS.pareFeatureXML.Reader</tt> </tt>
<a name="L69"></a><tt class="py-lineno"> 69</tt>  <tt class="py-line"><tt class="py-docstring">        @param mapped_featureXML_2: An instance of L{pyMS.parseFeatureXML.Reader}. This is one of the files mapped by OpenMS's MapAlignerPoseClustering.</tt> </tt>
<a name="L70"></a><tt class="py-lineno"> 70</tt>  <tt class="py-line"><tt class="py-docstring">        @type trafoXML_list: FeatureMappingQuality.parseTrafoXML</tt> </tt>
<a name="L71"></a><tt class="py-lineno"> 71</tt>  <tt class="py-line"><tt class="py-docstring">        @param trafoXML_list: list of dicts with the chagnes in retention time </tt> </tt>
<a name="L72"></a><tt class="py-lineno"> 72</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L73"></a><tt class="py-lineno"> 73</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">mapped_featureXML_2</tt> <tt class="py-op">=</tt> <tt class="py-name">mapped_featureXML_2</tt> </tt>
<a name="L74"></a><tt class="py-lineno"> 74</tt>  <tt class="py-line">        <tt class="py-comment"># self.retentionDict_1 will contain all the feature info with retention time as key of featureXML file 1</tt> </tt>
<a name="L75"></a><tt class="py-lineno"> 75</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">retentionDict_1</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-op">}</tt> </tt>
<a name="L76"></a><tt class="py-lineno"> 76</tt>  <tt class="py-line">        <tt class="py-comment"># self.retentionDict_2 will contain all the feature info with retention time as key of featureXML file 2</tt> </tt>
<a name="L77"></a><tt class="py-lineno"> 77</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">retentionDict_2</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-op">}</tt> </tt>
<a name="L78"></a><tt class="py-lineno"> 78</tt>  <tt class="py-line">        <tt class="py-comment"># this method is more expensive on memory, but a lot faster than old method (old method used getWindow, which looped through the list each time)</tt> </tt>
<a name="L79"></a><tt class="py-lineno"> 79</tt>  <tt class="py-line">        <tt class="py-comment"># this makes the retention time the key value, so that the retention time can be found with O(1)</tt> </tt>
<a name="L80"></a><tt class="py-lineno"> 80</tt>  <tt class="py-line">        <tt class="py-comment"># the retention time is rounded to second point after decimal because that is unique enough</tt> </tt>
<a name="L81"></a><tt class="py-lineno"> 81</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">feature</tt> <tt class="py-keyword">in</tt> <tt class="py-name">mapped_featureXML_1</tt><tt class="py-op">.</tt><tt id="link-8" class="py-name" targets="Method pyMS.parseFeatureXML.Reader.getSimpleFeatureInfo()=pyMS.parseFeatureXML.Reader-class.html#getSimpleFeatureInfo"><a title="pyMS.parseFeatureXML.Reader.getSimpleFeatureInfo" class="py-name" href="#" onclick="return doclink('link-8', 'getSimpleFeatureInfo', 'link-8');">getSimpleFeatureInfo</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L82"></a><tt class="py-lineno"> 82</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">retentionDict_1</tt><tt class="py-op">[</tt><tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">float</tt><tt class="py-op">(</tt><tt class="py-name">round</tt><tt class="py-op">(</tt><tt class="py-name">mapped_featureXML_1</tt><tt class="py-op">[</tt><tt class="py-string">'retention time'</tt><tt class="py-op">]</tt><tt class="py-op">,</tt><tt class="py-number">2</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">]</tt> <tt class="py-op">=</tt> <tt class="py-name">mapped_featureXML_1</tt><tt class="py-op">.</tt><tt id="link-9" class="py-name" targets="Method pyMS.parseFeatureXML.Reader.getElementInfo()=pyMS.parseFeatureXML.Reader-class.html#getElementInfo"><a title="pyMS.parseFeatureXML.Reader.getElementInfo" class="py-name" href="#" onclick="return doclink('link-9', 'getElementInfo', 'link-9');">getElementInfo</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L83"></a><tt class="py-lineno"> 83</tt>  <tt class="py-line">         </tt>
<a name="L84"></a><tt class="py-lineno"> 84</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">feature</tt> <tt class="py-keyword">in</tt> <tt class="py-name">mapped_featureXML_2</tt><tt class="py-op">.</tt><tt id="link-10" class="py-name"><a title="pyMS.parseFeatureXML.Reader.getSimpleFeatureInfo" class="py-name" href="#" onclick="return doclink('link-10', 'getSimpleFeatureInfo', 'link-8');">getSimpleFeatureInfo</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L85"></a><tt class="py-lineno"> 85</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">retentionDict_2</tt><tt class="py-op">[</tt><tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">float</tt><tt class="py-op">(</tt><tt class="py-name">round</tt><tt class="py-op">(</tt><tt class="py-name">mapped_featureXML_2</tt><tt class="py-op">[</tt><tt class="py-string">'retention time'</tt><tt class="py-op">]</tt><tt class="py-op">,</tt><tt class="py-number">2</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">]</tt> <tt class="py-op">=</tt> <tt class="py-name">mapped_featureXML_2</tt><tt class="py-op">.</tt><tt id="link-11" class="py-name"><a title="pyMS.parseFeatureXML.Reader.getElementInfo" class="py-name" href="#" onclick="return doclink('link-11', 'getElementInfo', 'link-9');">getElementInfo</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L86"></a><tt class="py-lineno"> 86</tt>  <tt class="py-line"> </tt>
<a name="L87"></a><tt class="py-lineno"> 87</tt>  <tt class="py-line">    </tt>
<a name="L88"></a><tt class="py-lineno"> 88</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">trafoXML_list</tt> <tt class="py-op">=</tt> <tt class="py-name">trafoXML_list</tt> </tt>
<a name="L89"></a><tt class="py-lineno"> 89</tt>  <tt class="py-line">         </tt>
<a name="L90"></a><tt class="py-lineno"> 90</tt>  <tt class="py-line">        <tt class="py-comment"># to keep the mapped and non-mapped retention times. This way, if you use unmappedIntensities() and mappedIntensities() it will only run them once</tt> </tt>
<a name="L91"></a><tt class="py-lineno"> 91</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">mappingDict</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-op">}</tt> </tt>
</div><a name="L92"></a><tt class="py-lineno"> 92</tt>  <tt class="py-line">         </tt>
<a name="L93"></a><tt class="py-lineno"> 93</tt>  <tt class="py-line">         </tt>
<a name="FeatureMappingQuality.mapping"></a><div id="FeatureMappingQuality.mapping-def"><a name="L94"></a><tt class="py-lineno"> 94</tt> <a class="py-toggle" href="#" id="FeatureMappingQuality.mapping-toggle" onclick="return toggle('FeatureMappingQuality.mapping');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMS.featureMappingQuality.FeatureMappingQuality-class.html#mapping">mapping</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="FeatureMappingQuality.mapping-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="FeatureMappingQuality.mapping-expanded"><a name="L95"></a><tt class="py-lineno"> 95</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L96"></a><tt class="py-lineno"> 96</tt>  <tt class="py-line"><tt class="py-docstring">        Map the retention times of the two featureXML file to the corresponding trafoXML file. </tt> </tt>
<a name="L97"></a><tt class="py-lineno"> 97</tt>  <tt class="py-line"><tt class="py-docstring">       </tt> </tt>
<a name="L98"></a><tt class="py-lineno"> 98</tt>  <tt class="py-line"><tt class="py-docstring">        @rtype: dict</tt> </tt>
<a name="L99"></a><tt class="py-lineno"> 99</tt>  <tt class="py-line"><tt class="py-docstring">        @return: Return the retention times of both featureXML_1 and featureXML_2 (those given to __init__) that don't and do map. They are returned in a dict with keys 'featureXML_1_mapped', 'featureXML_1_not_mapped','featureXML_2_mapped' and 'featureXML_2_not_mapped. The values are a list of retention times.</tt> </tt>
<a name="L100"></a><tt class="py-lineno">100</tt>  <tt class="py-line"><tt class="py-docstring">                        </tt> </tt>
<a name="L101"></a><tt class="py-lineno">101</tt>  <tt class="py-line"><tt class="py-docstring">        B{Example:}</tt> </tt>
<a name="L102"></a><tt class="py-lineno">102</tt>  <tt class="py-line"><tt class="py-docstring">        </tt> </tt>
<a name="L103"></a><tt class="py-lineno">103</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; import parseFeatureXML</tt> </tt>
<a name="L104"></a><tt class="py-lineno">104</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; import featureMappingQuality as fmq</tt> </tt>
<a name="L105"></a><tt class="py-lineno">105</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; featureXML_1 = parseFeatureXML.Reader('featureXML_example.featureXML')            </tt> </tt>
<a name="L106"></a><tt class="py-lineno">106</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; featureXML_2 = parseFeatureXML.Reader('featureXML_example.featureXML')</tt> </tt>
<a name="L107"></a><tt class="py-lineno">107</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; trafoXML = fmq.parseTrafoXML('trafoXML_example.trafoXML')</tt> </tt>
<a name="L108"></a><tt class="py-lineno">108</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; featureMappingQuality = fmq.FeatureMappingQuality(featureXML_1, featureXML_2, trafoXML)</tt> </tt>
<a name="L109"></a><tt class="py-lineno">109</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; print featureMappingQuality.mapping()</tt> </tt>
<a name="L110"></a><tt class="py-lineno">110</tt>  <tt class="py-line"><tt class="py-docstring">        {'featureXML_1_mapped': set(['4009.59', '5107.29', '5109.29']),'featureXML_1_not_mapped': set(['7052.29']), 'featureXML_2_mapped': set(['3969.59', '5189.29', '5197.29']),'featureXML_2_not_mapped': set(['5345.29'])} </tt> </tt>
<a name="L111"></a><tt class="py-lineno">111</tt>  <tt class="py-line"><tt class="py-docstring">        </tt> </tt>
<a name="L112"></a><tt class="py-lineno">112</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L113"></a><tt class="py-lineno">113</tt>  <tt class="py-line">        <tt class="py-comment"># featureXML_set_1 and 2 will contain the retention times of the featureXML files </tt> </tt>
<a name="L114"></a><tt class="py-lineno">114</tt>  <tt class="py-line">        <tt class="py-name">featureXML_set_1</tt> <tt class="py-op">=</tt> <tt class="py-name">set</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L115"></a><tt class="py-lineno">115</tt>  <tt class="py-line">        <tt class="py-name">featureXML_set_2</tt> <tt class="py-op">=</tt> <tt class="py-name">set</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L116"></a><tt class="py-lineno">116</tt>  <tt class="py-line">        <tt class="py-comment"># trafo_from_set will contain the retention times of the trafoXML file from the 'from' node</tt> </tt>
<a name="L117"></a><tt class="py-lineno">117</tt>  <tt class="py-line">        <tt class="py-name">trafo_from_set</tt> <tt class="py-op">=</tt> <tt class="py-name">set</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L118"></a><tt class="py-lineno">118</tt>  <tt class="py-line">        <tt class="py-comment"># trafo_from_set will contain the retention times of the trafoXML file from the 'to' node</tt> </tt>
<a name="L119"></a><tt class="py-lineno">119</tt>  <tt class="py-line">        <tt class="py-name">trafo_to_set</tt> <tt class="py-op">=</tt> <tt class="py-name">set</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L120"></a><tt class="py-lineno">120</tt>  <tt class="py-line">         </tt>
<a name="L121"></a><tt class="py-lineno">121</tt>  <tt class="py-line">        <tt class="py-comment"># add all the retention times to the right set</tt> </tt>
<a name="L122"></a><tt class="py-lineno">122</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">retentionTime</tt> <tt class="py-keyword">in</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">retentionDict_1</tt><tt class="py-op">:</tt> </tt>
<a name="L123"></a><tt class="py-lineno">123</tt>  <tt class="py-line">            <tt class="py-name">featureXML_set_1</tt><tt class="py-op">.</tt><tt class="py-name">add</tt><tt class="py-op">(</tt><tt class="py-name">retentionTime</tt><tt class="py-op">)</tt> </tt>
<a name="L124"></a><tt class="py-lineno">124</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">retentionTime</tt> <tt class="py-keyword">in</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">retentionDict_2</tt><tt class="py-op">:</tt> </tt>
<a name="L125"></a><tt class="py-lineno">125</tt>  <tt class="py-line">            <tt class="py-name">featureXML_set_2</tt><tt class="py-op">.</tt><tt class="py-name">add</tt><tt class="py-op">(</tt><tt class="py-name">retentionTime</tt><tt class="py-op">)</tt> </tt>
<a name="L126"></a><tt class="py-lineno">126</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">retentionTime</tt> <tt class="py-keyword">in</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">trafoXML_list</tt><tt class="py-op">:</tt> </tt>
<a name="L127"></a><tt class="py-lineno">127</tt>  <tt class="py-line">            <tt class="py-comment"># because the rt values in featureXML files are rounded to 2 decimals, do the same for trafoxml</tt> </tt>
<a name="L128"></a><tt class="py-lineno">128</tt>  <tt class="py-line">            <tt class="py-name">trafo_from_set</tt><tt class="py-op">.</tt><tt class="py-name">add</tt><tt class="py-op">(</tt><tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">round</tt><tt class="py-op">(</tt><tt class="py-name">float</tt><tt class="py-op">(</tt><tt class="py-name">retentionTime</tt><tt class="py-op">[</tt><tt class="py-string">'from'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-number">2</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L129"></a><tt class="py-lineno">129</tt>  <tt class="py-line">            <tt class="py-name">trafo_to_set</tt><tt class="py-op">.</tt><tt class="py-name">add</tt><tt class="py-op">(</tt><tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">round</tt><tt class="py-op">(</tt><tt class="py-name">float</tt><tt class="py-op">(</tt><tt class="py-name">retentionTime</tt><tt class="py-op">[</tt><tt class="py-string">'to'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-number">2</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L130"></a><tt class="py-lineno">130</tt>  <tt class="py-line"> </tt>
<a name="L131"></a><tt class="py-lineno">131</tt>  <tt class="py-line">        <tt class="py-comment"># if the length of featureXML_set_1 - trafo_to_set is smaller than - trafo from set,</tt> </tt>
<a name="L132"></a><tt class="py-lineno">132</tt>  <tt class="py-line">        <tt class="py-comment"># use the to_set, otherwise, use the from_set. The correct one will always remove more retention times</tt> </tt>
<a name="L133"></a><tt class="py-lineno">133</tt>  <tt class="py-line">        <tt class="py-name">featureXML_min_to_set</tt> <tt class="py-op">=</tt> <tt class="py-name">featureXML_set_1</tt><tt class="py-op">.</tt><tt class="py-name">difference</tt><tt class="py-op">(</tt><tt class="py-name">trafo_to_set</tt><tt class="py-op">)</tt> </tt>
<a name="L134"></a><tt class="py-lineno">134</tt>  <tt class="py-line">        <tt class="py-name">featureXML_min_from_set</tt> <tt class="py-op">=</tt> <tt class="py-name">featureXML_set_1</tt><tt class="py-op">.</tt><tt class="py-name">difference</tt><tt class="py-op">(</tt><tt class="py-name">trafo_from_set</tt><tt class="py-op">)</tt> </tt>
<a name="L135"></a><tt class="py-lineno">135</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">featureXML_min_to_set</tt><tt class="py-op">)</tt> <tt class="py-op">&lt;</tt> <tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">featureXML_min_from_set</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L136"></a><tt class="py-lineno">136</tt>  <tt class="py-line">            <tt class="py-name">featureXML_set_1_not_mapped</tt> <tt class="py-op">=</tt> <tt class="py-name">featureXML_min_to_set</tt> </tt>
<a name="L137"></a><tt class="py-lineno">137</tt>  <tt class="py-line">            <tt class="py-name">featureXML_set_1_mapped</tt> <tt class="py-op">=</tt> <tt class="py-name">featureXML_set_1</tt><tt class="py-op">.</tt><tt class="py-name">intersection</tt><tt class="py-op">(</tt><tt class="py-name">trafo_to_set</tt><tt class="py-op">)</tt> </tt>
<a name="L138"></a><tt class="py-lineno">138</tt>  <tt class="py-line">            <tt class="py-name">featureXML_set_2_not_mapped</tt> <tt class="py-op">=</tt> <tt class="py-name">featureXML_set_2</tt><tt class="py-op">.</tt><tt class="py-name">difference</tt><tt class="py-op">(</tt><tt class="py-name">trafo_from_set</tt><tt class="py-op">)</tt> </tt>
<a name="L139"></a><tt class="py-lineno">139</tt>  <tt class="py-line">            <tt class="py-name">featureXML_set_2_mapped</tt> <tt class="py-op">=</tt> <tt class="py-name">featureXML_set_2</tt><tt class="py-op">.</tt><tt class="py-name">intersection</tt><tt class="py-op">(</tt><tt class="py-name">trafo_from_set</tt><tt class="py-op">)</tt> </tt>
<a name="L140"></a><tt class="py-lineno">140</tt>  <tt class="py-line">        <tt class="py-keyword">elif</tt> <tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">featureXML_min_to_set</tt><tt class="py-op">)</tt> <tt class="py-op">&gt;</tt> <tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">featureXML_min_from_set</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L141"></a><tt class="py-lineno">141</tt>  <tt class="py-line">            <tt class="py-name">featureXML_set_1_not_mapped</tt> <tt class="py-op">=</tt> <tt class="py-name">featureXML_min_from_set</tt> </tt>
<a name="L142"></a><tt class="py-lineno">142</tt>  <tt class="py-line">            <tt class="py-name">featureXML_set_1_mapped</tt> <tt class="py-op">=</tt> <tt class="py-name">featureXML_set_1</tt><tt class="py-op">.</tt><tt class="py-name">intersection</tt><tt class="py-op">(</tt><tt class="py-name">trafo_from_set</tt><tt class="py-op">)</tt> </tt>
<a name="L143"></a><tt class="py-lineno">143</tt>  <tt class="py-line">            <tt class="py-name">featureXML_set_2_not_mapped</tt> <tt class="py-op">=</tt> <tt class="py-name">featureXML_set_2</tt><tt class="py-op">.</tt><tt class="py-name">difference</tt><tt class="py-op">(</tt><tt class="py-name">trafo_to_set</tt><tt class="py-op">)</tt> </tt>
<a name="L144"></a><tt class="py-lineno">144</tt>  <tt class="py-line">            <tt class="py-name">featureXML_set_2_mapped</tt> <tt class="py-op">=</tt> <tt class="py-name">featureXML_set_2</tt><tt class="py-op">.</tt><tt class="py-name">intersection</tt><tt class="py-op">(</tt><tt class="py-name">trafo_to_set</tt><tt class="py-op">)</tt> </tt>
<a name="L145"></a><tt class="py-lineno">145</tt>  <tt class="py-line">        <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L146"></a><tt class="py-lineno">146</tt>  <tt class="py-line">            <tt class="py-keyword">raise</tt> <tt class="py-name">RuntimeError</tt><tt class="py-op">,</tt> <tt class="py-string">'Something is wrong with the featureXML files and/or trafoXML files. None of the retention times '</tt>\ </tt>
<a name="L147"></a><tt class="py-lineno">147</tt>  <tt class="py-line">                                <tt class="py-op">+</tt><tt class="py-string">'of the trafoXML mapped to the the first featureXML instance given. Make sure that the trafoXML file '</tt>\ </tt>
<a name="L148"></a><tt class="py-lineno">148</tt>  <tt class="py-line">                                <tt class="py-op">+</tt><tt class="py-string">'corresponds to the two featureXML instances given'</tt> </tt>
<a name="L149"></a><tt class="py-lineno">149</tt>  <tt class="py-line">        </tt>
<a name="L150"></a><tt class="py-lineno">150</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">mappingDict</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-string">'featureXML_1_mapped'</tt><tt class="py-op">:</tt><tt class="py-name">featureXML_set_1_mapped</tt><tt class="py-op">,</tt> <tt class="py-string">'featureXML_1_not_mapped'</tt><tt class="py-op">:</tt><tt class="py-name">featureXML_set_1_not_mapped</tt><tt class="py-op">,</tt>  </tt>
<a name="L151"></a><tt class="py-lineno">151</tt>  <tt class="py-line">                <tt class="py-string">'featureXML_2_mapped'</tt><tt class="py-op">:</tt><tt class="py-name">featureXML_set_2_mapped</tt><tt class="py-op">,</tt> <tt class="py-string">'featureXML_2_not_mapped'</tt><tt class="py-op">:</tt><tt class="py-name">featureXML_set_2_not_mapped</tt><tt class="py-op">}</tt> </tt>
<a name="L152"></a><tt class="py-lineno">152</tt>  <tt class="py-line">        <tt class="py-keyword">return</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">mappingDict</tt> </tt>
</div><a name="L153"></a><tt class="py-lineno">153</tt>  <tt class="py-line">     </tt>
<a name="FeatureMappingQuality.unmappedIntensities"></a><div id="FeatureMappingQuality.unmappedIntensities-def"><a name="L154"></a><tt class="py-lineno">154</tt> <a class="py-toggle" href="#" id="FeatureMappingQuality.unmappedIntensities-toggle" onclick="return toggle('FeatureMappingQuality.unmappedIntensities');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMS.featureMappingQuality.FeatureMappingQuality-class.html#unmappedIntensities">unmappedIntensities</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="FeatureMappingQuality.unmappedIntensities-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="FeatureMappingQuality.unmappedIntensities-expanded"><a name="L155"></a><tt class="py-lineno">155</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L156"></a><tt class="py-lineno">156</tt>  <tt class="py-line"><tt class="py-docstring">        Get the intensities of the features that weren't mapped.</tt> </tt>
<a name="L157"></a><tt class="py-lineno">157</tt>  <tt class="py-line"><tt class="py-docstring">        </tt> </tt>
<a name="L158"></a><tt class="py-lineno">158</tt>  <tt class="py-line"><tt class="py-docstring">        @rtype: two lists</tt> </tt>
<a name="L159"></a><tt class="py-lineno">159</tt>  <tt class="py-line"><tt class="py-docstring">        @return: Two lists with the intensities of all the features of the first and second featureXML given to FeatureMappingQuality that weren't in the trafoXML file </tt> </tt>
<a name="L160"></a><tt class="py-lineno">160</tt>  <tt class="py-line"><tt class="py-docstring">        </tt> </tt>
<a name="L161"></a><tt class="py-lineno">161</tt>  <tt class="py-line"><tt class="py-docstring">        B{Example:}</tt> </tt>
<a name="L162"></a><tt class="py-lineno">162</tt>  <tt class="py-line"><tt class="py-docstring">        </tt> </tt>
<a name="L163"></a><tt class="py-lineno">163</tt>  <tt class="py-line"><tt class="py-docstring">        Get the intensities of all the non-mapped features of both featureXML files</tt> </tt>
<a name="L164"></a><tt class="py-lineno">164</tt>  <tt class="py-line"><tt class="py-docstring">        </tt> </tt>
<a name="L165"></a><tt class="py-lineno">165</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; import parseFeatureXML</tt> </tt>
<a name="L166"></a><tt class="py-lineno">166</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; import featureMappingQuality as fmq</tt> </tt>
<a name="L167"></a><tt class="py-lineno">167</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; featureXML_1 = parseFeatureXML.Reader('featureXML_example.featureXML')            </tt> </tt>
<a name="L168"></a><tt class="py-lineno">168</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; featureXML_2 = parseFeatureXML.Reader('featureXML_example.featureXML')</tt> </tt>
<a name="L169"></a><tt class="py-lineno">169</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; trafoXML = fmq.parseTrafoXML('trafoXML_example.trafoXML')</tt> </tt>
<a name="L170"></a><tt class="py-lineno">170</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; featureMappingQuality = fmq.FeatureMappingQuality(featureXML_1, featureXML_2, trafoXML)</tt> </tt>
<a name="L171"></a><tt class="py-lineno">171</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; print featureMappingQuality.unmappedIntensities()</tt> </tt>
<a name="L172"></a><tt class="py-lineno">172</tt>  <tt class="py-line"><tt class="py-docstring">        </tt> </tt>
<a name="L173"></a><tt class="py-lineno">173</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L174"></a><tt class="py-lineno">174</tt>  <tt class="py-line">        <tt class="py-comment"># if mappingDict is empty, mapping has not run for this instance of FeatureMappingQuality yet. Run it.</tt> </tt>
<a name="L175"></a><tt class="py-lineno">175</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-keyword">not</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">mappingDict</tt><tt class="py-op">:</tt> </tt>
<a name="L176"></a><tt class="py-lineno">176</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-12" class="py-name" targets="Method pyMS.featureMappingQuality.FeatureMappingQuality.mapping()=pyMS.featureMappingQuality.FeatureMappingQuality-class.html#mapping"><a title="pyMS.featureMappingQuality.FeatureMappingQuality.mapping" class="py-name" href="#" onclick="return doclink('link-12', 'mapping', 'link-12');">mapping</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L177"></a><tt class="py-lineno">177</tt>  <tt class="py-line"> </tt>
<a name="L178"></a><tt class="py-lineno">178</tt>  <tt class="py-line">        <tt class="py-comment"># the non-mapped values in the first featureXML instance</tt> </tt>
<a name="L179"></a><tt class="py-lineno">179</tt>  <tt class="py-line">        <tt class="py-name">featureXML_unmapped_1</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">mappingDict</tt><tt class="py-op">[</tt><tt class="py-string">'featureXML_1_not_mapped'</tt><tt class="py-op">]</tt> </tt>
<a name="L180"></a><tt class="py-lineno">180</tt>  <tt class="py-line">        <tt class="py-comment"># the non-mapped values in the second featureXML instance</tt> </tt>
<a name="L181"></a><tt class="py-lineno">181</tt>  <tt class="py-line">        <tt class="py-name">featureXML_unmapped_2</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">mappingDict</tt><tt class="py-op">[</tt><tt class="py-string">'featureXML_2_not_mapped'</tt><tt class="py-op">]</tt> </tt>
<a name="L182"></a><tt class="py-lineno">182</tt>  <tt class="py-line">         </tt>
<a name="L183"></a><tt class="py-lineno">183</tt>  <tt class="py-line">        <tt class="py-comment"># lists to contain the intensities of the unmapped features</tt> </tt>
<a name="L184"></a><tt class="py-lineno">184</tt>  <tt class="py-line">        <tt class="py-name">unmappedList_1</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L185"></a><tt class="py-lineno">185</tt>  <tt class="py-line">        <tt class="py-name">unmappedList_2</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L186"></a><tt class="py-lineno">186</tt>  <tt class="py-line">        <tt class="py-comment"># loop through all the retention times of the non-mapped features and look it up in the retentionDict corresponding</tt> </tt>
<a name="L187"></a><tt class="py-lineno">187</tt>  <tt class="py-line">        <tt class="py-comment"># that the right number of featureXML instance</tt> </tt>
<a name="L188"></a><tt class="py-lineno">188</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">retentionTime</tt> <tt class="py-keyword">in</tt> <tt class="py-name">featureXML_unmapped_1</tt><tt class="py-op">:</tt> </tt>
<a name="L189"></a><tt class="py-lineno">189</tt>  <tt class="py-line">            <tt class="py-name">unmappedList_1</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">retentionDict_1</tt><tt class="py-op">[</tt><tt class="py-name">retentionTime</tt><tt class="py-op">]</tt><tt class="py-op">[</tt><tt class="py-string">'intensity'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L190"></a><tt class="py-lineno">190</tt>  <tt class="py-line">             </tt>
<a name="L191"></a><tt class="py-lineno">191</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">retentionTime</tt> <tt class="py-keyword">in</tt> <tt class="py-name">featureXML_unmapped_2</tt><tt class="py-op">:</tt> </tt>
<a name="L192"></a><tt class="py-lineno">192</tt>  <tt class="py-line">            <tt class="py-name">unmappedList_2</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">retentionDict_2</tt><tt class="py-op">[</tt><tt class="py-name">retentionTime</tt><tt class="py-op">]</tt><tt class="py-op">[</tt><tt class="py-string">'intensity'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L193"></a><tt class="py-lineno">193</tt>  <tt class="py-line">         </tt>
<a name="L194"></a><tt class="py-lineno">194</tt>  <tt class="py-line">        <tt class="py-keyword">return</tt> <tt class="py-name">unmappedList_1</tt><tt class="py-op">,</tt> <tt class="py-name">unmappedList_2</tt> </tt>
</div><a name="L195"></a><tt class="py-lineno">195</tt>  <tt class="py-line">         </tt>
<a name="L196"></a><tt class="py-lineno">196</tt>  <tt class="py-line">     </tt>
<a name="FeatureMappingQuality.mappedIntensities"></a><div id="FeatureMappingQuality.mappedIntensities-def"><a name="L197"></a><tt class="py-lineno">197</tt> <a class="py-toggle" href="#" id="FeatureMappingQuality.mappedIntensities-toggle" onclick="return toggle('FeatureMappingQuality.mappedIntensities');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMS.featureMappingQuality.FeatureMappingQuality-class.html#mappedIntensities">mappedIntensities</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="FeatureMappingQuality.mappedIntensities-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="FeatureMappingQuality.mappedIntensities-expanded"><a name="L198"></a><tt class="py-lineno">198</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L199"></a><tt class="py-lineno">199</tt>  <tt class="py-line"><tt class="py-docstring">        Calculate how many features did get mapped and what their intensities are.</tt> </tt>
<a name="L200"></a><tt class="py-lineno">200</tt>  <tt class="py-line"><tt class="py-docstring">        </tt> </tt>
<a name="L201"></a><tt class="py-lineno">201</tt>  <tt class="py-line"><tt class="py-docstring">        @rtype: two lists</tt> </tt>
<a name="L202"></a><tt class="py-lineno">202</tt>  <tt class="py-line"><tt class="py-docstring">        @return: Two lists with the intensities of all the features of the first and second featureXML given to FeatureMappingQuality that were in the trafoXML file </tt> </tt>
<a name="L203"></a><tt class="py-lineno">203</tt>  <tt class="py-line"><tt class="py-docstring">        </tt> </tt>
<a name="L204"></a><tt class="py-lineno">204</tt>  <tt class="py-line"><tt class="py-docstring">        B{Example:}</tt> </tt>
<a name="L205"></a><tt class="py-lineno">205</tt>  <tt class="py-line"><tt class="py-docstring">        </tt> </tt>
<a name="L206"></a><tt class="py-lineno">206</tt>  <tt class="py-line"><tt class="py-docstring">        Get the intensities of all mapped features of both featureXML files.</tt> </tt>
<a name="L207"></a><tt class="py-lineno">207</tt>  <tt class="py-line"><tt class="py-docstring">        </tt> </tt>
<a name="L208"></a><tt class="py-lineno">208</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; import parseFeatureXML</tt> </tt>
<a name="L209"></a><tt class="py-lineno">209</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; import featureMappingQuality as fmq</tt> </tt>
<a name="L210"></a><tt class="py-lineno">210</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; featureXML_1 = parseFeatureXML.Reader('featureXML_example.featureXML')            </tt> </tt>
<a name="L211"></a><tt class="py-lineno">211</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; featureXML_2 = parseFeatureXML.Reader('featureXML_example.featureXML')</tt> </tt>
<a name="L212"></a><tt class="py-lineno">212</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; trafoXML = fmq.parseTrafoXML('trafoXML_example.trafoXML')</tt> </tt>
<a name="L213"></a><tt class="py-lineno">213</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; featureMappingQuality = fmq.FeatureMappingQuality(featureXML_1, featureXML_2, trafoXML)</tt> </tt>
<a name="L214"></a><tt class="py-lineno">214</tt>  <tt class="py-line"><tt class="py-docstring">        &gt;&gt;&gt; print featureMappingQuality.mappedIntensities()</tt> </tt>
<a name="L215"></a><tt class="py-lineno">215</tt>  <tt class="py-line"><tt class="py-docstring">        </tt> </tt>
<a name="L216"></a><tt class="py-lineno">216</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L217"></a><tt class="py-lineno">217</tt>  <tt class="py-line">        <tt class="py-comment"># if mappingDict is empty, mapping has not run for this instance of FeatureMappingQuality yet. Run it.</tt> </tt>
<a name="L218"></a><tt class="py-lineno">218</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-keyword">not</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">mappingDict</tt><tt class="py-op">:</tt> </tt>
<a name="L219"></a><tt class="py-lineno">219</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-13" class="py-name"><a title="pyMS.featureMappingQuality.FeatureMappingQuality.mapping" class="py-name" href="#" onclick="return doclink('link-13', 'mapping', 'link-12');">mapping</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L220"></a><tt class="py-lineno">220</tt>  <tt class="py-line">             </tt>
<a name="L221"></a><tt class="py-lineno">221</tt>  <tt class="py-line">        <tt class="py-comment"># the non-mapped values in the first featureXML instance</tt> </tt>
<a name="L222"></a><tt class="py-lineno">222</tt>  <tt class="py-line">        <tt class="py-name">featureXML_mapped_1</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">mappingDict</tt><tt class="py-op">[</tt><tt class="py-string">'featureXML_1_mapped'</tt><tt class="py-op">]</tt> </tt>
<a name="L223"></a><tt class="py-lineno">223</tt>  <tt class="py-line">        <tt class="py-comment"># the non-mapped values in the second featureXML instance</tt> </tt>
<a name="L224"></a><tt class="py-lineno">224</tt>  <tt class="py-line">        <tt class="py-name">featureXML_mapped_2</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">mappingDict</tt><tt class="py-op">[</tt><tt class="py-string">'featureXML_2_mapped'</tt><tt class="py-op">]</tt> </tt>
<a name="L225"></a><tt class="py-lineno">225</tt>  <tt class="py-line">         </tt>
<a name="L226"></a><tt class="py-lineno">226</tt>  <tt class="py-line">        <tt class="py-comment"># lists to contain the intensities of the unmapped features</tt> </tt>
<a name="L227"></a><tt class="py-lineno">227</tt>  <tt class="py-line">        <tt class="py-name">mappedList_1</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L228"></a><tt class="py-lineno">228</tt>  <tt class="py-line">        <tt class="py-name">mappedList_2</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L229"></a><tt class="py-lineno">229</tt>  <tt class="py-line">        <tt class="py-comment"># loop through all the retention times of the non-mapped features and look it up in the retentionDict corresponding</tt> </tt>
<a name="L230"></a><tt class="py-lineno">230</tt>  <tt class="py-line">        <tt class="py-comment"># that the right number of featureXML instance</tt> </tt>
<a name="L231"></a><tt class="py-lineno">231</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">retentionTime</tt> <tt class="py-keyword">in</tt> <tt class="py-name">featureXML_mapped_1</tt><tt class="py-op">:</tt> </tt>
<a name="L232"></a><tt class="py-lineno">232</tt>  <tt class="py-line">            <tt class="py-name">mappedList_1</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">retentionDict_1</tt><tt class="py-op">[</tt><tt class="py-name">retentionTime</tt><tt class="py-op">]</tt><tt class="py-op">[</tt><tt class="py-string">'intensity'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L233"></a><tt class="py-lineno">233</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">retentionTime</tt> <tt class="py-keyword">in</tt> <tt class="py-name">featureXML_mapped_2</tt><tt class="py-op">:</tt> </tt>
<a name="L234"></a><tt class="py-lineno">234</tt>  <tt class="py-line">            <tt class="py-name">mappedList_2</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">retentionDict_2</tt><tt class="py-op">[</tt><tt class="py-name">retentionTime</tt><tt class="py-op">]</tt><tt class="py-op">[</tt><tt class="py-string">'intensity'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L235"></a><tt class="py-lineno">235</tt>  <tt class="py-line">         </tt>
<a name="L236"></a><tt class="py-lineno">236</tt>  <tt class="py-line">        <tt class="py-keyword">return</tt> <tt class="py-name">mappedList_1</tt><tt class="py-op">,</tt> <tt class="py-name">mappedList_2</tt> </tt>
</div></div><a name="L237"></a><tt class="py-lineno">237</tt>  <tt class="py-line"> </tt><script type="text/javascript">
<!--
expandto(location.href);
// -->
</script>
</pre>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0.1 on Wed Apr 11 12:01:51 2012
    </td>
    <td align="right" class="footer">
      <a target="mainFrame" href="http://epydoc.sourceforge.net"
        >http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie();
  // -->
</script>
</body>
</html>
