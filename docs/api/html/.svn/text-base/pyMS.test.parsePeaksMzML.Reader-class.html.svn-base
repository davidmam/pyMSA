<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>pyMS.test.parsePeaksMzML.Reader</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">
  <!-- Home link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="pyMS-module.html">Home</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        <a href="pyMS-module.html">Package&nbsp;pyMS</a> ::
        <a href="pyMS.test-module.html">Package&nbsp;test</a> ::
        <a href="pyMS.test.parsePeaksMzML-module.html">Module&nbsp;parsePeaksMzML</a> ::
        Class&nbsp;Reader
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="pyMS.test.parsePeaksMzML.Reader-class.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<!-- ==================== CLASS DESCRIPTION ==================== -->
<h1 class="epydoc">Class Reader</h1><p class="nomargin-top"><span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader">source&nbsp;code</a></span></p>
<p>Generator object with functions to acces information from peaks.mzML 
  files easily. For a big part it could be done using pymzml, the problem 
  being that .peaks.mzML file have the following format for some of the 
  relevant values (but not for all...):</p>
<pre class="literalblock">
   &lt;cvParam cvRef=&quot;MS&quot; accession=&quot;MS:1000504&quot; name=&quot;base peak m/z&quot; value=&quot;350.98370361328125&quot; unitCvRef=&quot;MS&quot; unitAccession=&quot;MS:1000040&quot; unitName=&quot;m/z&quot;/&gt;
   &lt;cvParam cvRef=&quot;MS&quot; accession=&quot;MS:1000505&quot; name=&quot;base peak intensity&quot; value=&quot;24486.63671875&quot; unitCvRef=&quot;MS&quot; unitAccession=&quot;MS:1000131&quot; unitName=&quot;number of counts&quot;/&gt;
   &lt;cvParam cvRef=&quot;MS&quot; accession=&quot;MS:1000285&quot; name=&quot;total ion current&quot; value=&quot;130991.71875&quot;/&gt;
   &lt;cvParam cvRef=&quot;MS&quot; accession=&quot;MS:1000528&quot; name=&quot;lowest observed m/z&quot; value=&quot;335.00112820357106&quot; unitCvRef=&quot;MS&quot; unitAccession=&quot;MS:1000040&quot; unitName=&quot;m/z&quot;/&gt;
   &lt;cvParam cvRef=&quot;MS&quot; accession=&quot;MS:1000527&quot; name=&quot;highest observed m/z&quot; value=&quot;1807.2383440459291&quot; unitCvRef=&quot;MS&quot; unitAccession=&quot;MS:1000040&quot; unitName=&quot;m/z&quot;/&gt;
</pre>
  <p>instead of mzML's format of the same values:</p>
<pre class="literalblock">
   &lt;userParam name=&quot;base peak m/z&quot; type=&quot;xsd:double&quot; value=&quot;350.983703613281&quot;/&gt;
   &lt;userParam name=&quot;base peak intensity&quot; type=&quot;xsd:double&quot; value=&quot;24486.63671875&quot;/&gt;
   &lt;userParam name=&quot;total ion current&quot; type=&quot;xsd:double&quot; value=&quot;130991.71875&quot;/&gt;
   &lt;userParam name=&quot;lowest observed m/z&quot; type=&quot;xsd:double&quot; value=&quot;335.001128203571&quot;/&gt;
   &lt;userParam name=&quot;highest observed m/z&quot; type=&quot;xsd:double&quot; value=&quot;1807.23834404593&quot;/&gt;
</pre>
  <p>It would probably be easy to change this in pymzml, but for clarity I 
  want to keep this separated.</p>
  <p>Reader() applies a __getitem__ function so information can be 
  retrieved from the feature elements using the dictionary [key] 
  syntax.</p>
  <p>Print feature id and intensity example with example output:</p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span>peaksMzML = Reader(<span class="py-string">'examplePeaksfile.peaks.mzML'</span>)   <span class="py-comment"># make a Reader instance</span>
<span class="py-prompt">&gt;&gt;&gt; </span>spectra = peaksMzML.getSpectra()                    <span class="py-comment"># get all the spectra of the Reader instance</span>
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">for</span> feature <span class="py-keyword">in</span> features:                               <span class="py-comment"># loop through all the features</span>
<span class="py-more">... </span>    <span class="py-keyword">print</span> <span class="py-string">'intensity of'</span>, featureXML[<span class="py-string">'id'</span>],<span class="py-string">' = '</span>, featureXML[<span class="py-string">'intensity'</span>]    <span class="py-comment"># print the id and intensity of the feature</span>
<span class="py-output">intensity of f_13020522388175237334  =  524284</span>
<span class="py-output">intensity of f_8613715360396561740  =  111329</span>
<span class="py-output">intensity of f_43922326584371237334  =  524284</span></pre>

<!-- ==================== INSTANCE METHODS ==================== -->
<a name="section-InstanceMethods"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Instance Methods</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-InstanceMethods"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="pyMS.test.parsePeaksMzML.Reader-class.html#__init__" class="summary-sig-name">__init__</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">path</span>)</span><br />
      Initialize the Reader instance and check if the file is a valid 
      featureXML file and put it in a fileHandling.FileHandle instance.</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader.__init__">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">Element</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="pyMS.test.parsePeaksMzML.Reader-class.html#getAllElements" class="summary-sig-name">getAllElements</a>(<span class="summary-sig-arg">self</span>)</span><br />
      Iterator function that yields all the elements in the file given to 
      Reader()</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader.getAllElements">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">Element</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="pyMS.test.parsePeaksMzML.Reader-class.html#getFeatures" class="summary-sig-name">getFeatures</a>(<span class="summary-sig-arg">self</span>)</span><br />
      Iterator function that yields all the feature elements in the file 
      given to Reader()</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader.getFeatures">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">Element</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="pyMS.test.parsePeaksMzML.Reader-class.html#getNonFeatureElements" class="summary-sig-name">getNonFeatureElements</a>(<span class="summary-sig-arg">self</span>)</span><br />
      Iterator function that yields all the non-feature elements in the 
      file given to Reader()</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader.getNonFeatureElements">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">Set</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="pyMS.test.parsePeaksMzML.Reader-class.html#getKeys" class="summary-sig-name">getKeys</a>(<span class="summary-sig-arg">self</span>)</span><br />
      Return the set of keys that can be used as a key on a Reader instance</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader.getKeys">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">string</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="pyMS.test.parsePeaksMzML.Reader-class.html#getAllFeatureId" class="summary-sig-name">getAllFeatureId</a>(<span class="summary-sig-arg">self</span>)</span><br />
      Iterator function that yields all feature Ids</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader.getAllFeatureId">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="pyMS.test.parsePeaksMzML.Reader-class.html#__getitem__" class="summary-sig-name">__getitem__</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">key</span>)</span><br />
      'Magic' function to make it possible to get information from an 
      element using dictionary [key] syntax</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader.__getitem__">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
<!-- ==================== METHOD DETAILS ==================== -->
<a name="section-MethodDetails"></a>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Method Details</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-MethodDetails"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
</table>
<a name="__init__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__init__</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">path</span>)</span>
    <br /><em class="fname">(Constructor)</em>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader.__init__">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Initialize the Reader instance and check if the file is a valid 
  featureXML file and put it in a fileHandling.FileHandle instance.</p>
  <dl class="fields">
    <dt>Parameters:</dt>
    <dd><ul class="nomargin-top">
        <li><strong class="pname"><code>path</code></strong> (string) - The path of the feature XML file</li>
    </ul></dd>
  </dl>
</td></tr></table>
</div>
<a name="getAllElements"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">getAllElements</span>(<span class="sig-arg">self</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader.getAllElements">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Iterator function that yields all the elements in the file given to 
  Reader()</p>
  <dl class="fields">
    <dt>Returns: Element</dt>
        <dd>Iterator of all the elements in the file</dd>
    <dt>Raises:</dt>
    <dd><ul class="nomargin-top">
        <li><code><strong class='fraise'>RuntimeError</strong></code> - No elements in the file
        <p><b>Example</b>:</p>
        <p>Printing all elements in a file:</p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML = Reader(<span class="py-string">'exampleFeatureFile.featureXML'</span>)    <span class="py-comment"># make a read instance</span>
<span class="py-prompt">&gt;&gt;&gt; </span>allElements = featureXML.getAllElements()    <span class="py-comment"># get all elements of the reader instance, you can now iterate over allElements</span>
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">for</span> element <span class="py-keyword">in</span> allElements:
<span class="py-more">... </span>   <span class="py-keyword">print</span> element
<span class="py-output">&lt;Element 'software' at 0x166a05a0&gt;</span>
<span class="py-output">&lt;Element 'processingAction' at 0x166a0600&gt;</span>
<span class="py-output">&lt;Element 'feature' at 0x6184270&gt;</span></pre></li>
    </ul></dd>
  </dl>
</td></tr></table>
</div>
<a name="getFeatures"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">getFeatures</span>(<span class="sig-arg">self</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader.getFeatures">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Iterator function that yields all the feature elements in the file 
  given to Reader()</p>
  <dl class="fields">
    <dt>Returns: Element</dt>
        <dd>Iterator of all the elements in the file where element.tag == 
          'feature'</dd>
    <dt>Raises:</dt>
    <dd><ul class="nomargin-top">
        <li><code><strong class='fraise'>RuntimeError</strong></code> - No features in the file
        <p><b>Example</b>:</p>
        <p>Printing all the features in a file:</p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML = Reader(<span class="py-string">'exampleFeatureFile.featureXML'</span>)    <span class="py-comment"># make a reader instance</span>
<span class="py-prompt">&gt;&gt;&gt; </span>allElements = featureXML.getAllElements()    <span class="py-comment"># get all feature elements of the reader instance, you can now iterate over allElements</span>
<span class="py-prompt">&gt;&gt;&gt; </span>features = featureXML.getFeatures()
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">for</span> feature <span class="py-keyword">in</span> features:
<span class="py-more">... </span>   <span class="py-keyword">print</span> feature
<span class="py-output">&lt;Element 'feature' at 0x6184270&gt;</span>
<span class="py-output">&lt;Element 'feature' at 0x6184cc0&gt;</span>
<span class="py-output">&lt;Element 'feature' at 0x6188630&gt;</span></pre></li>
    </ul></dd>
  </dl>
</td></tr></table>
</div>
<a name="getNonFeatureElements"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">getNonFeatureElements</span>(<span class="sig-arg">self</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader.getNonFeatureElements">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Iterator function that yields all the non-feature elements in the file
  given to Reader()</p>
  <dl class="fields">
    <dt>Returns: Element</dt>
        <dd>Iterator of all the elements in the file where element.tag != 
          'feature'
          <p><b>Example</b>:</p>
          <p>Printing all the non-features in a file:</p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML = Reader(<span class="py-string">'exampleFeatureFile.featureXML'</span>)    <span class="py-comment"># make a reader instance</span>
<span class="py-prompt">&gt;&gt;&gt; </span>features = featureXML.getNonFeatureElements()                     <span class="py-comment"># get all non-features</span>
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">for</span> element <span class="py-keyword">in</span> features:
<span class="py-more">... </span>   <span class="py-keyword">print</span> element
<span class="py-output">&lt;Element 'software' at 0x166a05a0&gt;</span>
<span class="py-output">&lt;Element 'processingAction' at 0x166a0600&gt;</span></pre></dd>
  </dl>
</td></tr></table>
</div>
<a name="getKeys"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">getKeys</span>(<span class="sig-arg">self</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader.getKeys">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Return the set of keys that can be used as a key on a Reader 
  instance</p>
  <dl class="fields">
    <dt>Returns: Set</dt>
        <dd>All usable Reader instance keys
          <p><b>Example</b>:</p>
          <p>Printing the keys that can be used to get information from a 
          feature:</p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML = Reader(<span class="py-string">'exampleFeatureFile.featureXML'</span>)    <span class="py-comment"># make a reader instance</span>
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML.getKeys()
<span class="py-output">set(['convexhull', 'charge', 'content', 'intensity', 'position', 'overallquality', 'userParam', 'quality', 'id'])</span></pre></dd>
  </dl>
</td></tr></table>
</div>
<a name="getAllFeatureId"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">getAllFeatureId</span>(<span class="sig-arg">self</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader.getAllFeatureId">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Iterator function that yields all feature Ids</p>
  <dl class="fields">
    <dt>Returns: string</dt>
        <dd>Iterator of all the id's in the file</dd>
    <dt>Raises:</dt>
    <dd><ul class="nomargin-top">
        <li><code><strong class='fraise'>RuntimeError</strong></code> - No feature id's in the file
        <p><b>Example</b>:</p>
        <p>Print all the feature ids in a file:</p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML = Reader(<span class="py-string">'exampleFeatureFile.featureXML'</span>)    <span class="py-comment"># make a reader instance</span>
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">for</span> id <span class="py-keyword">in</span> featureXML.getAllFeatureId():
<span class="py-more">... </span>   <span class="py-keyword">print</span> id
<span class="py-output">f_13020522388175237334</span>
<span class="py-output">f_8613715360396561740</span>
<span class="py-output">f_43922326584371237334</span></pre></li>
    </ul></dd>
  </dl>
</td></tr></table>
</div>
<a name="__getitem__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__getitem__</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">key</span>)</span>
    <br /><em class="fname">(Indexing operator)</em>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="pyMS.test.parsePeaksMzML-pysrc.html#Reader.__getitem__">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>'Magic' function to make it possible to get information from an 
  element using dictionary [key] syntax</p>
  <dl class="fields">
    <dt>Parameters:</dt>
    <dd><ul class="nomargin-top">
        <li><strong class="pname"><code>key</code></strong> (string) - Name of the value to get information from</li>
    </ul></dd>
    <dt>Returns:</dt>
        <dd>The [key] value of the current element</dd>
    <dt>Raises:</dt>
    <dd><ul class="nomargin-top">
        <li><code><strong class='fraise'>Exception</strong></code> - The value given to __getitem__ is not a string
        <p><b>Example</b>:</p>
        <p>Print the feature id and intensity, making use of the dictionary
        [key] sytax:</p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span>featureXML = Reader(<span class="py-string">'exampleFeatureFile.featureXML'</span>)   <span class="py-comment"># make a Reader instance</span>
<span class="py-prompt">&gt;&gt;&gt; </span>features = featureXML.getFeatures()                    <span class="py-comment"># get all the features of the Reader instance</span>
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">for</span> feature <span class="py-keyword">in</span> features:                               <span class="py-comment"># loop through all the features</span>
<span class="py-more">... </span>    <span class="py-keyword">print</span> <span class="py-string">'intensity of'</span>, featureXML[<span class="py-string">'id'</span>],<span class="py-string">' = '</span>, featureXML[<span class="py-string">'intensity'</span>]    <span class="py-comment"># print the id and intensity of the feature</span>
<span class="py-output">intensity of f_13020522388175237334  =  524284</span>
<span class="py-output">intensity of f_8613715360396561740  =  111329</span>
<span class="py-output">intensity of f_43922326584371237334  =  524284</span></pre></li>
    </ul></dd>
  </dl>
</td></tr></table>
</div>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">
  <!-- Home link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="pyMS-module.html">Home</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0.1 on Wed Mar 14 15:46:22 2012
    </td>
    <td align="right" class="footer">
      <a target="mainFrame" href="http://epydoc.sourceforge.net"
        >http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie();
  // -->
</script>
</body>
</html>
