<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>example_scripts.specific_peaks_and_feature_retrieval</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        <a href="example_scripts-module.html">Package&nbsp;example_scripts</a> ::
        Module&nbsp;specific_peaks_and_feature_retrieval
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="example_scripts.specific_peaks_and_feature_retrieval-pysrc.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<h1 class="epydoc">Source Code for <a href="example_scripts.specific_peaks_and_feature_retrieval-module.html">Module example_scripts.specific_peaks_and_feature_retrieval</a></h1>
<pre class="py-src">
<a name="L1"></a><tt class="py-lineno">  1</tt>  <tt class="py-line"><tt class="py-comment"># Copyright (c) 2012 - N.P. de Klein</tt> </tt>
<a name="L2"></a><tt class="py-lineno">  2</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L3"></a><tt class="py-lineno">  3</tt>  <tt class="py-line"><tt class="py-comment">#     This file is part of Python Mass Spec Analyzer (PyMSA).</tt> </tt>
<a name="L4"></a><tt class="py-lineno">  4</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L5"></a><tt class="py-lineno">  5</tt>  <tt class="py-line"><tt class="py-comment">#     Python Mass Spec Analyzer (PyMSA) is free software: you can redistribute it and/or modify</tt> </tt>
<a name="L6"></a><tt class="py-lineno">  6</tt>  <tt class="py-line"><tt class="py-comment">#     it under the terms of the GNU General Public License as published by</tt> </tt>
<a name="L7"></a><tt class="py-lineno">  7</tt>  <tt class="py-line"><tt class="py-comment">#     the Free Software Foundation, either version 3 of the License, or</tt> </tt>
<a name="L8"></a><tt class="py-lineno">  8</tt>  <tt class="py-line"><tt class="py-comment">#     (at your option) any later version.</tt> </tt>
<a name="L9"></a><tt class="py-lineno">  9</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L10"></a><tt class="py-lineno"> 10</tt>  <tt class="py-line"><tt class="py-comment">#     Python Mass Spec Analyzer (PyMSA) is distributed in the hope that it will be useful,</tt> </tt>
<a name="L11"></a><tt class="py-lineno"> 11</tt>  <tt class="py-line"><tt class="py-comment">#     but WITHOUT ANY WARRANTY; without even the implied warranty of</tt> </tt>
<a name="L12"></a><tt class="py-lineno"> 12</tt>  <tt class="py-line"><tt class="py-comment">#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</tt> </tt>
<a name="L13"></a><tt class="py-lineno"> 13</tt>  <tt class="py-line"><tt class="py-comment">#     GNU General Public License for more details.</tt> </tt>
<a name="L14"></a><tt class="py-lineno"> 14</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L15"></a><tt class="py-lineno"> 15</tt>  <tt class="py-line"><tt class="py-comment">#     You should have received a copy of the GNU General Public License</tt> </tt>
<a name="L16"></a><tt class="py-lineno"> 16</tt>  <tt class="py-line"><tt class="py-comment">#     along with Python Mass Spec Analyzer (PyMSA).  If not, see &lt;http://www.gnu.org/licenses/&gt;.")</tt> </tt>
<a name="L17"></a><tt class="py-lineno"> 17</tt>  <tt class="py-line"> </tt>
<a name="L18"></a><tt class="py-lineno"> 18</tt>  <tt class="py-line"><tt class="py-docstring">"""</tt> </tt>
<a name="L19"></a><tt class="py-lineno"> 19</tt>  <tt class="py-line"><tt class="py-docstring">Examples how to extract peaks, features or spectra, from either .peaks.mzML, .featureXML or .mzML files, between a certain m/z or ry value and print their m/z - rt value.</tt> </tt>
<a name="L20"></a><tt class="py-lineno"> 20</tt>  <tt class="py-line"><tt class="py-docstring">"""</tt> </tt>
<a name="L21"></a><tt class="py-lineno"> 21</tt>  <tt class="py-line"><tt class="py-comment"># author: ndeklein</tt> </tt>
<a name="L22"></a><tt class="py-lineno"> 22</tt>  <tt class="py-line"><tt class="py-comment"># date:28/03/2012</tt> </tt>
<a name="L23"></a><tt class="py-lineno"> 23</tt>  <tt class="py-line"><tt class="py-comment"># summary: Example how to extract peaks between a certain m/z value and plot a chromatochram of their m/z - rt value</tt> </tt>
<a name="L24"></a><tt class="py-lineno"> 24</tt>  <tt class="py-line"> </tt>
<a name="L25"></a><tt class="py-lineno"> 25</tt>  <tt class="py-line"><tt class="py-comment"># to be able to import pyMSA and without making a package (because info changes everytime during development, don't want to make a new</tt> </tt>
<a name="L26"></a><tt class="py-lineno"> 26</tt>  <tt class="py-line"><tt class="py-comment"># package everytime) </tt> </tt>
<a name="L27"></a><tt class="py-lineno"> 27</tt>  <tt class="py-line"> </tt>
<a name="L28"></a><tt class="py-lineno"> 28</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">sys</tt> </tt>
<a name="L29"></a><tt class="py-lineno"> 29</tt>  <tt class="py-line"> </tt>
<a name="L30"></a><tt class="py-lineno"> 30</tt>  <tt class="py-line"><tt class="py-comment"># for me, PyMSA_dev is not in my default python path</tt> </tt>
<a name="L31"></a><tt class="py-lineno"> 31</tt>  <tt class="py-line"><tt class="py-keyword">try</tt><tt class="py-op">:</tt> </tt>
<a name="L32"></a><tt class="py-lineno"> 32</tt>  <tt class="py-line">    <tt class="py-name">sys</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-string">'/homes/ndeklein/workspace/MS/Trunk/PyMSA_dev'</tt><tt class="py-op">)</tt> </tt>
<a name="L33"></a><tt class="py-lineno"> 33</tt>  <tt class="py-line"><tt class="py-keyword">except</tt><tt class="py-op">:</tt> </tt>
<a name="L34"></a><tt class="py-lineno"> 34</tt>  <tt class="py-line">    <tt class="py-keyword">pass</tt> </tt>
<a name="L35"></a><tt class="py-lineno"> 35</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-0" class="py-name" targets="Package pyMSA=pyMSA-module.html"><a title="pyMSA" class="py-name" href="#" onclick="return doclink('link-0', 'pyMSA', 'link-0');">pyMSA</a></tt> <tt class="py-keyword">import</tt> <tt id="link-1" class="py-name" targets="Module pyMSA.parsePeaksMzML=pyMSA.parsePeaksMzML-module.html"><a title="pyMSA.parsePeaksMzML" class="py-name" href="#" onclick="return doclink('link-1', 'parsePeaksMzML', 'link-1');">parsePeaksMzML</a></tt> </tt>
<a name="L36"></a><tt class="py-lineno"> 36</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-2" class="py-name"><a title="pyMSA" class="py-name" href="#" onclick="return doclink('link-2', 'pyMSA', 'link-0');">pyMSA</a></tt> <tt class="py-keyword">import</tt> <tt id="link-3" class="py-name" targets="Module pyMSA.getWindow=pyMSA.getWindow-module.html"><a title="pyMSA.getWindow" class="py-name" href="#" onclick="return doclink('link-3', 'getWindow', 'link-3');">getWindow</a></tt> </tt>
<a name="L37"></a><tt class="py-lineno"> 37</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-4" class="py-name"><a title="pyMSA" class="py-name" href="#" onclick="return doclink('link-4', 'pyMSA', 'link-0');">pyMSA</a></tt> <tt class="py-keyword">import</tt> <tt id="link-5" class="py-name" targets="Module pyMSA.parseFeatureXML=pyMSA.parseFeatureXML-module.html"><a title="pyMSA.parseFeatureXML" class="py-name" href="#" onclick="return doclink('link-5', 'parseFeatureXML', 'link-5');">parseFeatureXML</a></tt> </tt>
<a name="L38"></a><tt class="py-lineno"> 38</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">rpy2</tt><tt class="py-op">.</tt><tt class="py-name">robjects</tt> <tt class="py-keyword">as</tt> <tt class="py-name">R</tt> </tt>
<a name="L39"></a><tt class="py-lineno"> 39</tt>  <tt class="py-line"> </tt>
<a name="peaksRetrieval"></a><div id="peaksRetrieval-def"><a name="L40"></a><tt class="py-lineno"> 40</tt> <a class="py-toggle" href="#" id="peaksRetrieval-toggle" onclick="return toggle('peaksRetrieval');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="example_scripts.specific_peaks_and_feature_retrieval-module.html#peaksRetrieval">peaksRetrieval</a><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="peaksRetrieval-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="peaksRetrieval-expanded"><a name="L41"></a><tt class="py-lineno"> 41</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L42"></a><tt class="py-lineno"> 42</tt>  <tt class="py-line"><tt class="py-docstring">    Example of how to retrieve the m/z and retention time of peaks in a window of m/z or retention time.</tt> </tt>
<a name="L43"></a><tt class="py-lineno"> 43</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L44"></a><tt class="py-lineno"> 44</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L45"></a><tt class="py-lineno"> 45</tt>  <tt class="py-line"><tt class="py-docstring">    This example script uses the following classes and functions:</tt> </tt>
<a name="L46"></a><tt class="py-lineno"> 46</tt>  <tt class="py-line"><tt class="py-docstring">      - L{parsePeaksMzML.Reader}</tt> </tt>
<a name="L47"></a><tt class="py-lineno"> 47</tt>  <tt class="py-line"><tt class="py-docstring">      - L{getWindow.PeakLocation}</tt> </tt>
<a name="L48"></a><tt class="py-lineno"> 48</tt>  <tt class="py-line"><tt class="py-docstring">      - L{getWindow.PeakLocation.getPeaks_mzWindow}</tt> </tt>
<a name="L49"></a><tt class="py-lineno"> 49</tt>  <tt class="py-line"><tt class="py-docstring">      - L{getWindow.PeakLocation.getPeaks_rtWindow}</tt> </tt>
<a name="L50"></a><tt class="py-lineno"> 50</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L51"></a><tt class="py-lineno"> 51</tt>  <tt class="py-line"><tt class="py-docstring">     </tt> </tt>
<a name="L52"></a><tt class="py-lineno"> 52</tt>  <tt class="py-line"><tt class="py-docstring">    Printing the m/z and retention time of all the peaks with an m/z between 300 and 500</tt> </tt>
<a name="L53"></a><tt class="py-lineno"> 53</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L54"></a><tt class="py-lineno"> 54</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import parsePeaksMzML</tt> </tt>
<a name="L55"></a><tt class="py-lineno"> 55</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import getWindow</tt> </tt>
<a name="L56"></a><tt class="py-lineno"> 56</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; peaks = parsePeaksMzML.Reader('example_peak_file.peaks.mzML')                                # read in the peaks file and make an instance of parsePeaksMzML.Reader class</tt> </tt>
<a name="L57"></a><tt class="py-lineno"> 57</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; peakLocation = getWindow.PeakLocation(peaks)                                                 # get a getWindow.PeakLocation instance with the parsePeaksMzML.Reader instance as input</tt> </tt>
<a name="L58"></a><tt class="py-lineno"> 58</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; for peak in peakLocation.getPeaks_mzWindow(300,500):                                         # loop through all he peaks that have an m/z between 300 and 500</tt> </tt>
<a name="L59"></a><tt class="py-lineno"> 59</tt>  <tt class="py-line"><tt class="py-docstring">    ...    print 'mz: %s, rt: %f' % (peaks['base peak m/z'], float(peaks['scan start time'])*60)     # print the m/z and rt information from each peak                            </tt> </tt>
<a name="L60"></a><tt class="py-lineno"> 60</tt>  <tt class="py-line"><tt class="py-docstring">    mz: 350.983703613281, rt: 12.288000</tt> </tt>
<a name="L61"></a><tt class="py-lineno"> 61</tt>  <tt class="py-line"><tt class="py-docstring">    mz: 348.990600585938, rt: 50.532000</tt> </tt>
<a name="L62"></a><tt class="py-lineno"> 62</tt>  <tt class="py-line"><tt class="py-docstring">    mz: 412.955871582031, rt: 573.270000</tt> </tt>
<a name="L63"></a><tt class="py-lineno"> 63</tt>  <tt class="py-line"><tt class="py-docstring">    mz: 348.990142822266, rt: 588.264000</tt> </tt>
<a name="L64"></a><tt class="py-lineno"> 64</tt>  <tt class="py-line"><tt class="py-docstring">    mz: 412.629333496094, rt: 2981.304000</tt> </tt>
<a name="L65"></a><tt class="py-lineno"> 65</tt>  <tt class="py-line"><tt class="py-docstring">    mz: 348.990112304688, rt: 2996.268000</tt> </tt>
<a name="L66"></a><tt class="py-lineno"> 66</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L67"></a><tt class="py-lineno"> 67</tt>  <tt class="py-line"><tt class="py-docstring">    Printing the m/z and retention time of all the peaks with an rt between 0 and 60</tt> </tt>
<a name="L68"></a><tt class="py-lineno"> 68</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import parsePeaksMzML</tt> </tt>
<a name="L69"></a><tt class="py-lineno"> 69</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import getWindow</tt> </tt>
<a name="L70"></a><tt class="py-lineno"> 70</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; peaks = parsePeaksMzML.Reader('example_peak_file.peaks.mzML')                                # read in the peaks file and make an instance of parsePeaksMzML.Reader class</tt> </tt>
<a name="L71"></a><tt class="py-lineno"> 71</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; for peak in peakLocation.getPeaks_rtWindow(0,60):                                            # get a getWindow.PeakLocation instance with the parsePeaksMzML.Reader instance as input</tt> </tt>
<a name="L72"></a><tt class="py-lineno"> 72</tt>  <tt class="py-line"><tt class="py-docstring">    ...    print peaks['base peak m/z']                                                              # loop through all he peaks that have an rt between 0 and 60</tt> </tt>
<a name="L73"></a><tt class="py-lineno"> 73</tt>  <tt class="py-line"><tt class="py-docstring">    ...    print 'mz: %s, rt: %f' % (peaks['base peak m/z'], float(peaks['scan start time'])*60)     # print the m/z and rt infomration from each peak</tt> </tt>
<a name="L74"></a><tt class="py-lineno"> 74</tt>  <tt class="py-line"><tt class="py-docstring">    mz: 350.983703613281, rt: 12.288000</tt> </tt>
<a name="L75"></a><tt class="py-lineno"> 75</tt>  <tt class="py-line"><tt class="py-docstring">    mz: 348.990600585938, rt: 50.532000</tt> </tt>
<a name="L76"></a><tt class="py-lineno"> 76</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L77"></a><tt class="py-lineno"> 77</tt>  <tt class="py-line">    <tt class="py-comment"># read in the peaks file and make an instance of parsePeaksMzML.Reader class</tt> </tt>
<a name="L78"></a><tt class="py-lineno"> 78</tt>  <tt class="py-line">    <tt class="py-name">peaks</tt> <tt class="py-op">=</tt> <tt id="link-6" class="py-name"><a title="pyMSA.parsePeaksMzML" class="py-name" href="#" onclick="return doclink('link-6', 'parsePeaksMzML', 'link-1');">parsePeaksMzML</a></tt><tt class="py-op">.</tt><tt id="link-7" class="py-name" targets="Class pyMSA.parseFeatureXML.Reader=pyMSA.parseFeatureXML.Reader-class.html,Class pyMSA.parseMascot.Reader=pyMSA.parseMascot.Reader-class.html,Class pyMSA.parsePeaksMzML.Reader=pyMSA.parsePeaksMzML.Reader-class.html"><a title="pyMSA.parseFeatureXML.Reader
pyMSA.parseMascot.Reader
pyMSA.parsePeaksMzML.Reader" class="py-name" href="#" onclick="return doclink('link-7', 'Reader', 'link-7');">Reader</a></tt><tt class="py-op">(</tt><tt class="py-string">'example_files/input/peaks_example.peaks.mzML'</tt><tt class="py-op">)</tt> </tt>
<a name="L79"></a><tt class="py-lineno"> 79</tt>  <tt class="py-line">    <tt class="py-comment"># get a getWindow.PeakLocation instance with the parsePeaksMzML.Reader instance as input</tt> </tt>
<a name="L80"></a><tt class="py-lineno"> 80</tt>  <tt class="py-line">    <tt class="py-name">peakLocation</tt> <tt class="py-op">=</tt> <tt id="link-8" class="py-name"><a title="pyMSA.getWindow" class="py-name" href="#" onclick="return doclink('link-8', 'getWindow', 'link-3');">getWindow</a></tt><tt class="py-op">.</tt><tt id="link-9" class="py-name" targets="Class pyMSA.getWindow.PeakLocation=pyMSA.getWindow.PeakLocation-class.html"><a title="pyMSA.getWindow.PeakLocation" class="py-name" href="#" onclick="return doclink('link-9', 'PeakLocation', 'link-9');">PeakLocation</a></tt><tt class="py-op">(</tt><tt class="py-name">peaks</tt><tt class="py-op">)</tt> </tt>
<a name="L81"></a><tt class="py-lineno"> 81</tt>  <tt class="py-line">    <tt class="py-comment"># loop through all the peaks that have an m/z between 300 and 500.</tt> </tt>
<a name="L82"></a><tt class="py-lineno"> 82</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">peak</tt> <tt class="py-keyword">in</tt> <tt class="py-name">peakLocation</tt><tt class="py-op">.</tt><tt id="link-10" class="py-name" targets="Method pyMSA.getWindow.PeakLocation.getPeaks_mzWindow()=pyMSA.getWindow.PeakLocation-class.html#getPeaks_mzWindow"><a title="pyMSA.getWindow.PeakLocation.getPeaks_mzWindow" class="py-name" href="#" onclick="return doclink('link-10', 'getPeaks_mzWindow', 'link-10');">getPeaks_mzWindow</a></tt><tt class="py-op">(</tt><tt class="py-number">300</tt><tt class="py-op">,</tt><tt class="py-number">500</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L83"></a><tt class="py-lineno"> 83</tt>  <tt class="py-line">        <tt class="py-comment"># print out mz and retention time of each peak. Results form peaks are all strings, that's why peaks['base peak m/z'] is printed using %s</tt> </tt>
<a name="L84"></a><tt class="py-lineno"> 84</tt>  <tt class="py-line">        <tt class="py-keyword">print</tt> <tt class="py-string">'mz: %s, rt: %f'</tt> <tt class="py-op">%</tt> <tt class="py-op">(</tt><tt class="py-name">peaks</tt><tt class="py-op">[</tt><tt class="py-string">'base peak m/z'</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-name">float</tt><tt class="py-op">(</tt><tt class="py-name">peaks</tt><tt class="py-op">[</tt><tt class="py-string">'scan start time'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">*</tt><tt class="py-number">60</tt><tt class="py-op">)</tt> </tt>
<a name="L85"></a><tt class="py-lineno"> 85</tt>  <tt class="py-line">     </tt>
<a name="L86"></a><tt class="py-lineno"> 86</tt>  <tt class="py-line">    <tt class="py-comment"># loop through all the peaks that have a retention time between 0 and 60 (THIS IS IN MINUTES)</tt> </tt>
<a name="L87"></a><tt class="py-lineno"> 87</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">peak</tt> <tt class="py-keyword">in</tt> <tt class="py-name">peakLocation</tt><tt class="py-op">.</tt><tt id="link-11" class="py-name" targets="Method pyMSA.getWindow.PeakLocation.getPeaks_rtWindow()=pyMSA.getWindow.PeakLocation-class.html#getPeaks_rtWindow"><a title="pyMSA.getWindow.PeakLocation.getPeaks_rtWindow" class="py-name" href="#" onclick="return doclink('link-11', 'getPeaks_rtWindow', 'link-11');">getPeaks_rtWindow</a></tt><tt class="py-op">(</tt><tt class="py-number">0</tt><tt class="py-op">,</tt><tt class="py-number">60</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L88"></a><tt class="py-lineno"> 88</tt>  <tt class="py-line">        <tt class="py-comment"># print out mz and retention time of each peak. Results form peaks are all strings, that's why peaks['base peak m/z'] is printed using %s</tt> </tt>
<a name="L89"></a><tt class="py-lineno"> 89</tt>  <tt class="py-line">        <tt class="py-keyword">print</tt> <tt class="py-string">'mz: %s, rt: %f'</tt> <tt class="py-op">%</tt> <tt class="py-op">(</tt><tt class="py-name">peaks</tt><tt class="py-op">[</tt><tt class="py-string">'base peak m/z'</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-name">float</tt><tt class="py-op">(</tt><tt class="py-name">peaks</tt><tt class="py-op">[</tt><tt class="py-string">'scan start time'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">*</tt><tt class="py-number">60</tt><tt class="py-op">)</tt> </tt>
</div><a name="L90"></a><tt class="py-lineno"> 90</tt>  <tt class="py-line"> </tt>
<a name="L91"></a><tt class="py-lineno"> 91</tt>  <tt class="py-line"> </tt>
<a name="L92"></a><tt class="py-lineno"> 92</tt>  <tt class="py-line"> </tt>
<a name="featureRetrieval"></a><div id="featureRetrieval-def"><a name="L93"></a><tt class="py-lineno"> 93</tt> <a class="py-toggle" href="#" id="featureRetrieval-toggle" onclick="return toggle('featureRetrieval');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="example_scripts.specific_peaks_and_feature_retrieval-module.html#featureRetrieval">featureRetrieval</a><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="featureRetrieval-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="featureRetrieval-expanded"><a name="L94"></a><tt class="py-lineno"> 94</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L95"></a><tt class="py-lineno"> 95</tt>  <tt class="py-line"><tt class="py-docstring">    Example of how to retrieve the m/z and retention time of features in a window of m/z or retention time.</tt> </tt>
<a name="L96"></a><tt class="py-lineno"> 96</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L97"></a><tt class="py-lineno"> 97</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L98"></a><tt class="py-lineno"> 98</tt>  <tt class="py-line"><tt class="py-docstring">    This example script uses the following classes and functions:</tt> </tt>
<a name="L99"></a><tt class="py-lineno"> 99</tt>  <tt class="py-line"><tt class="py-docstring">      - L{parseFeatureXML.Reader}</tt> </tt>
<a name="L100"></a><tt class="py-lineno">100</tt>  <tt class="py-line"><tt class="py-docstring">      - L{getWindow.FeatureLocation}</tt> </tt>
<a name="L101"></a><tt class="py-lineno">101</tt>  <tt class="py-line"><tt class="py-docstring">      - L{getWindow.FeatureLocation.getFeatures_mzWindow}</tt> </tt>
<a name="L102"></a><tt class="py-lineno">102</tt>  <tt class="py-line"><tt class="py-docstring">      - L{getWindow.FeatureLocation.getFeatures_rtWindow}</tt> </tt>
<a name="L103"></a><tt class="py-lineno">103</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L104"></a><tt class="py-lineno">104</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L105"></a><tt class="py-lineno">105</tt>  <tt class="py-line"><tt class="py-docstring">    Printing the m/z and retention time of all the peaks with an m/z between 300 and 500</tt> </tt>
<a name="L106"></a><tt class="py-lineno">106</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L107"></a><tt class="py-lineno">107</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import parseFeatureXML</tt> </tt>
<a name="L108"></a><tt class="py-lineno">108</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import getWindow</tt> </tt>
<a name="L109"></a><tt class="py-lineno">109</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; features = parseFeatureXML.Reader('example_featureXML_file.featureXML')                          # read in the peaks file and make an instance of parseFeatureXML.Reader class</tt> </tt>
<a name="L110"></a><tt class="py-lineno">110</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; featureLocation = getWindow.FeatureLocation(features)                                            # get a getWindow.FeatureLocation instance with the parseFeatureXML.Reader instance as input</tt> </tt>
<a name="L111"></a><tt class="py-lineno">111</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; for feature in featureLocation.getFeatures_mzWindow(300,500):                                    # loop through all he features that have an m/z between 300 and 500</tt> </tt>
<a name="L112"></a><tt class="py-lineno">112</tt>  <tt class="py-line"><tt class="py-docstring">    ...    print 'mz: %s, rt: %f' % (features['base peak m/z'], float(features['scan start time'])*60)   # print the m/z and rt information from each feature                            </tt> </tt>
<a name="L113"></a><tt class="py-lineno">113</tt>  <tt class="py-line"><tt class="py-docstring">    mz: 336.251104825, rt: 5109.29224</tt> </tt>
<a name="L114"></a><tt class="py-lineno">114</tt>  <tt class="py-line"><tt class="py-docstring">    mz: 428.197275997, rt: 4009.58726</tt> </tt>
<a name="L115"></a><tt class="py-lineno">115</tt>  <tt class="py-line"><tt class="py-docstring">    mz: 337.251104825, rt: 5107.29224</tt> </tt>
<a name="L116"></a><tt class="py-lineno">116</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L117"></a><tt class="py-lineno">117</tt>  <tt class="py-line"><tt class="py-docstring">    Printing the m/z and retention time of all the peaks with an rt between 0 and 60</tt> </tt>
<a name="L118"></a><tt class="py-lineno">118</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import parseFeatureXML</tt> </tt>
<a name="L119"></a><tt class="py-lineno">119</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import getWindow</tt> </tt>
<a name="L120"></a><tt class="py-lineno">120</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; features = parseFeatureXML.Reader('example_featureXML_file.featureXML')                          # read in the peaks file and make an instance of parseFeatureXML.Reader class</tt> </tt>
<a name="L121"></a><tt class="py-lineno">121</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; featureLocation = getWindow.FeatureLocation(features)                                            # get a getWindow.FeatureLocation instance with the parseFeatureXML.Reader instance as input</tt> </tt>
<a name="L122"></a><tt class="py-lineno">122</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; for feature in featureLocation.getFeatures_rtWindow(0,60):                                       # loop through all he features that have an rt between 0 and 360 (this in in seconds, unlike the peaks which is in minutes. Need to be changed)</tt> </tt>
<a name="L123"></a><tt class="py-lineno">123</tt>  <tt class="py-line"><tt class="py-docstring">    ...    print 'mz: %s, rt: %f' % (features['base peak m/z'], float(features['scan start time'])*60)   # print the m/z and rt information from each feature                            </tt> </tt>
<a name="L124"></a><tt class="py-lineno">124</tt>  <tt class="py-line"><tt class="py-docstring">    mz: 428.197275997, rt: 4009.58726</tt> </tt>
<a name="L125"></a><tt class="py-lineno">125</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L126"></a><tt class="py-lineno">126</tt>  <tt class="py-line">     </tt>
<a name="L127"></a><tt class="py-lineno">127</tt>  <tt class="py-line">    <tt class="py-comment"># read in the peaks file and make an instance of parseFeatureXML.Reader class</tt> </tt>
<a name="L128"></a><tt class="py-lineno">128</tt>  <tt class="py-line">    <tt class="py-name">features</tt> <tt class="py-op">=</tt> <tt id="link-12" class="py-name"><a title="pyMSA.parseFeatureXML" class="py-name" href="#" onclick="return doclink('link-12', 'parseFeatureXML', 'link-5');">parseFeatureXML</a></tt><tt class="py-op">.</tt><tt id="link-13" class="py-name"><a title="pyMSA.parseFeatureXML.Reader
pyMSA.parseMascot.Reader
pyMSA.parsePeaksMzML.Reader" class="py-name" href="#" onclick="return doclink('link-13', 'Reader', 'link-7');">Reader</a></tt><tt class="py-op">(</tt><tt class="py-string">'example_files/input/featureXML_example.featureXML'</tt><tt class="py-op">)</tt>      </tt>
<a name="L129"></a><tt class="py-lineno">129</tt>  <tt class="py-line">    <tt class="py-comment"># get a getWindow.FeatureLocation instance with the parseFeatureXML.Reader instance as input                </tt> </tt>
<a name="L130"></a><tt class="py-lineno">130</tt>  <tt class="py-line">    <tt class="py-name">featureLocation</tt> <tt class="py-op">=</tt> <tt id="link-14" class="py-name"><a title="pyMSA.getWindow" class="py-name" href="#" onclick="return doclink('link-14', 'getWindow', 'link-3');">getWindow</a></tt><tt class="py-op">.</tt><tt id="link-15" class="py-name" targets="Class pyMSA.getWindow.FeatureLocation=pyMSA.getWindow.FeatureLocation-class.html"><a title="pyMSA.getWindow.FeatureLocation" class="py-name" href="#" onclick="return doclink('link-15', 'FeatureLocation', 'link-15');">FeatureLocation</a></tt><tt class="py-op">(</tt><tt class="py-name">features</tt><tt class="py-op">)</tt>        </tt>
<a name="L131"></a><tt class="py-lineno">131</tt>  <tt class="py-line">    <tt class="py-comment"># loop through all he features that have an m/z between 300 and 500                                        </tt> </tt>
<a name="L132"></a><tt class="py-lineno">132</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">feature</tt> <tt class="py-keyword">in</tt> <tt class="py-name">featureLocation</tt><tt class="py-op">.</tt><tt id="link-16" class="py-name" targets="Method pyMSA.getWindow.FeatureLocation.getFeatures_mzWindow()=pyMSA.getWindow.FeatureLocation-class.html#getFeatures_mzWindow"><a title="pyMSA.getWindow.FeatureLocation.getFeatures_mzWindow" class="py-name" href="#" onclick="return doclink('link-16', 'getFeatures_mzWindow', 'link-16');">getFeatures_mzWindow</a></tt><tt class="py-op">(</tt><tt class="py-number">300</tt><tt class="py-op">,</tt><tt class="py-number">500</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L133"></a><tt class="py-lineno">133</tt>  <tt class="py-line">        <tt class="py-comment"># print out mz and retention time of each feature</tt> </tt>
<a name="L134"></a><tt class="py-lineno">134</tt>  <tt class="py-line">        <tt class="py-keyword">print</tt> <tt class="py-string">'mz: %s, rt: %s'</tt> <tt class="py-op">%</tt> <tt class="py-op">(</tt><tt class="py-name">features</tt><tt class="py-op">[</tt><tt class="py-string">'mz'</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-name">features</tt><tt class="py-op">[</tt><tt class="py-string">'retention time'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt>     </tt>
<a name="L135"></a><tt class="py-lineno">135</tt>  <tt class="py-line"> </tt>
<a name="L136"></a><tt class="py-lineno">136</tt>  <tt class="py-line">    <tt class="py-comment"># loop through all the peaks that have a retention time between 4000 and 5000 (THIS IS IN MINUTES [YES THIS HAS TO BE CHANGED &lt;YES I BANGED MY HEAD ON THE TABLE BECAUSE OF THIS&gt;])</tt> </tt>
<a name="L137"></a><tt class="py-lineno">137</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">feature</tt> <tt class="py-keyword">in</tt> <tt class="py-name">featureLocation</tt><tt class="py-op">.</tt><tt id="link-17" class="py-name" targets="Method pyMSA.getWindow.FeatureLocation.getFeatures_rtWindow()=pyMSA.getWindow.FeatureLocation-class.html#getFeatures_rtWindow"><a title="pyMSA.getWindow.FeatureLocation.getFeatures_rtWindow" class="py-name" href="#" onclick="return doclink('link-17', 'getFeatures_rtWindow', 'link-17');">getFeatures_rtWindow</a></tt><tt class="py-op">(</tt><tt class="py-number">4000</tt><tt class="py-op">,</tt><tt class="py-number">5000</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L138"></a><tt class="py-lineno">138</tt>  <tt class="py-line">        <tt class="py-comment"># print out mz and retention time of each feature                                    </tt> </tt>
<a name="L139"></a><tt class="py-lineno">139</tt>  <tt class="py-line">        <tt class="py-keyword">print</tt> <tt class="py-string">'mz: %s, rt: %s'</tt> <tt class="py-op">%</tt> <tt class="py-op">(</tt><tt class="py-name">features</tt><tt class="py-op">[</tt><tt class="py-string">'mz'</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-name">features</tt><tt class="py-op">[</tt><tt class="py-string">'retention time'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt>   </tt>
</div><a name="L140"></a><tt class="py-lineno">140</tt>  <tt class="py-line"> </tt>
<a name="L141"></a><tt class="py-lineno">141</tt>  <tt class="py-line"><tt class="py-keyword">if</tt> <tt class="py-name">__name__</tt> <tt class="py-op">==</tt> <tt class="py-string">'__main__'</tt><tt class="py-op">:</tt> </tt>
<a name="L142"></a><tt class="py-lineno">142</tt>  <tt class="py-line">    <tt class="py-comment">#peaksRetrieval()</tt> </tt>
<a name="L143"></a><tt class="py-lineno">143</tt>  <tt class="py-line">    <tt id="link-18" class="py-name" targets="Function example_scripts.specific_peaks_and_feature_retrieval.featureRetrieval()=example_scripts.specific_peaks_and_feature_retrieval-module.html#featureRetrieval"><a title="example_scripts.specific_peaks_and_feature_retrieval.featureRetrieval" class="py-name" href="#" onclick="return doclink('link-18', 'featureRetrieval', 'link-18');">featureRetrieval</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L144"></a><tt class="py-lineno">144</tt>  <tt class="py-line"> </tt><script type="text/javascript">
<!--
expandto(location.href);
// -->
</script>
</pre>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0.1 on Wed Jun 20 18:35:06 2012
    </td>
    <td align="right" class="footer">
      <a target="mainFrame" href="http://epydoc.sourceforge.net"
        >http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie();
  // -->
</script>
</body>
</html>
