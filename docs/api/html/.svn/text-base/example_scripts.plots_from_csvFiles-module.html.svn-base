<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>example_scripts.plots_from_csvFiles</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        <a href="example_scripts-module.html">Package&nbsp;example_scripts</a> ::
        Module&nbsp;plots_from_csvFiles
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="example_scripts.plots_from_csvFiles-module.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<!-- ==================== MODULE DESCRIPTION ==================== -->
<h1 class="epydoc">Module plots_from_csvFiles</h1><p class="nomargin-top"><span class="codelink"><a href="example_scripts.plots_from_csvFiles-pysrc.html">source&nbsp;code</a></span></p>
<p>Examples of how to make different kinds of plots from csv data 
  files</p>

<!-- ==================== FUNCTIONS ==================== -->
<a name="section-Functions"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Functions</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-Functions"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="example_scripts.plots_from_csvFiles-module.html#feature_per_intensity_histogram" class="summary-sig-name">feature_per_intensity_histogram</a>()</span><br />
      Example of how to make a histogram of the features per intensity.</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="example_scripts.plots_from_csvFiles-pysrc.html#feature_per_intensity_histogram">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="example_scripts.plots_from_csvFiles-module.html#msms_per_intensity_histogram" class="summary-sig-name">msms_per_intensity_histogram</a>()</span><br />
      Example of how to make a histogram of the MS/MS per intensity.</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="example_scripts.plots_from_csvFiles-pysrc.html#msms_per_intensity_histogram">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="example_scripts.plots_from_csvFiles-module.html#msms_and_spectrum_per_ioncurrent_histogram" class="summary-sig-name">msms_and_spectrum_per_ioncurrent_histogram</a>()</span><br />
      Example of how to make a histogram of the ion current per ms level (1
      and 2).</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="example_scripts.plots_from_csvFiles-pysrc.html#msms_and_spectrum_per_ioncurrent_histogram">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="example_scripts.plots_from_csvFiles-module.html#feature_and_MSMS_per_intensity_histogram" class="summary-sig-name">feature_and_MSMS_per_intensity_histogram</a>()</span><br />
      Example of how to make an overlapping histogram of the features and 
      MS/MS precursors per intensity.</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="example_scripts.plots_from_csvFiles-pysrc.html#feature_and_MSMS_per_intensity_histogram">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="example_scripts.plots_from_csvFiles-module.html#msms_per_feature_barplot" class="summary-sig-name">msms_per_feature_barplot</a>()</span><br />
      Example of how to make a barplot of the MS/MS per feature.</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="example_scripts.plots_from_csvFiles-pysrc.html#msms_per_feature_barplot">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="example_scripts.plots_from_csvFiles-module.html#msms_per_feature_per_intensity_boxplot" class="summary-sig-name">msms_per_feature_per_intensity_boxplot</a>()</span><br />
      Example of how to make a boxplot of the # of MS/MS per feature per 
      intensity.</td>
          <td align="right" valign="top">
            <span class="codelink"><a href="example_scripts.plots_from_csvFiles-pysrc.html#msms_per_feature_per_intensity_boxplot">source&nbsp;code</a></span>
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
<!-- ==================== VARIABLES ==================== -->
<a name="section-Variables"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Variables</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-Variables"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a name="__package__"></a><span class="summary-name">__package__</span> = <code title="'example_scripts'"><code class="variable-quote">'</code><code class="variable-string">example_scripts</code><code class="variable-quote">'</code></code>
    </td>
  </tr>
</table>
<!-- ==================== FUNCTION DETAILS ==================== -->
<a name="section-FunctionDetails"></a>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Function Details</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-FunctionDetails"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
</table>
<a name="feature_per_intensity_histogram"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">feature_per_intensity_histogram</span>()</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="example_scripts.plots_from_csvFiles-pysrc.html#feature_per_intensity_histogram">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Example of how to make a histogram of the features per intensity.</p>
  <p>Takes a csv file which contains information on all the features. The 
  important information are the intensities. Because every row is one 
  feature, to get the features per intensity it is possible to count the 
  occurence of each intensity. It makes a vector out of all the intensities
  per feature in example_files/input/feature.csv. It retrieves vectors of 
  information about the feature, so with little tweaking this method can be
  used any time that you can make a vector out of your data. For better 
  viewing the data is logged with base 10.</p>
  <p>This example script uses the following functions:</p>
  <ul>
    <li>
      <a href="pyMSA.rFunctions-module.html#readCsvFile" 
      class="link">rFunctions.readCsvFile</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#getRowsWithUniqColumn" 
      class="link">rFunctions.getRowsWithUniqColumn</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#index" 
      class="link">rFunctions.index</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#takeLog" 
      class="link">rFunctions.takeLog</a>
    </li>
    <li>
      <a href="pyMSA.rPlotGenerics.Plots-class.html#histogram" 
      class="link">rPlots.Plots.histogram</a>
    </li>
  </ul>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rFunctions
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rPlots
<span class="py-prompt">&gt;&gt;&gt; </span>featDataframe = rFunctions.readCsvFile(<span class="py-string">'example_files/input/feature.csv'</span>)                                                    <span class="py-comment"># Read a csv file into a rpy2 dataframe with featurs and intensities</span>
<span class="py-prompt">&gt;&gt;&gt; </span>featDataframeUniq = rFunctions.getRowsWithUniqColumn(featDataframe, <span class="py-string">'id'</span>)                                                    <span class="py-comment"># Remove the rows with redundant id's from featDataframe</span>
<span class="py-prompt">&gt;&gt;&gt; </span>featIntensityVector = featDataframe[rFunctions.index(featDataframeUniq, <span class="py-string">'intensity'</span>)]                                        <span class="py-comment"># Retrieve a vector of intensities from the unique features</span>
<span class="py-prompt">&gt;&gt;&gt; </span>featLogIntensityVector = rFunctions.takeLog(featIntensityVector,10)                                                          <span class="py-comment"># Take the logarithm of all the values in the vector with base 10</span>
<span class="py-prompt">&gt;&gt;&gt; </span>rplots = rPlots.Plots()                                                                                                      <span class="py-comment"># Instantiate rPlots.Plots()</span>
<span class="py-prompt">&gt;&gt;&gt; </span>plots.histogram(<span class="py-string">'example_files/output/feature_per_intensity_histogram.png'</span>, featLogIntensityVector, width=400, height=400,   <span class="py-comment"># draw a plot with 1 histogram</span>
<span class="py-output">                                    title='#features per intensity',  ylab = '# of features', xlab = 'intensity')</span></pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="msms_per_intensity_histogram"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">msms_per_intensity_histogram</span>()</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="example_scripts.plots_from_csvFiles-pysrc.html#msms_per_intensity_histogram">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Example of how to make a histogram of the MS/MS per intensity.</p>
  <p>Takes a csv file of spectra with a column 'ms level' and a column with
  the base peak intensity. It makes a vector out of all the intensities per
  spectrum in example_files/input/mzml.csv. It retrieves vectors of 
  information about the intensities, so with little tweaking this method 
  can be used any time that you can make a vector out of your data.</p>
  <p>This example script uses the following functions:</p>
  <ul>
    <li>
      <a href="pyMSA.rFunctions-module.html#readCsvFile" 
      class="link">rFunctions.readCsvFile</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#index" 
      class="link">rFunctions.index</a>
    </li>
    <li>
      <a href="pyMSA.rPlotGenerics.Plots-class.html#barplot" 
      class="link">rPlots.Plots.barplot</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#takeLog" 
      class="link">rFunctions.takeLog</a>
    </li>
  </ul>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rFunctions
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rPlots
<span class="py-prompt">&gt;&gt;&gt; </span>mzmlDataframe = rFunctions.readCsvFile(<span class="py-string">'example_files/input/mzML.csv'</span>)                                                       <span class="py-comment"># Read a csv file into a rpy2 dataframe with precursors and intensities</span>
<span class="py-prompt">&gt;&gt;&gt; </span>precursorDataframe = mzmlDataframe.rx(mzmlDataframe[rFunctions.index(mzmlDataframe, <span class="py-string">'ms.level'</span>)].ro &gt;= 2, True)              <span class="py-comment"># Retrieve a subset dataframe of mzmlDataframe where values in column 'ms level' &gt;= 2</span>
<span class="py-prompt">&gt;&gt;&gt; </span>intensityVector = precursorDataframe[rFunctions.index(precursorDataframe, <span class="py-string">'base.peak.intensity'</span>)]                            <span class="py-comment"># Retrieve a vector all the values from the 'base peak intensity' column</span>
<span class="py-prompt">&gt;&gt;&gt; </span>logIntensityVector = rFunctions.takeLog(intensityVector, 10                                                                  <span class="py-comment"># Take the log10 of all the values in the intensityVector</span>
<span class="py-prompt">&gt;&gt;&gt; </span>rplots = rPlots.Plots()                                                                                                      <span class="py-comment"># Instantiate rPlots.Plots()</span>
<span class="py-prompt">&gt;&gt;&gt; </span>plots.barplot(<span class="py-string">'example_files/output/msms_per_feature_barplot.png'</span>, precursorTable, width=400, height=400,                     <span class="py-comment"># draw a histogram</span>
<span class="py-output">                    title='#MS/MS per feature', xlab = '# features', ylab = '# MS/MS')</span></pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="msms_and_spectrum_per_ioncurrent_histogram"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">msms_and_spectrum_per_ioncurrent_histogram</span>()</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="example_scripts.plots_from_csvFiles-pysrc.html#msms_and_spectrum_per_ioncurrent_histogram">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Example of how to make a histogram of the ion current per ms level (1 
  and 2).</p>
  <p>Takes a mzml.csv file. It makes a vector out of all the total ion 
  currents per spectrum in example_files/input/mzml.csv. It retrieves 
  vectors of information about the spectra, so with little tweaking this 
  method can be used any time that you can make a vector out of your data. 
  For better viewing the data is logged with base 10.</p>
  <p>This example script uses the following functions:</p>
  <ul>
    <li>
      <a href="pyMSA.rFunctions-module.html#readCsvFile" 
      class="link">rFunctions.readCsvFile</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#getRowsWithUniqColumn" 
      class="link">rFunctions.getRowsWithUniqColumn</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#index" 
      class="link">rFunctions.index</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#takeLog" 
      class="link">rFunctions.takeLog</a>
    </li>
    <li>
      <a href="pyMSA.rPlotGenerics.Plots-class.html#histogram" 
      class="link">rPlots.Plots.histogram</a>
    </li>
  </ul>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rFunctions
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rPlots
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">import</span> rpy2.robjects <span class="py-keyword">as</span> R
<span class="py-prompt">&gt;&gt;&gt; </span>mzmlDataframe = rFunctions.readCsvFile(<span class="py-string">'example_files/input/mzML.csv'</span>)                                            <span class="py-comment"># Read a csv file into a rpy2 dataframe with precursors and intensities</span>
<span class="py-prompt">&gt;&gt;&gt; </span>precursorDataframe = mzmlDataframe.rx(mzmlDataframe[rFunctions.index(mzmlDataframe, <span class="py-string">'ms.level'</span>)].ro &gt;= 2, True)   <span class="py-comment"># Retrieve a subset dataframe of mzmlDataframe where values in column 'ms level' &gt;= 2</span>
<span class="py-prompt">&gt;&gt;&gt; </span>precursorDataframe = mzmlDataframe.rx(mzmlDataframe[rFunctions.index(mzmlDataframe, <span class="py-string">'ms.level'</span>)].ro == 1, True)   <span class="py-comment"># Retrieve a subset dataframe of mzmlDataframe where values in column 'ms level' == 1</span>
<span class="py-prompt">&gt;&gt;&gt; </span>nonPrecursorIoncount = precursorDataframe[rFunctions.index(precursorDataframe, <span class="py-string">'total.ion.current'</span>)]              <span class="py-comment"># Retrieve a vector of all the data in the column 'total ion current' of precursorDataframe</span>
<span class="py-prompt">&gt;&gt;&gt; </span>nonPrecursorIoncount = nonPrecursorDataframe[rFunctions.index(nonPrecursorDataframe, <span class="py-string">'total.ion.current'</span>)]        <span class="py-comment"># Retrieve a vector of all the data in the column 'total ion current' of nonPrecursorDataframe</span>
<span class="py-prompt">&gt;&gt;&gt; </span>logPrecursorIoncount = rFunctions.takeLog(precursorIoncount, 10)                                                  <span class="py-comment"># Take the logarithm of all the values in the vector with base 10</span>
<span class="py-prompt">&gt;&gt;&gt; </span>logNonPrecursorIoncount = rFunctions.takeLog(nonPrecursorIoncount, 10)                                            <span class="py-comment"># Take the logarithm of all the values in the vector with base 10</span>
<span class="py-prompt">&gt;&gt;&gt; </span>rplots = rPlots.Plots()                                                                                           <span class="py-comment"># Instantiate rPlots.Plots()</span>
<span class="py-output">plots.histogram('example_files/output/msms_and_spectrum_per_ionCurrent_histogram.png', logPrecursorIoncount, </span>
<span class="py-output">                logNonPrecursorIoncount, title='ion current for ms level 1 and ms level 2', </span>
<span class="py-output">                xlab='ion current', ylab='frequency of spectrum or MS/MS precursor', </span>
<span class="py-output">                legend= {'x':'topright','legend':R.StrVector(['ms level 1', 'ms level 2']), 'lty':R.IntVector([1,1]), </span>
<span class="py-output">                        'lwd':R.IntVector([2.5,2.5])})</span></pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="feature_and_MSMS_per_intensity_histogram"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">feature_and_MSMS_per_intensity_histogram</span>()</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="example_scripts.plots_from_csvFiles-pysrc.html#feature_and_MSMS_per_intensity_histogram">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Example of how to make an overlapping histogram of the features and 
  MS/MS precursors per intensity.</p>
  <p>Takes a feature.csv file and a mzml.csv file. It makes a vector out of
  all the intensities per feature in example_files/input/feature.csv and a 
  vector of all the intensities per spectrums with ms level &gt; 2 in 
  example_files/input/feature.csv. It retrieves vectors of information 
  about the feature and the MS/MS, so with little tweaking this method can 
  be used any time that you can make an n amount of vectors out of your 
  data. For better viewing the data is logged with base 10.</p>
  <p>This example script uses the following functions:</p>
  <ul>
    <li>
      <a href="pyMSA.rFunctions-module.html#readCsvFile" 
      class="link">rFunctions.readCsvFile</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#getRowsWithUniqColumn" 
      class="link">rFunctions.getRowsWithUniqColumn</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#index" 
      class="link">rFunctions.index</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#takeLog" 
      class="link">rFunctions.takeLog</a>
    </li>
    <li>
      <a href="pyMSA.rPlotGenerics.Plots-class.html#histogram" 
      class="link">rPlots.Plots.histogram</a>
    </li>
  </ul>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rFunctions
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rPlots
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">import</span> rpy2.robjects <span class="py-keyword">as</span> R
<span class="py-prompt">&gt;&gt;&gt; </span>featDataframe = rFunctions.readCsvFile(<span class="py-string">'example_files/input/feature.csv'</span>)                                         <span class="py-comment"># Read a csv file into a rpy2 dataframe with featurs and intensities</span>
<span class="py-prompt">&gt;&gt;&gt; </span>featDataframeUniq = rFunctions.getRowsWithUniqColumn(featDataframe, <span class="py-string">'id'</span>)                                         <span class="py-comment"># Remove the rows with redundant id's from featDataframe</span>
<span class="py-prompt">&gt;&gt;&gt; </span>featIntensityVector = featDataframe[rFunctions.index(featDataframeUniq, <span class="py-string">'intensity'</span>)]                             <span class="py-comment"># Retrieve a vector of intensities from the unique features</span>
<span class="py-prompt">&gt;&gt;&gt; </span>featLogIntensityVector = rFunctions.takeLog(featIntensityVector,10)                                               <span class="py-comment"># Take the logarithm of all the values in the vector with base 10</span>
<span class="py-prompt">&gt;&gt;&gt; </span>mzmlDataframe = rFunctions.readCsvFile(<span class="py-string">'example_files/input/mzML.csv'</span>)                                            <span class="py-comment"># Read a csv file into a rpy2 dataframe with precursors and intensities</span>
<span class="py-prompt">&gt;&gt;&gt; </span>precursorDataframe = mzmlDataframe.rx(mzmlDataframe[rFunctions.index(mzmlDataframe, <span class="py-string">'ms.level'</span>)].ro &gt;= 2, True)   <span class="py-comment"># Retrieve a subset dataframe of mzmlDataframe where values in column 'ms level' &gt; 2</span>
<span class="py-prompt">&gt;&gt;&gt; </span>mzmlIntensityVector = precursorDataframe[rFunctions.index(precursorDataframe, <span class="py-string">'base.peak.intensity'</span>)]             <span class="py-comment"># Retrieve the intensty of all the MS/MS precursors in precursorSubset</span>
<span class="py-prompt">&gt;&gt;&gt; </span>mzmlLogIntensityVector = rFunctions.takeLog(mzmlIntensityVector, 10)                                              <span class="py-comment"># Take the logarithm with base 10 of all the values in mzmlIntensityVector </span>
<span class="py-prompt">&gt;&gt;&gt; </span>rplots = rPlots.Plots()                                                                                           <span class="py-comment"># Instantiate rPlots.Plots()</span>
<span class="py-prompt">&gt;&gt;&gt; </span>rplots.histogram(<span class="py-string">'example_files/output/feature_and_msms_per_intensity_histogram.png'</span>, featLogIntensityVector,     <span class="py-comment"># draw a plot with 2 histograms and a legend</span>
<span class="py-output">                     mzmlLogIntensityVector, title='feature and MSMS per intensity', xlab='intensity', </span>
<span class="py-output">                     ylab='frequency of MS/MS and Intensity', </span>
<span class="py-output">                     legend= {'x':'topright','legend':R.StrVector(['features', 'MS/MS precursors']), </span>
<span class="py-output">                              'lty':R.IntVector([1,1]), 'lwd':R.IntVector([2.5,2.5])})</span></pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="msms_per_feature_barplot"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">msms_per_feature_barplot</span>()</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="example_scripts.plots_from_csvFiles-pysrc.html#msms_per_feature_barplot">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Example of how to make a barplot of the MS/MS per feature.</p>
  <p>This example script uses the following functions:</p>
  <ul>
    <li>
      <a href="pyMSA.rFunctions-module.html#readCsvFile" 
      class="link">rFunctions.readCsvFile</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#index" 
      class="link">rFunctions.index</a>
    </li>
    <li>
      <a href="pyMSA.rPlotGenerics.Plots-class.html#barplot" 
      class="link">rPlots.Plots.barplot</a>
    </li>
  </ul>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rFunctions
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rPlots
<span class="py-prompt">&gt;&gt;&gt; </span>csvData = rFunctions.readCsvFile(<span class="py-string">'example_files/input/feature_precursor.csv'</span>, head=True, sep=<span class="py-string">'  '</span>)                           <span class="py-comment"># Read a csv file into a rpy2 dataframe with # MS/MS per feature</span>
<span class="py-prompt">&gt;&gt;&gt; </span>precursorVector = csvData[rFunctions.index(csvData, <span class="py-string">'X..precursors'</span>)]                                                        <span class="py-comment"># Retrieve a vector of # of precursors for every feature</span>
<span class="py-prompt">&gt;&gt;&gt; </span>precursorTable = R.r[<span class="py-string">'table'</span>](precursorVector)                                                                               <span class="py-comment"># Make a R table out of the precurosVector (needed for the barplot)</span>
<span class="py-prompt">&gt;&gt;&gt; </span>rplots = rPlots.Plots()                                                                                                      <span class="py-comment"># Instantiate rPlots.Plots()</span>
<span class="py-prompt">&gt;&gt;&gt; </span>plots.barplot(<span class="py-string">'example_files/output/msms_per_feature_barplot.png'</span>, precursorTable,width=400, height=400,                     <span class="py-comment"># draw a barplot</span>
<span class="py-output">                    title='#MS/MS per feature', xlab = '# features', ylab = '# MS/MS')</span></pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="msms_per_feature_per_intensity_boxplot"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">msms_per_feature_per_intensity_boxplot</span>()</span>
  </h3>
  </td><td align="right" valign="top"
    ><span class="codelink"><a href="example_scripts.plots_from_csvFiles-pysrc.html#msms_per_feature_per_intensity_boxplot">source&nbsp;code</a></span>&nbsp;
    </td>
  </tr></table>
  
  <p>Example of how to make a boxplot of the # of MS/MS per feature per 
  intensity.</p>
  <p>This example script uses the following functions:</p>
  <ul>
    <li>
      <a href="pyMSA.rFunctions-module.html#readCsvFile" 
      class="link">rFunctions.readCsvFile</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#getRowsWithUniqColumn" 
      class="link">rFunctions.getRowsWithUniqColumn</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#index" 
      class="link">rFunctions.index</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#takeLog" 
      class="link">rFunctions.takeLog</a>
    </li>
    <li>
      <a href="pyMSA.rFunctions-module.html#getColumns" 
      class="link">rFunctions.getColumns</a>
    </li>
    <li>
      <a href="pyMSA.rPlotGenerics.Plots-class.html#boxplotFormulae" 
      class="link">rPlots.Plots.boxplotFormulae</a>
    </li>
  </ul>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rFunctions
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> pyMSA <span class="py-keyword">import</span> rPlots
<span class="py-prompt">&gt;&gt;&gt; </span>featDataframe = rFunctions.readCsvFile(<span class="py-string">'example_files/input/feature.csv'</span>)                                                            <span class="py-comment"># Read a csv file into a rpy2 dataframe with a column containingintensities</span>
<span class="py-prompt">&gt;&gt;&gt; </span>featDataframeUniq = rFunctions.getRowsWithUniqColumn(featDataframe, <span class="py-string">'id'</span>)                                                            <span class="py-comment"># Remove the rows with redundant id's from featDataframe</span>
<span class="py-prompt">&gt;&gt;&gt; </span>precursorPerFeatureDataframe = rFunctions.readCsvFile(<span class="py-string">'example_files/input/feature_precursor.csv'</span>, head=True, sep=<span class="py-string">'     '</span>)              <span class="py-comment"># Read a csv file into a rpy2 dataframe with a column containing # MS/MS per feature</span>
<span class="py-prompt">&gt;&gt;&gt; </span>mergedFeatureDataframe = R.r[<span class="py-string">'merge'</span>](featDataframeUniq, precursorPerFeatureDataframe)                                               <span class="py-comment"># Merge the two dataframes, so that each feature has an intensity and an #MS/MS per feature</span>
<span class="py-prompt">&gt;&gt;&gt; </span>mergedFeatureDataframe[rFunctions.index(mergedFeatureDataframe, <span class="py-string">'intensity'</span>)] = R.r[<span class="py-string">'round'</span>](rFunctions.takeLog(featDataframeUniq[rFunctions.index(featDataframeUniq, <span class="py-string">'intensity'</span>)], 10))    <span class="py-comment"># Take the log10 and round all the values in the 'intensity' column</span>
<span class="py-prompt">&gt;&gt;&gt; </span>vector1 = mergedFeatureDataframe[rFunctions.index(mergedFeatureDataframe, <span class="py-string">'X..precursors'</span>)]                                          <span class="py-comment"># Retrieve a vector of all values in the column '# precursors'</span>
<span class="py-prompt">&gt;&gt;&gt; </span>vector2 = mergedFeatureDataframe[rFunctions.index(mergedFeatureDataframe,<span class="py-string">'intensity'</span>)]                                               <span class="py-comment"># retrieve a vector of all values in the column 'intensity'</span>
<span class="py-prompt">&gt;&gt;&gt; </span>plots = rPlots.Plots()                                                                                                               <span class="py-comment"># instantiate rPlots.PlotS()</span>
<span class="py-prompt">&gt;&gt;&gt; </span>plots.boxplotFormulae(<span class="py-string">'example_files/output/msms_per_feature_per_intensity_boxplot.png'</span>, vector1, vector2, mergedFeatureDataframe,   <span class="py-comment"># plot the boxplot</span>
<span class="py-output">                title = 'MS/MS per feature per intensity', ylab = '# of MS/MS per feature', xlab = 'Rounded log10 of intensity')</span></pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0.1 on Tue Jun  5 15:10:32 2012
    </td>
    <td align="right" class="footer">
      <a target="mainFrame" href="http://epydoc.sourceforge.net"
        >http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie();
  // -->
</script>
</body>
</html>
