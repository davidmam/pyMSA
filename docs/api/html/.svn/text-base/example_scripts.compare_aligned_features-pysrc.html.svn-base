<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>example_scripts.compare_aligned_features</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        <a href="example_scripts-module.html">Package&nbsp;example_scripts</a> ::
        Module&nbsp;compare_aligned_features
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="example_scripts.compare_aligned_features-pysrc.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<h1 class="epydoc">Source Code for <a href="example_scripts.compare_aligned_features-module.html">Module example_scripts.compare_aligned_features</a></h1>
<pre class="py-src">
<a name="L1"></a><tt class="py-lineno">  1</tt>  <tt class="py-line"><tt class="py-comment"># Copyright (c) 2012 - N.P. de Klein</tt> </tt>
<a name="L2"></a><tt class="py-lineno">  2</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L3"></a><tt class="py-lineno">  3</tt>  <tt class="py-line"><tt class="py-comment">#     This file is part of Python Mass Spec Analyzer (PyMSA).</tt> </tt>
<a name="L4"></a><tt class="py-lineno">  4</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L5"></a><tt class="py-lineno">  5</tt>  <tt class="py-line"><tt class="py-comment">#     Python Mass Spec Analyzer (PyMSA) is free software: you can redistribute it and/or modify</tt> </tt>
<a name="L6"></a><tt class="py-lineno">  6</tt>  <tt class="py-line"><tt class="py-comment">#     it under the terms of the GNU General Public License as published by</tt> </tt>
<a name="L7"></a><tt class="py-lineno">  7</tt>  <tt class="py-line"><tt class="py-comment">#     the Free Software Foundation, either version 3 of the License, or</tt> </tt>
<a name="L8"></a><tt class="py-lineno">  8</tt>  <tt class="py-line"><tt class="py-comment">#     (at your option) any later version.</tt> </tt>
<a name="L9"></a><tt class="py-lineno">  9</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L10"></a><tt class="py-lineno"> 10</tt>  <tt class="py-line"><tt class="py-comment">#     Python Mass Spec Analyzer (PyMSA) is distributed in the hope that it will be useful,</tt> </tt>
<a name="L11"></a><tt class="py-lineno"> 11</tt>  <tt class="py-line"><tt class="py-comment">#     but WITHOUT ANY WARRANTY; without even the implied warranty of</tt> </tt>
<a name="L12"></a><tt class="py-lineno"> 12</tt>  <tt class="py-line"><tt class="py-comment">#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</tt> </tt>
<a name="L13"></a><tt class="py-lineno"> 13</tt>  <tt class="py-line"><tt class="py-comment">#     GNU General Public License for more details.</tt> </tt>
<a name="L14"></a><tt class="py-lineno"> 14</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L15"></a><tt class="py-lineno"> 15</tt>  <tt class="py-line"><tt class="py-comment">#     You should have received a copy of the GNU General Public License</tt> </tt>
<a name="L16"></a><tt class="py-lineno"> 16</tt>  <tt class="py-line"><tt class="py-comment">#     along with Python Mass Spec Analyzer (PyMSA).  If not, see &lt;http://www.gnu.org/licenses/&gt;.")</tt> </tt>
<a name="L17"></a><tt class="py-lineno"> 17</tt>  <tt class="py-line"> </tt>
<a name="L18"></a><tt class="py-lineno"> 18</tt>  <tt class="py-line"><tt class="py-docstring">"""</tt> </tt>
<a name="L19"></a><tt class="py-lineno"> 19</tt>  <tt class="py-line"><tt class="py-docstring">Example how to plot trafoXML data</tt> </tt>
<a name="L20"></a><tt class="py-lineno"> 20</tt>  <tt class="py-line"><tt class="py-docstring">"""</tt> </tt>
<a name="L21"></a><tt class="py-lineno"> 21</tt>  <tt class="py-line"> </tt>
<a name="L22"></a><tt class="py-lineno"> 22</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">sys</tt> </tt>
<a name="L23"></a><tt class="py-lineno"> 23</tt>  <tt class="py-line"><tt class="py-comment"># for me, PyMSA_dev is not in my default python path</tt> </tt>
<a name="L24"></a><tt class="py-lineno"> 24</tt>  <tt class="py-line"><tt class="py-name">sys</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-string">'/homes/ndeklein/workspace/MS/Trunk/PyMSA_dev'</tt><tt class="py-op">)</tt> </tt>
<a name="L25"></a><tt class="py-lineno"> 25</tt>  <tt class="py-line"> </tt>
<a name="L26"></a><tt class="py-lineno"> 26</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt class="py-name">xml</tt><tt class="py-op">.</tt><tt class="py-name">etree</tt> <tt class="py-keyword">import</tt> <tt class="py-name">cElementTree</tt> </tt>
<a name="L27"></a><tt class="py-lineno"> 27</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">rpy2</tt><tt class="py-op">.</tt><tt class="py-name">robjects</tt> <tt class="py-keyword">as</tt> <tt class="py-name">R</tt> </tt>
<a name="L28"></a><tt class="py-lineno"> 28</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-0" class="py-name" targets="Package pyMSA=pyMSA-module.html"><a title="pyMSA" class="py-name" href="#" onclick="return doclink('link-0', 'pyMSA', 'link-0');">pyMSA</a></tt> <tt class="py-keyword">import</tt> <tt id="link-1" class="py-name" targets="Module pyMSA.elementFunctions=pyMSA.elementFunctions-module.html"><a title="pyMSA.elementFunctions" class="py-name" href="#" onclick="return doclink('link-1', 'elementFunctions', 'link-1');">elementFunctions</a></tt> </tt>
<a name="L29"></a><tt class="py-lineno"> 29</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-2" class="py-name"><a title="pyMSA" class="py-name" href="#" onclick="return doclink('link-2', 'pyMSA', 'link-0');">pyMSA</a></tt> <tt class="py-keyword">import</tt> <tt id="link-3" class="py-name" targets="Module pyMSA.parseFeatureXML=pyMSA.parseFeatureXML-module.html"><a title="pyMSA.parseFeatureXML" class="py-name" href="#" onclick="return doclink('link-3', 'parseFeatureXML', 'link-3');">parseFeatureXML</a></tt> </tt>
<a name="L30"></a><tt class="py-lineno"> 30</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-4" class="py-name"><a title="pyMSA" class="py-name" href="#" onclick="return doclink('link-4', 'pyMSA', 'link-0');">pyMSA</a></tt> <tt class="py-keyword">import</tt> <tt id="link-5" class="py-name" targets="Module pyMSA.getWindow=pyMSA.getWindow-module.html"><a title="pyMSA.getWindow" class="py-name" href="#" onclick="return doclink('link-5', 'getWindow', 'link-5');">getWindow</a></tt>   </tt>
<a name="L31"></a><tt class="py-lineno"> 31</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-6" class="py-name"><a title="pyMSA" class="py-name" href="#" onclick="return doclink('link-6', 'pyMSA', 'link-0');">pyMSA</a></tt> <tt class="py-keyword">import</tt> <tt id="link-7" class="py-name" targets="Module pyMSA.rFunctions=pyMSA.rFunctions-module.html"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-7', 'rFunctions', 'link-7');">rFunctions</a></tt> </tt>
<a name="L32"></a><tt class="py-lineno"> 32</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">collections</tt> </tt>
<a name="L33"></a><tt class="py-lineno"> 33</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-8" class="py-name"><a title="pyMSA" class="py-name" href="#" onclick="return doclink('link-8', 'pyMSA', 'link-0');">pyMSA</a></tt> <tt class="py-keyword">import</tt> <tt id="link-9" class="py-name" targets="Module pyMSA.featureMapping=pyMSA.featureMapping-module.html"><a title="pyMSA.featureMapping" class="py-name" href="#" onclick="return doclink('link-9', 'featureMapping', 'link-9');">featureMapping</a></tt> </tt>
<a name="L34"></a><tt class="py-lineno"> 34</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-10" class="py-name"><a title="pyMSA" class="py-name" href="#" onclick="return doclink('link-10', 'pyMSA', 'link-0');">pyMSA</a></tt> <tt class="py-keyword">import</tt> <tt id="link-11" class="py-name" targets="Module pyMSA.rPlotGenerics=pyMSA.rPlotGenerics-module.html"><a title="pyMSA.rPlotGenerics" class="py-name" href="#" onclick="return doclink('link-11', 'rPlotGenerics', 'link-11');">rPlotGenerics</a></tt> </tt>
<a name="L35"></a><tt class="py-lineno"> 35</tt>  <tt class="py-line"> </tt>
<a name="plot_trafoXML"></a><div id="plot_trafoXML-def"><a name="L36"></a><tt class="py-lineno"> 36</tt> <a class="py-toggle" href="#" id="plot_trafoXML-toggle" onclick="return toggle('plot_trafoXML');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="example_scripts.compare_aligned_features-module.html#plot_trafoXML">plot_trafoXML</a><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="plot_trafoXML-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="plot_trafoXML-expanded"><a name="L37"></a><tt class="py-lineno"> 37</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L38"></a><tt class="py-lineno"> 38</tt>  <tt class="py-line"><tt class="py-docstring">    Plot points for the change in retention time for all the values in a .trafoXML file.</tt> </tt>
<a name="L39"></a><tt class="py-lineno"> 39</tt>  <tt class="py-line"><tt class="py-docstring">    Use the trafoXML file with as name 'linear', not 'identity'. Identity is the one that linear maps to,</tt> </tt>
<a name="L40"></a><tt class="py-lineno"> 40</tt>  <tt class="py-line"><tt class="py-docstring">    so identity doesn't have any changes.</tt> </tt>
<a name="L41"></a><tt class="py-lineno"> 41</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L42"></a><tt class="py-lineno"> 42</tt>  <tt class="py-line"><tt class="py-docstring">    This example script uses the following classes and functions:</tt> </tt>
<a name="L43"></a><tt class="py-lineno"> 43</tt>  <tt class="py-line"><tt class="py-docstring">        - L{elementFunctions.getItems}</tt> </tt>
<a name="L44"></a><tt class="py-lineno"> 44</tt>  <tt class="py-line"><tt class="py-docstring">        - L{rPlotGenerics.Plots}</tt> </tt>
<a name="L45"></a><tt class="py-lineno"> 45</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L46"></a><tt class="py-lineno"> 46</tt>  <tt class="py-line"><tt class="py-docstring">    B{Example (more detailed comments in the source code):}</tt> </tt>
<a name="L47"></a><tt class="py-lineno"> 47</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L48"></a><tt class="py-lineno"> 48</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import elementFunctions</tt> </tt>
<a name="L49"></a><tt class="py-lineno"> 49</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import rPlots</tt> </tt>
<a name="L50"></a><tt class="py-lineno"> 50</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; import rpy2.robjects as R</tt> </tt>
<a name="L51"></a><tt class="py-lineno"> 51</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; changeList = []                                                                                                                    # list to keep track of the change in retention time </tt> </tt>
<a name="L52"></a><tt class="py-lineno"> 52</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; for event, element in cElementTree.iterparse('example_files/input/example_trafoXML.trafoXML'):                                     # looping through all the elements in the trafoXML file</tt> </tt>
<a name="L53"></a><tt class="py-lineno"> 53</tt>  <tt class="py-line"><tt class="py-docstring">    ...    if element.tag == 'Pair':                                                                                                       # if the element == 'Pair'</tt> </tt>
<a name="L54"></a><tt class="py-lineno"> 54</tt>  <tt class="py-line"><tt class="py-docstring">    ...         changeList.append(float(elementFunctions.getItems(element)['to'])-float(elementFunctions.getItems(element)['from']))       # append the change in retention time to the changeList</tt> </tt>
<a name="L55"></a><tt class="py-lineno"> 55</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; changeList.sort()                                                                                                                  # sort the changeList so that the big up and down changes get grouped together</tt> </tt>
<a name="L56"></a><tt class="py-lineno"> 56</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; floatVector = R.FloatVector(changeList)                                                                                            # because rPlots needs R vectors, make a vector out of the list</tt> </tt>
<a name="L57"></a><tt class="py-lineno"> 57</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; plots = rPlots.Plots()                                                                                                             # Instantiate rPlots.Plots</tt> </tt>
<a name="L58"></a><tt class="py-lineno"> 58</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; plots.plot('test plot_trafoXML.png', floatVector, title='Change in retention time per feature',                                    # plot a standard plot</tt> </tt>
<a name="L59"></a><tt class="py-lineno"> 59</tt>  <tt class="py-line"><tt class="py-docstring">                    xlab='Feature number.', ylab='change in retention time')</tt> </tt>
<a name="L60"></a><tt class="py-lineno"> 60</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L61"></a><tt class="py-lineno"> 61</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L62"></a><tt class="py-lineno"> 62</tt>  <tt class="py-line">    <tt class="py-comment"># list to keep track of the change in retention time     </tt> </tt>
<a name="L63"></a><tt class="py-lineno"> 63</tt>  <tt class="py-line">    <tt class="py-name">changeList</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L64"></a><tt class="py-lineno"> 64</tt>  <tt class="py-line">    <tt class="py-comment"># looping through all the elements in the trafoXML file</tt> </tt>
<a name="L65"></a><tt class="py-lineno"> 65</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">event</tt><tt class="py-op">,</tt> <tt class="py-name">element</tt> <tt class="py-keyword">in</tt> <tt class="py-name">cElementTree</tt><tt class="py-op">.</tt><tt class="py-name">iterparse</tt><tt class="py-op">(</tt><tt class="py-string">'example_files/input/example_trafoXML.trafoXML'</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L66"></a><tt class="py-lineno"> 66</tt>  <tt class="py-line">        <tt class="py-comment"># this part is not in the documentation example for clarity. This checks if the trafoXML file given is the right one. There are 2 trafoXML files</tt> </tt>
<a name="L67"></a><tt class="py-lineno"> 67</tt>  <tt class="py-line">        <tt class="py-comment"># made when you align two featureXML files. One is the one of the 'identity', this one does not contain any info. The other one is 'linear', this</tt> </tt>
<a name="L68"></a><tt class="py-lineno"> 68</tt>  <tt class="py-line">        <tt class="py-comment"># contains all the changes in retention time.</tt> </tt>
<a name="L69"></a><tt class="py-lineno"> 69</tt>  <tt class="py-line">        <tt class="py-comment"># It exits the code  (because the identity file is useless) and gives information why.</tt> </tt>
<a name="L70"></a><tt class="py-lineno"> 70</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-name">element</tt><tt class="py-op">.</tt><tt class="py-name">tag</tt> <tt class="py-op">==</tt> <tt class="py-string">'Transformation'</tt><tt class="py-op">:</tt> </tt>
<a name="L71"></a><tt class="py-lineno"> 71</tt>  <tt class="py-line">            <tt class="py-keyword">if</tt> <tt id="link-12" class="py-name"><a title="pyMSA.elementFunctions" class="py-name" href="#" onclick="return doclink('link-12', 'elementFunctions', 'link-1');">elementFunctions</a></tt><tt class="py-op">.</tt><tt id="link-13" class="py-name" targets="Function pyMSA.elementFunctions.getItems()=pyMSA.elementFunctions-module.html#getItems"><a title="pyMSA.elementFunctions.getItems" class="py-name" href="#" onclick="return doclink('link-13', 'getItems', 'link-13');">getItems</a></tt><tt class="py-op">(</tt><tt class="py-name">element</tt><tt class="py-op">)</tt><tt class="py-op">[</tt><tt class="py-string">'name'</tt><tt class="py-op">]</tt> <tt class="py-op">==</tt> <tt class="py-string">'identity'</tt><tt class="py-op">:</tt> </tt>
<a name="L72"></a><tt class="py-lineno"> 72</tt>  <tt class="py-line">                <tt class="py-name">sys</tt><tt class="py-op">.</tt><tt class="py-name">exit</tt><tt class="py-op">(</tt><tt class="py-string">'This it he trafoXML identity file (see the Transformation node). There is no information in the identity file. Use the \'linear\' file as input'</tt><tt class="py-op">)</tt> </tt>
<a name="L73"></a><tt class="py-lineno"> 73</tt>  <tt class="py-line">        <tt class="py-comment"># if the element == 'Pair'</tt> </tt>
<a name="L74"></a><tt class="py-lineno"> 74</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-name">element</tt><tt class="py-op">.</tt><tt class="py-name">tag</tt> <tt class="py-op">==</tt> <tt class="py-string">'Pair'</tt><tt class="py-op">:</tt> </tt>
<a name="L75"></a><tt class="py-lineno"> 75</tt>  <tt class="py-line">             <tt class="py-comment"># append the change in retention time to the changeList. The value where it comes from is substracted from the value where it goes to.</tt> </tt>
<a name="L76"></a><tt class="py-lineno"> 76</tt>  <tt class="py-line">             <tt class="py-comment"># This way, if it changed retention time from 10000 to 11000, the change will be +1000, and when it changes retention time from 10000</tt> </tt>
<a name="L77"></a><tt class="py-lineno"> 77</tt>  <tt class="py-line">             <tt class="py-comment"># to 9000, the change will be -1000</tt> </tt>
<a name="L78"></a><tt class="py-lineno"> 78</tt>  <tt class="py-line">             <tt class="py-name">changeList</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-name">float</tt><tt class="py-op">(</tt><tt id="link-14" class="py-name"><a title="pyMSA.elementFunctions" class="py-name" href="#" onclick="return doclink('link-14', 'elementFunctions', 'link-1');">elementFunctions</a></tt><tt class="py-op">.</tt><tt id="link-15" class="py-name"><a title="pyMSA.elementFunctions.getItems" class="py-name" href="#" onclick="return doclink('link-15', 'getItems', 'link-13');">getItems</a></tt><tt class="py-op">(</tt><tt class="py-name">element</tt><tt class="py-op">)</tt><tt class="py-op">[</tt><tt class="py-string">'to'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">-</tt><tt class="py-name">float</tt><tt class="py-op">(</tt><tt id="link-16" class="py-name"><a title="pyMSA.elementFunctions" class="py-name" href="#" onclick="return doclink('link-16', 'elementFunctions', 'link-1');">elementFunctions</a></tt><tt class="py-op">.</tt><tt id="link-17" class="py-name"><a title="pyMSA.elementFunctions.getItems" class="py-name" href="#" onclick="return doclink('link-17', 'getItems', 'link-13');">getItems</a></tt><tt class="py-op">(</tt><tt class="py-name">element</tt><tt class="py-op">)</tt><tt class="py-op">[</tt><tt class="py-string">'from'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L79"></a><tt class="py-lineno"> 79</tt>  <tt class="py-line">    </tt>
<a name="L80"></a><tt class="py-lineno"> 80</tt>  <tt class="py-line">    <tt class="py-comment"># sort the changeList so that the big up and down changes get grouped together. If the changes aren't sorted, the dots are all over the place</tt> </tt>
<a name="L81"></a><tt class="py-lineno"> 81</tt>  <tt class="py-line">    <tt class="py-name">changeList</tt><tt class="py-op">.</tt><tt class="py-name">sort</tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L82"></a><tt class="py-lineno"> 82</tt>  <tt class="py-line">    <tt class="py-comment"># because rPlots needs R vectors, make a vector out of the list</tt> </tt>
<a name="L83"></a><tt class="py-lineno"> 83</tt>  <tt class="py-line">    <tt class="py-name">floatVector</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">FloatVector</tt><tt class="py-op">(</tt><tt class="py-name">changeList</tt><tt class="py-op">)</tt> </tt>
<a name="L84"></a><tt class="py-lineno"> 84</tt>  <tt class="py-line">    <tt class="py-comment"># Instantiate rPlots.Plots</tt> </tt>
<a name="L85"></a><tt class="py-lineno"> 85</tt>  <tt class="py-line">    <tt id="link-18" class="py-name" targets="Module pyMSA.plots=pyMSA.plots-module.html"><a title="pyMSA.plots" class="py-name" href="#" onclick="return doclink('link-18', 'plots', 'link-18');">plots</a></tt> <tt class="py-op">=</tt> <tt id="link-19" class="py-name"><a title="pyMSA.rPlotGenerics" class="py-name" href="#" onclick="return doclink('link-19', 'rPlotGenerics', 'link-11');">rPlotGenerics</a></tt><tt class="py-op">.</tt><tt id="link-20" class="py-name" targets="Class pyMSA.rPlotGenerics.Plots=pyMSA.rPlotGenerics.Plots-class.html"><a title="pyMSA.rPlotGenerics.Plots" class="py-name" href="#" onclick="return doclink('link-20', 'Plots', 'link-20');">Plots</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L86"></a><tt class="py-lineno"> 86</tt>  <tt class="py-line">    <tt class="py-comment"># plot a standard plot to example_files/output with the name 'test plot_trafoXML.png'. floatVector is what is plotted.</tt> </tt>
<a name="L87"></a><tt class="py-lineno"> 87</tt>  <tt class="py-line">    <tt id="link-21" class="py-name"><a title="pyMSA.plots" class="py-name" href="#" onclick="return doclink('link-21', 'plots', 'link-18');">plots</a></tt><tt class="py-op">.</tt><tt id="link-22" class="py-name" targets="Method pyMSA.rPlotGenerics.Plots.plot()=pyMSA.rPlotGenerics.Plots-class.html#plot"><a title="pyMSA.rPlotGenerics.Plots.plot" class="py-name" href="#" onclick="return doclink('link-22', 'plot', 'link-22');">plot</a></tt><tt class="py-op">(</tt><tt class="py-string">'example_files/output/test plot_trafoXML.png'</tt><tt class="py-op">,</tt> <tt class="py-name">floatVector</tt><tt class="py-op">,</tt> <tt class="py-name">title</tt><tt class="py-op">=</tt><tt class="py-string">'Change in retention time per feature'</tt><tt class="py-op">,</tt> <tt class="py-name">xlab</tt><tt class="py-op">=</tt><tt class="py-string">'Feature number.'</tt><tt class="py-op">,</tt> <tt class="py-name">ylab</tt><tt class="py-op">=</tt><tt class="py-string">'change in retention time'</tt><tt class="py-op">)</tt> </tt>
</div><a name="L88"></a><tt class="py-lineno"> 88</tt>  <tt class="py-line"> </tt>
<a name="plot_trafoXML_plusFeatureIntensity"></a><div id="plot_trafoXML_plusFeatureIntensity-def"><a name="L89"></a><tt class="py-lineno"> 89</tt> <a class="py-toggle" href="#" id="plot_trafoXML_plusFeatureIntensity-toggle" onclick="return toggle('plot_trafoXML_plusFeatureIntensity');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="example_scripts.compare_aligned_features-module.html#plot_trafoXML_plusFeatureIntensity">plot_trafoXML_plusFeatureIntensity</a><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="plot_trafoXML_plusFeatureIntensity-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="plot_trafoXML_plusFeatureIntensity-expanded"><a name="L90"></a><tt class="py-lineno"> 90</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L91"></a><tt class="py-lineno"> 91</tt>  <tt class="py-line"><tt class="py-docstring">    Plot points for the change in retention time for all the values in a .trafoXML file, and change the color of the points</tt> </tt>
<a name="L92"></a><tt class="py-lineno"> 92</tt>  <tt class="py-line"><tt class="py-docstring">    according to the intensity of the feature of the original featureXML file corresponding to that point.</tt> </tt>
<a name="L93"></a><tt class="py-lineno"> 93</tt>  <tt class="py-line"><tt class="py-docstring">    Use the trafoXML file with as name 'linear', not 'identity'. Identity is the one that linear maps to,</tt> </tt>
<a name="L94"></a><tt class="py-lineno"> 94</tt>  <tt class="py-line"><tt class="py-docstring">    so identity doesn't have any changes. </tt> </tt>
<a name="L95"></a><tt class="py-lineno"> 95</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L96"></a><tt class="py-lineno"> 96</tt>  <tt class="py-line"><tt class="py-docstring">    This example script uses the following classes and functions:</tt> </tt>
<a name="L97"></a><tt class="py-lineno"> 97</tt>  <tt class="py-line"><tt class="py-docstring">        - L{elementFunctions.getItems}</tt> </tt>
<a name="L98"></a><tt class="py-lineno"> 98</tt>  <tt class="py-line"><tt class="py-docstring">        - L{rPlotGenerics.Plots}</tt> </tt>
<a name="L99"></a><tt class="py-lineno"> 99</tt>  <tt class="py-line"><tt class="py-docstring">        - L{rPlotGenerics.Plots.plot}</tt> </tt>
<a name="L100"></a><tt class="py-lineno">100</tt>  <tt class="py-line"><tt class="py-docstring">        - L{pyMSA.parseFeatureXML.Reader}</tt> </tt>
<a name="L101"></a><tt class="py-lineno">101</tt>  <tt class="py-line"><tt class="py-docstring">        - L{parseFeatureXML.Reader.getSimpleFeatureInfo}</tt> </tt>
<a name="L102"></a><tt class="py-lineno">102</tt>  <tt class="py-line"><tt class="py-docstring">        - L{rFunctions.takeLog}</tt> </tt>
<a name="L103"></a><tt class="py-lineno">103</tt>  <tt class="py-line"><tt class="py-docstring">        </tt> </tt>
<a name="L104"></a><tt class="py-lineno">104</tt>  <tt class="py-line"><tt class="py-docstring">    B{Example (see source code for additional comments):}</tt> </tt>
<a name="L105"></a><tt class="py-lineno">105</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L106"></a><tt class="py-lineno">106</tt>  <tt class="py-line"><tt class="py-docstring">    Plot the shift in retention time of one of the featureXML files and color each point a red/blue ratio dependent on its intensity</tt> </tt>
<a name="L107"></a><tt class="py-lineno">107</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L108"></a><tt class="py-lineno">108</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import elementFunctions</tt> </tt>
<a name="L109"></a><tt class="py-lineno">109</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import rPlots</tt> </tt>
<a name="L110"></a><tt class="py-lineno">110</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import parseFeatureXML</tt> </tt>
<a name="L111"></a><tt class="py-lineno">111</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import rFunctions</tt> </tt>
<a name="L112"></a><tt class="py-lineno">112</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; import rpy2.robjects as R</tt> </tt>
<a name="L113"></a><tt class="py-lineno">113</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; features_C2_01 = parseFeatureXML.Reader('/homes/ndeklein/Doreen data/featureXML/JG_TiO2_C2_01.featureXML')                             </tt> </tt>
<a name="L114"></a><tt class="py-lineno">114</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; mzDict = {}</tt> </tt>
<a name="L115"></a><tt class="py-lineno">115</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; for feature in features_C2_01.getSimpleFeatureInfo():</tt> </tt>
<a name="L116"></a><tt class="py-lineno">116</tt>  <tt class="py-line"><tt class="py-docstring">    ...    mzDict[str(float(round(features_C2_01['retention time'],2)))] = features_C2_01['intensity']</tt> </tt>
<a name="L117"></a><tt class="py-lineno">117</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; changeDict = collections.defaultdict(int)</tt> </tt>
<a name="L118"></a><tt class="py-lineno">118</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; for event, element in cElementTree.iterparse('/homes/ndeklein/Doreen data/trafoXML/JG_TiO2-C2_01-C2_01A-file_1.trafoXML'):</tt> </tt>
<a name="L119"></a><tt class="py-lineno">119</tt>  <tt class="py-line"><tt class="py-docstring">    ...    if element.tag == 'Transformation':</tt> </tt>
<a name="L120"></a><tt class="py-lineno">120</tt>  <tt class="py-line"><tt class="py-docstring">    ...        if elementFunctions.getItems(element)['name'] == 'identity':</tt> </tt>
<a name="L121"></a><tt class="py-lineno">121</tt>  <tt class="py-line"><tt class="py-docstring">    ...            sys.exit('This it he trafoXML identity file (see the Transformation node). There is no information in the identity file. Use the \'linear\' file as input')</tt> </tt>
<a name="L122"></a><tt class="py-lineno">122</tt>  <tt class="py-line"><tt class="py-docstring">    ...    if element.tag == 'Pair':</tt> </tt>
<a name="L123"></a><tt class="py-lineno">123</tt>  <tt class="py-line"><tt class="py-docstring">    ...        retentionTime = str(round(float(elementFunctions.getItems(element)['from']),2))</tt> </tt>
<a name="L124"></a><tt class="py-lineno">124</tt>  <tt class="py-line"><tt class="py-docstring">    ...        changeDict[float(elementFunctions.getItems(element)['to'])-float(elementFunctions.getItems(element)['from'])] = mzDict[retentionTime]</tt> </tt>
<a name="L125"></a><tt class="py-lineno">125</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; colorPalette = R.r['colorRampPalette'](R.StrVector(['red','blue']))(10)</tt> </tt>
<a name="L126"></a><tt class="py-lineno">126</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; colorVector = colorPalette</tt> </tt>
<a name="L127"></a><tt class="py-lineno">127</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; changeList = [] </tt> </tt>
<a name="L128"></a><tt class="py-lineno">128</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; intensityList = []</tt> </tt>
<a name="L129"></a><tt class="py-lineno">129</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; for changeAndIntensity in sorted(changeDict.items()):</tt> </tt>
<a name="L130"></a><tt class="py-lineno">130</tt>  <tt class="py-line"><tt class="py-docstring">    ...    changeList.append(changeAndIntensity[0])</tt> </tt>
<a name="L131"></a><tt class="py-lineno">131</tt>  <tt class="py-line"><tt class="py-docstring">    ...    intensityList.append(changeAndIntensity[1])</tt> </tt>
<a name="L132"></a><tt class="py-lineno">132</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; for index, item in enumerate(intensityList):</tt> </tt>
<a name="L133"></a><tt class="py-lineno">133</tt>  <tt class="py-line"><tt class="py-docstring">    ...     intensityList[index] = colorPalette[int(rFunctions.takeLog(float(item),10)[0])]</tt> </tt>
<a name="L134"></a><tt class="py-lineno">134</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; colorVector = R.StrVector(intensityList)</tt> </tt>
<a name="L135"></a><tt class="py-lineno">135</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; floatVector = R.FloatVector(changeList)</tt> </tt>
<a name="L136"></a><tt class="py-lineno">136</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; plots = rPlots.Plots()</tt> </tt>
<a name="L137"></a><tt class="py-lineno">137</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; extraInput = {'col':colorVector,'pch':20}</tt> </tt>
<a name="L138"></a><tt class="py-lineno">138</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; plots.plot('example_files/output/test plot_trafoXML intensity.png',floatVector, width=1000, height=1000,title='Change in retention time per feature', xlab='Feature number.', ylab='change in retention time', plotArgs=extraInput)</tt> </tt>
<a name="L139"></a><tt class="py-lineno">139</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt>     </tt>
<a name="L140"></a><tt class="py-lineno">140</tt>  <tt class="py-line">     </tt>
<a name="L141"></a><tt class="py-lineno">141</tt>  <tt class="py-line">    <tt class="py-name">features_C2_01</tt> <tt class="py-op">=</tt> <tt id="link-23" class="py-name"><a title="pyMSA.parseFeatureXML" class="py-name" href="#" onclick="return doclink('link-23', 'parseFeatureXML', 'link-3');">parseFeatureXML</a></tt><tt class="py-op">.</tt><tt id="link-24" class="py-name" targets="Class pyMSA.parseFeatureXML.Reader=pyMSA.parseFeatureXML.Reader-class.html,Class pyMSA.parseMascot.Reader=pyMSA.parseMascot.Reader-class.html,Class pyMSA.parsePeaksMzML.Reader=pyMSA.parsePeaksMzML.Reader-class.html"><a title="pyMSA.parseFeatureXML.Reader
pyMSA.parseMascot.Reader
pyMSA.parsePeaksMzML.Reader" class="py-name" href="#" onclick="return doclink('link-24', 'Reader', 'link-24');">Reader</a></tt><tt class="py-op">(</tt><tt class="py-string">'/homes/ndeklein/Doreen data/featureXML/JG_TiO2_C2_01.featureXML'</tt><tt class="py-op">)</tt>                              </tt>
<a name="L142"></a><tt class="py-lineno">142</tt>  <tt class="py-line">    <tt class="py-comment"># this method is more expensive on memory, but a lot faster than old method (old method used getWindow, which looped through the list each time)</tt> </tt>
<a name="L143"></a><tt class="py-lineno">143</tt>  <tt class="py-line">    <tt class="py-comment"># this makes the retention time the key value, so that the retention time can be found with O(1)</tt> </tt>
<a name="L144"></a><tt class="py-lineno">144</tt>  <tt class="py-line">    <tt class="py-name">mzDict</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-op">}</tt> </tt>
<a name="L145"></a><tt class="py-lineno">145</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">feature</tt> <tt class="py-keyword">in</tt> <tt class="py-name">features_C2_01</tt><tt class="py-op">.</tt><tt id="link-25" class="py-name" targets="Method pyMSA.parseFeatureXML.Reader.getSimpleFeatureInfo()=pyMSA.parseFeatureXML.Reader-class.html#getSimpleFeatureInfo"><a title="pyMSA.parseFeatureXML.Reader.getSimpleFeatureInfo" class="py-name" href="#" onclick="return doclink('link-25', 'getSimpleFeatureInfo', 'link-25');">getSimpleFeatureInfo</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L146"></a><tt class="py-lineno">146</tt>  <tt class="py-line">        <tt class="py-name">mzDict</tt><tt class="py-op">[</tt><tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">round</tt><tt class="py-op">(</tt><tt class="py-name">float</tt><tt class="py-op">(</tt><tt class="py-name">features_C2_01</tt><tt class="py-op">[</tt><tt class="py-string">'retention time'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-number">8</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">]</tt> <tt class="py-op">=</tt> <tt class="py-name">features_C2_01</tt><tt class="py-op">[</tt><tt class="py-string">'intensity'</tt><tt class="py-op">]</tt> </tt>
<a name="L147"></a><tt class="py-lineno">147</tt>  <tt class="py-line">     </tt>
<a name="L148"></a><tt class="py-lineno">148</tt>  <tt class="py-line">             </tt>
<a name="L149"></a><tt class="py-lineno">149</tt>  <tt class="py-line">    <tt class="py-comment"># keeps track of the amount of change between the two, with as value a list with the values of the two compared featureXML files</tt> </tt>
<a name="L150"></a><tt class="py-lineno">150</tt>  <tt class="py-line">    <tt class="py-name">changeDict</tt> <tt class="py-op">=</tt> <tt class="py-name">collections</tt><tt class="py-op">.</tt><tt class="py-name">defaultdict</tt><tt class="py-op">(</tt><tt class="py-name">int</tt><tt class="py-op">)</tt> </tt>
<a name="L151"></a><tt class="py-lineno">151</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">event</tt><tt class="py-op">,</tt> <tt class="py-name">element</tt> <tt class="py-keyword">in</tt> <tt class="py-name">cElementTree</tt><tt class="py-op">.</tt><tt class="py-name">iterparse</tt><tt class="py-op">(</tt><tt class="py-string">'/homes/ndeklein/Doreen data/trafoXML/JG_TiO2-C2_01-C2_01A-file_1.trafoXML'</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L152"></a><tt class="py-lineno">152</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-name">element</tt><tt class="py-op">.</tt><tt class="py-name">tag</tt> <tt class="py-op">==</tt> <tt class="py-string">'Transformation'</tt><tt class="py-op">:</tt> </tt>
<a name="L153"></a><tt class="py-lineno">153</tt>  <tt class="py-line">            <tt class="py-keyword">if</tt> <tt id="link-26" class="py-name"><a title="pyMSA.elementFunctions" class="py-name" href="#" onclick="return doclink('link-26', 'elementFunctions', 'link-1');">elementFunctions</a></tt><tt class="py-op">.</tt><tt id="link-27" class="py-name"><a title="pyMSA.elementFunctions.getItems" class="py-name" href="#" onclick="return doclink('link-27', 'getItems', 'link-13');">getItems</a></tt><tt class="py-op">(</tt><tt class="py-name">element</tt><tt class="py-op">)</tt><tt class="py-op">[</tt><tt class="py-string">'name'</tt><tt class="py-op">]</tt> <tt class="py-op">==</tt> <tt class="py-string">'identity'</tt><tt class="py-op">:</tt> </tt>
<a name="L154"></a><tt class="py-lineno">154</tt>  <tt class="py-line">                <tt class="py-name">sys</tt><tt class="py-op">.</tt><tt class="py-name">exit</tt><tt class="py-op">(</tt><tt class="py-string">'This it he trafoXML identity file (see the Transformation node). There is no information in the identity file. Use the \'linear\' file as input'</tt><tt class="py-op">)</tt> </tt>
<a name="L155"></a><tt class="py-lineno">155</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-name">element</tt><tt class="py-op">.</tt><tt class="py-name">tag</tt> <tt class="py-op">==</tt> <tt class="py-string">'Pair'</tt><tt class="py-op">:</tt> </tt>
<a name="L156"></a><tt class="py-lineno">156</tt>  <tt class="py-line">            <tt class="py-name">retentionTime</tt> <tt class="py-op">=</tt> <tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">round</tt><tt class="py-op">(</tt><tt class="py-name">float</tt><tt class="py-op">(</tt><tt id="link-28" class="py-name"><a title="pyMSA.elementFunctions" class="py-name" href="#" onclick="return doclink('link-28', 'elementFunctions', 'link-1');">elementFunctions</a></tt><tt class="py-op">.</tt><tt id="link-29" class="py-name"><a title="pyMSA.elementFunctions.getItems" class="py-name" href="#" onclick="return doclink('link-29', 'getItems', 'link-13');">getItems</a></tt><tt class="py-op">(</tt><tt class="py-name">element</tt><tt class="py-op">)</tt><tt class="py-op">[</tt><tt class="py-string">'from'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-number">8</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L157"></a><tt class="py-lineno">157</tt>  <tt class="py-line">            <tt class="py-name">changeDict</tt><tt class="py-op">[</tt><tt class="py-name">float</tt><tt class="py-op">(</tt><tt id="link-30" class="py-name"><a title="pyMSA.elementFunctions" class="py-name" href="#" onclick="return doclink('link-30', 'elementFunctions', 'link-1');">elementFunctions</a></tt><tt class="py-op">.</tt><tt id="link-31" class="py-name"><a title="pyMSA.elementFunctions.getItems" class="py-name" href="#" onclick="return doclink('link-31', 'getItems', 'link-13');">getItems</a></tt><tt class="py-op">(</tt><tt class="py-name">element</tt><tt class="py-op">)</tt><tt class="py-op">[</tt><tt class="py-string">'to'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">-</tt><tt class="py-name">float</tt><tt class="py-op">(</tt><tt id="link-32" class="py-name"><a title="pyMSA.elementFunctions" class="py-name" href="#" onclick="return doclink('link-32', 'elementFunctions', 'link-1');">elementFunctions</a></tt><tt class="py-op">.</tt><tt id="link-33" class="py-name"><a title="pyMSA.elementFunctions.getItems" class="py-name" href="#" onclick="return doclink('link-33', 'getItems', 'link-13');">getItems</a></tt><tt class="py-op">(</tt><tt class="py-name">element</tt><tt class="py-op">)</tt><tt class="py-op">[</tt><tt class="py-string">'from'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">]</tt> <tt class="py-op">=</tt> <tt class="py-name">mzDict</tt><tt class="py-op">[</tt><tt class="py-name">retentionTime</tt><tt class="py-op">]</tt> </tt>
<a name="L158"></a><tt class="py-lineno">158</tt>  <tt class="py-line"> </tt>
<a name="L159"></a><tt class="py-lineno">159</tt>  <tt class="py-line">    <tt class="py-comment">#Create a function to generate a continuous color palette</tt> </tt>
<a name="L160"></a><tt class="py-lineno">160</tt>  <tt class="py-line">    <tt class="py-name">colorPalette</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">[</tt><tt class="py-string">'colorRampPalette'</tt><tt class="py-op">]</tt><tt class="py-op">(</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">StrVector</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt class="py-string">'red'</tt><tt class="py-op">,</tt><tt class="py-string">'blue'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">(</tt><tt class="py-number">10</tt><tt class="py-op">)</tt> </tt>
<a name="L161"></a><tt class="py-lineno">161</tt>  <tt class="py-line">    <tt class="py-comment">#This adds a column of color values</tt> </tt>
<a name="L162"></a><tt class="py-lineno">162</tt>  <tt class="py-line">    <tt class="py-comment"># based on the intensity values</tt> </tt>
<a name="L163"></a><tt class="py-lineno">163</tt>  <tt class="py-line">    <tt class="py-name">colorVector</tt> <tt class="py-op">=</tt> <tt class="py-name">colorPalette</tt> </tt>
<a name="L164"></a><tt class="py-lineno">164</tt>  <tt class="py-line">    <tt class="py-name">changeList</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt>  </tt>
<a name="L165"></a><tt class="py-lineno">165</tt>  <tt class="py-line">    <tt class="py-name">intensityList</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L166"></a><tt class="py-lineno">166</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">changeAndIntensity</tt> <tt class="py-keyword">in</tt> <tt class="py-name">sorted</tt><tt class="py-op">(</tt><tt class="py-name">changeDict</tt><tt class="py-op">.</tt><tt class="py-name">items</tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L167"></a><tt class="py-lineno">167</tt>  <tt class="py-line">        <tt class="py-name">changeList</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-name">changeAndIntensity</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L168"></a><tt class="py-lineno">168</tt>  <tt class="py-line">        <tt class="py-name">intensityList</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-name">changeAndIntensity</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L169"></a><tt class="py-lineno">169</tt>  <tt class="py-line"> </tt>
<a name="L170"></a><tt class="py-lineno">170</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt id="link-34" class="py-name" targets="Function pyMSA.rFunctions.index()=pyMSA.rFunctions-module.html#index"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-34', 'index', 'link-34');">index</a></tt><tt class="py-op">,</tt> <tt class="py-name">item</tt> <tt class="py-keyword">in</tt> <tt class="py-name">enumerate</tt><tt class="py-op">(</tt><tt class="py-name">intensityList</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L171"></a><tt class="py-lineno">171</tt>  <tt class="py-line">        <tt class="py-name">intensityList</tt><tt class="py-op">[</tt><tt id="link-35" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-35', 'index', 'link-34');">index</a></tt><tt class="py-op">]</tt> <tt class="py-op">=</tt> <tt class="py-name">colorPalette</tt><tt class="py-op">[</tt><tt class="py-name">int</tt><tt class="py-op">(</tt><tt id="link-36" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-36', 'rFunctions', 'link-7');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-37" class="py-name" targets="Function pyMSA.rFunctions.takeLog()=pyMSA.rFunctions-module.html#takeLog"><a title="pyMSA.rFunctions.takeLog" class="py-name" href="#" onclick="return doclink('link-37', 'takeLog', 'link-37');">takeLog</a></tt><tt class="py-op">(</tt><tt class="py-name">float</tt><tt class="py-op">(</tt><tt class="py-name">item</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-number">10</tt><tt class="py-op">)</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">]</tt> </tt>
<a name="L172"></a><tt class="py-lineno">172</tt>  <tt class="py-line">     </tt>
<a name="L173"></a><tt class="py-lineno">173</tt>  <tt class="py-line">    <tt class="py-name">colorVector</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">StrVector</tt><tt class="py-op">(</tt><tt class="py-name">intensityList</tt><tt class="py-op">)</tt> </tt>
<a name="L174"></a><tt class="py-lineno">174</tt>  <tt class="py-line">    <tt class="py-name">floatVector</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">FloatVector</tt><tt class="py-op">(</tt><tt class="py-name">changeList</tt><tt class="py-op">)</tt> </tt>
<a name="L175"></a><tt class="py-lineno">175</tt>  <tt class="py-line">    <tt id="link-38" class="py-name"><a title="pyMSA.plots" class="py-name" href="#" onclick="return doclink('link-38', 'plots', 'link-18');">plots</a></tt> <tt class="py-op">=</tt> <tt id="link-39" class="py-name"><a title="pyMSA.rPlotGenerics" class="py-name" href="#" onclick="return doclink('link-39', 'rPlotGenerics', 'link-11');">rPlotGenerics</a></tt><tt class="py-op">.</tt><tt id="link-40" class="py-name"><a title="pyMSA.rPlotGenerics.Plots" class="py-name" href="#" onclick="return doclink('link-40', 'Plots', 'link-20');">Plots</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L176"></a><tt class="py-lineno">176</tt>  <tt class="py-line">    <tt class="py-name">extraInput</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-string">'col'</tt><tt class="py-op">:</tt><tt class="py-name">colorVector</tt><tt class="py-op">,</tt><tt class="py-string">'pch'</tt><tt class="py-op">:</tt><tt class="py-number">20</tt><tt class="py-op">}</tt> </tt>
<a name="L177"></a><tt class="py-lineno">177</tt>  <tt class="py-line">    <tt id="link-41" class="py-name"><a title="pyMSA.plots" class="py-name" href="#" onclick="return doclink('link-41', 'plots', 'link-18');">plots</a></tt><tt class="py-op">.</tt><tt id="link-42" class="py-name"><a title="pyMSA.rPlotGenerics.Plots.plot" class="py-name" href="#" onclick="return doclink('link-42', 'plot', 'link-22');">plot</a></tt><tt class="py-op">(</tt><tt class="py-string">'example_files/output/test plot_trafoXML intensity.png'</tt><tt class="py-op">,</tt><tt class="py-name">floatVector</tt><tt class="py-op">,</tt> <tt class="py-name">width</tt><tt class="py-op">=</tt><tt class="py-number">1000</tt><tt class="py-op">,</tt> <tt class="py-name">height</tt><tt class="py-op">=</tt><tt class="py-number">1000</tt><tt class="py-op">,</tt><tt class="py-name">title</tt><tt class="py-op">=</tt><tt class="py-string">'Change in retention time per feature'</tt><tt class="py-op">,</tt> <tt class="py-name">xlab</tt><tt class="py-op">=</tt><tt class="py-string">'Feature number.'</tt><tt class="py-op">,</tt> <tt class="py-name">ylab</tt><tt class="py-op">=</tt><tt class="py-string">'change in retention time'</tt><tt class="py-op">,</tt> <tt class="py-name">plotArgs</tt><tt class="py-op">=</tt><tt class="py-name">extraInput</tt><tt class="py-op">)</tt> </tt>
</div><a name="L178"></a><tt class="py-lineno">178</tt>  <tt class="py-line"> </tt>
<a name="L179"></a><tt class="py-lineno">179</tt>  <tt class="py-line"> </tt>
<a name="plot_mapped_and_unmapped_intensities"></a><div id="plot_mapped_and_unmapped_intensities-def"><a name="L180"></a><tt class="py-lineno">180</tt> <a class="py-toggle" href="#" id="plot_mapped_and_unmapped_intensities-toggle" onclick="return toggle('plot_mapped_and_unmapped_intensities');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="example_scripts.compare_aligned_features-module.html#plot_mapped_and_unmapped_intensities">plot_mapped_and_unmapped_intensities</a><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="plot_mapped_and_unmapped_intensities-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="plot_mapped_and_unmapped_intensities-expanded"><a name="L181"></a><tt class="py-lineno">181</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L182"></a><tt class="py-lineno">182</tt>  <tt class="py-line"><tt class="py-docstring">    Plot a boxplot of the # of features that map at each intensity.</tt> </tt>
<a name="L183"></a><tt class="py-lineno">183</tt>  <tt class="py-line"><tt class="py-docstring">        </tt> </tt>
<a name="L184"></a><tt class="py-lineno">184</tt>  <tt class="py-line"><tt class="py-docstring">    This example script uses the following classes and functions:</tt> </tt>
<a name="L185"></a><tt class="py-lineno">185</tt>  <tt class="py-line"><tt class="py-docstring">        - L{featureMapping.Map}</tt> </tt>
<a name="L186"></a><tt class="py-lineno">186</tt>  <tt class="py-line"><tt class="py-docstring">        - L{featureMapping.Map.unmappedIntensities}</tt> </tt>
<a name="L187"></a><tt class="py-lineno">187</tt>  <tt class="py-line"><tt class="py-docstring">        - L{featureMapping.Map.mappedIntensities}</tt> </tt>
<a name="L188"></a><tt class="py-lineno">188</tt>  <tt class="py-line"><tt class="py-docstring">        - L{rPlots.PlotGenerics.boxplotDataframe}</tt> </tt>
<a name="L189"></a><tt class="py-lineno">189</tt>  <tt class="py-line"><tt class="py-docstring">        - L{parseFeatureXML.Reader}</tt> </tt>
<a name="L190"></a><tt class="py-lineno">190</tt>  <tt class="py-line"><tt class="py-docstring">        - L{rFunctions.takeLog}</tt> </tt>
<a name="L191"></a><tt class="py-lineno">191</tt>  <tt class="py-line"><tt class="py-docstring">        - L{rFunctions.fillNA}</tt> </tt>
<a name="L192"></a><tt class="py-lineno">192</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L193"></a><tt class="py-lineno">193</tt>  <tt class="py-line"><tt class="py-docstring">    B{Example:}</tt> </tt>
<a name="L194"></a><tt class="py-lineno">194</tt>  <tt class="py-line"><tt class="py-docstring">    </tt> </tt>
<a name="L195"></a><tt class="py-lineno">195</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import featureMapping as fm</tt> </tt>
<a name="L196"></a><tt class="py-lineno">196</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import parseFeatureXML</tt> </tt>
<a name="L197"></a><tt class="py-lineno">197</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; from pyMSA import rPlots</tt> </tt>
<a name="L198"></a><tt class="py-lineno">198</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; featureXML_1 = parseFeatureXML.Reader('/homes/ndeklein/Doreen data/featureXML/JG_TiO2_C2_01.featureXML')            </tt> </tt>
<a name="L199"></a><tt class="py-lineno">199</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; featureXML_2 = parseFeatureXML.Reader('/homes/ndeklein/Doreen data/featureXML/JG_TiO2_C2_01A.featureXML')</tt> </tt>
<a name="L200"></a><tt class="py-lineno">200</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; featuremap = featureMapping.Map(featureXML_1, featureXML_2, '/homes/ndeklein/Doreen data/trafoXML/JG_TiO2-C2_01-C2_01A-file_1.trafoXML')</tt> </tt>
<a name="L201"></a><tt class="py-lineno">201</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; unmapped_1, unmapped_2 = featureamap.unmappedIntensities()    </tt> </tt>
<a name="L202"></a><tt class="py-lineno">202</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; mapped_1, mapped_2 = featuremap.mappedIntensities()  </tt> </tt>
<a name="L203"></a><tt class="py-lineno">203</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; maxLength = len(max([unmapped_1, unmapped_2, mapped_1, mapped_2], key = len))</tt> </tt>
<a name="L204"></a><tt class="py-lineno">204</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; unmappedVector_1 = rFunctions.takeLog(R.FloatVector(rFunctions.fillNA(unmapped_1, maxLength-len(unmapped_1),'na_real')),10)</tt> </tt>
<a name="L205"></a><tt class="py-lineno">205</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; unmappedVector_2 = rFunctions.takeLog(R.FloatVector(rFunctions.fillNA(unmapped_2, maxLength-len(unmapped_2), 'na_real')),10)</tt> </tt>
<a name="L206"></a><tt class="py-lineno">206</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; mappedVector_1 = rFunctions.takeLog(R.FloatVector(rFunctions.fillNA(mapped_1, maxLength-len(mapped_1),'na_real')),10)</tt> </tt>
<a name="L207"></a><tt class="py-lineno">207</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; mappedVector_2 = rFunctions.takeLog(R.FloatVector(rFunctions.fillNA(mapped_2, maxLength-len(mapped_2), 'na_real')),10)</tt> </tt>
<a name="L208"></a><tt class="py-lineno">208</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; dataDict = {'not aligned file 1':unmappedVector_1, 'not aligned file 2':unmappedVector_2,</tt> </tt>
<a name="L209"></a><tt class="py-lineno">209</tt>  <tt class="py-line"><tt class="py-docstring">    ...            'aligned file 1':mappedVector_1, 'aligned file 2':mappedVector_2}</tt> </tt>
<a name="L210"></a><tt class="py-lineno">210</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; dataframe = R.DataFrame(dataDict)    </tt> </tt>
<a name="L211"></a><tt class="py-lineno">211</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; plots = rPlots.Plots()</tt> </tt>
<a name="L212"></a><tt class="py-lineno">212</tt>  <tt class="py-line"><tt class="py-docstring">    &gt;&gt;&gt; plots.boxplotDataframe('example_files/output/intensity_of_mapped_and_unmapped.png', dataframe, title='Intensity of each aligned or non-aligned feature of two mapped featureXML files',</tt> </tt>
<a name="L213"></a><tt class="py-lineno">213</tt>  <tt class="py-line"><tt class="py-docstring">    ...                        xlab='', ylab='intensity of each feature', width=600, height=600)</tt> </tt>
<a name="L214"></a><tt class="py-lineno">214</tt>  <tt class="py-line"><tt class="py-docstring">                   </tt> </tt>
<a name="L215"></a><tt class="py-lineno">215</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L216"></a><tt class="py-lineno">216</tt>  <tt class="py-line">    <tt class="py-comment"># reading the necesarry files</tt> </tt>
<a name="L217"></a><tt class="py-lineno">217</tt>  <tt class="py-line">    <tt class="py-name">featureXML_1</tt> <tt class="py-op">=</tt> <tt id="link-43" class="py-name"><a title="pyMSA.parseFeatureXML" class="py-name" href="#" onclick="return doclink('link-43', 'parseFeatureXML', 'link-3');">parseFeatureXML</a></tt><tt class="py-op">.</tt><tt id="link-44" class="py-name"><a title="pyMSA.parseFeatureXML.Reader
pyMSA.parseMascot.Reader
pyMSA.parsePeaksMzML.Reader" class="py-name" href="#" onclick="return doclink('link-44', 'Reader', 'link-24');">Reader</a></tt><tt class="py-op">(</tt><tt class="py-string">'/homes/ndeklein/Doreen data/featureXML/JG_TiO2_C2_01.featureXML'</tt><tt class="py-op">)</tt>             </tt>
<a name="L218"></a><tt class="py-lineno">218</tt>  <tt class="py-line">    <tt class="py-name">featureXML_2</tt> <tt class="py-op">=</tt> <tt id="link-45" class="py-name"><a title="pyMSA.parseFeatureXML" class="py-name" href="#" onclick="return doclink('link-45', 'parseFeatureXML', 'link-3');">parseFeatureXML</a></tt><tt class="py-op">.</tt><tt id="link-46" class="py-name"><a title="pyMSA.parseFeatureXML.Reader
pyMSA.parseMascot.Reader
pyMSA.parsePeaksMzML.Reader" class="py-name" href="#" onclick="return doclink('link-46', 'Reader', 'link-24');">Reader</a></tt><tt class="py-op">(</tt><tt class="py-string">'/homes/ndeklein/Doreen data/featureXML/JG_TiO2_C2_01A.featureXML'</tt><tt class="py-op">)</tt> </tt>
<a name="L219"></a><tt class="py-lineno">219</tt>  <tt class="py-line">     </tt>
<a name="L220"></a><tt class="py-lineno">220</tt>  <tt class="py-line">    <tt class="py-comment"># getting the FeatureMappingQuality instance</tt> </tt>
<a name="L221"></a><tt class="py-lineno">221</tt>  <tt class="py-line">    <tt class="py-name">featuremap</tt> <tt class="py-op">=</tt> <tt id="link-47" class="py-name"><a title="pyMSA.featureMapping" class="py-name" href="#" onclick="return doclink('link-47', 'featureMapping', 'link-9');">featureMapping</a></tt><tt class="py-op">.</tt><tt id="link-48" class="py-name" targets="Class pyMSA.featureMapping.Map=pyMSA.featureMapping.Map-class.html"><a title="pyMSA.featureMapping.Map" class="py-name" href="#" onclick="return doclink('link-48', 'Map', 'link-48');">Map</a></tt><tt class="py-op">(</tt><tt class="py-name">featureXML_1</tt><tt class="py-op">,</tt> <tt class="py-name">featureXML_2</tt><tt class="py-op">,</tt> <tt class="py-string">'/homes/ndeklein/Doreen data/trafoXML/JG_TiO2-C2_01-C2_01A-file_1.trafoXML'</tt><tt class="py-op">)</tt> </tt>
<a name="L222"></a><tt class="py-lineno">222</tt>  <tt class="py-line">    <tt class="py-comment"># getting lists of the mapped and unmapped intensities</tt> </tt>
<a name="L223"></a><tt class="py-lineno">223</tt>  <tt class="py-line">    <tt class="py-name">unmapped_1</tt><tt class="py-op">,</tt> <tt class="py-name">unmapped_2</tt> <tt class="py-op">=</tt> <tt class="py-name">featuremap</tt><tt class="py-op">.</tt><tt id="link-49" class="py-name" targets="Method pyMSA.featureMapping.Map.unmappedIntensities()=pyMSA.featureMapping.Map-class.html#unmappedIntensities"><a title="pyMSA.featureMapping.Map.unmappedIntensities" class="py-name" href="#" onclick="return doclink('link-49', 'unmappedIntensities', 'link-49');">unmappedIntensities</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt>     </tt>
<a name="L224"></a><tt class="py-lineno">224</tt>  <tt class="py-line">    <tt class="py-name">mapped_1</tt><tt class="py-op">,</tt> <tt class="py-name">mapped_2</tt> <tt class="py-op">=</tt> <tt class="py-name">featuremap</tt><tt class="py-op">.</tt><tt id="link-50" class="py-name" targets="Method pyMSA.featureMapping.Map.mappedIntensities()=pyMSA.featureMapping.Map-class.html#mappedIntensities"><a title="pyMSA.featureMapping.Map.mappedIntensities" class="py-name" href="#" onclick="return doclink('link-50', 'mappedIntensities', 'link-50');">mappedIntensities</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt>   </tt>
<a name="L225"></a><tt class="py-lineno">225</tt>  <tt class="py-line">     </tt>
<a name="L226"></a><tt class="py-lineno">226</tt>  <tt class="py-line">    <tt class="py-comment"># get the length of the longest list, used for adding NA vlaues later</tt> </tt>
<a name="L227"></a><tt class="py-lineno">227</tt>  <tt class="py-line">    <tt class="py-name">maxLength</tt> <tt class="py-op">=</tt> <tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">max</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt class="py-name">unmapped_1</tt><tt class="py-op">,</tt> <tt class="py-name">unmapped_2</tt><tt class="py-op">,</tt> <tt class="py-name">mapped_1</tt><tt class="py-op">,</tt> <tt class="py-name">mapped_2</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-name">key</tt> <tt class="py-op">=</tt> <tt class="py-name">len</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L228"></a><tt class="py-lineno">228</tt>  <tt class="py-line">     </tt>
<a name="L229"></a><tt class="py-lineno">229</tt>  <tt class="py-line">    <tt class="py-comment"># making the vectors to go in the dataframe. Log 10 is taken of all intensities in the list. rFunctions.fillNA makes sure that all</tt> </tt>
<a name="L230"></a><tt class="py-lineno">230</tt>  <tt class="py-line">    <tt class="py-comment"># vectors are of the same length before adding them to the dataframe</tt> </tt>
<a name="L231"></a><tt class="py-lineno">231</tt>  <tt class="py-line">    <tt class="py-name">unmappedVector_1</tt> <tt class="py-op">=</tt> <tt id="link-51" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-51', 'rFunctions', 'link-7');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-52" class="py-name"><a title="pyMSA.rFunctions.takeLog" class="py-name" href="#" onclick="return doclink('link-52', 'takeLog', 'link-37');">takeLog</a></tt><tt class="py-op">(</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">FloatVector</tt><tt class="py-op">(</tt><tt id="link-53" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-53', 'rFunctions', 'link-7');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-54" class="py-name" targets="Function pyMSA.rFunctions.fillNA()=pyMSA.rFunctions-module.html#fillNA"><a title="pyMSA.rFunctions.fillNA" class="py-name" href="#" onclick="return doclink('link-54', 'fillNA', 'link-54');">fillNA</a></tt><tt class="py-op">(</tt><tt class="py-name">unmapped_1</tt><tt class="py-op">,</tt> <tt class="py-name">maxLength</tt><tt class="py-op">-</tt><tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">unmapped_1</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-string">'na_real'</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-number">10</tt><tt class="py-op">)</tt> </tt>
<a name="L232"></a><tt class="py-lineno">232</tt>  <tt class="py-line">    <tt class="py-name">unmappedVector_2</tt> <tt class="py-op">=</tt> <tt id="link-55" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-55', 'rFunctions', 'link-7');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-56" class="py-name"><a title="pyMSA.rFunctions.takeLog" class="py-name" href="#" onclick="return doclink('link-56', 'takeLog', 'link-37');">takeLog</a></tt><tt class="py-op">(</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">FloatVector</tt><tt class="py-op">(</tt><tt id="link-57" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-57', 'rFunctions', 'link-7');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-58" class="py-name"><a title="pyMSA.rFunctions.fillNA" class="py-name" href="#" onclick="return doclink('link-58', 'fillNA', 'link-54');">fillNA</a></tt><tt class="py-op">(</tt><tt class="py-name">unmapped_2</tt><tt class="py-op">,</tt> <tt class="py-name">maxLength</tt><tt class="py-op">-</tt><tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">unmapped_2</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'na_real'</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-number">10</tt><tt class="py-op">)</tt> </tt>
<a name="L233"></a><tt class="py-lineno">233</tt>  <tt class="py-line">    <tt class="py-name">mappedVector_1</tt> <tt class="py-op">=</tt> <tt id="link-59" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-59', 'rFunctions', 'link-7');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-60" class="py-name"><a title="pyMSA.rFunctions.takeLog" class="py-name" href="#" onclick="return doclink('link-60', 'takeLog', 'link-37');">takeLog</a></tt><tt class="py-op">(</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">FloatVector</tt><tt class="py-op">(</tt><tt id="link-61" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-61', 'rFunctions', 'link-7');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-62" class="py-name"><a title="pyMSA.rFunctions.fillNA" class="py-name" href="#" onclick="return doclink('link-62', 'fillNA', 'link-54');">fillNA</a></tt><tt class="py-op">(</tt><tt class="py-name">mapped_1</tt><tt class="py-op">,</tt> <tt class="py-name">maxLength</tt><tt class="py-op">-</tt><tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">mapped_1</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-string">'na_real'</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-number">10</tt><tt class="py-op">)</tt> </tt>
<a name="L234"></a><tt class="py-lineno">234</tt>  <tt class="py-line">    <tt class="py-name">mappedVector_2</tt> <tt class="py-op">=</tt> <tt id="link-63" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-63', 'rFunctions', 'link-7');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-64" class="py-name"><a title="pyMSA.rFunctions.takeLog" class="py-name" href="#" onclick="return doclink('link-64', 'takeLog', 'link-37');">takeLog</a></tt><tt class="py-op">(</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">FloatVector</tt><tt class="py-op">(</tt><tt id="link-65" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-65', 'rFunctions', 'link-7');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-66" class="py-name"><a title="pyMSA.rFunctions.fillNA" class="py-name" href="#" onclick="return doclink('link-66', 'fillNA', 'link-54');">fillNA</a></tt><tt class="py-op">(</tt><tt class="py-name">mapped_2</tt><tt class="py-op">,</tt> <tt class="py-name">maxLength</tt><tt class="py-op">-</tt><tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">mapped_2</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'na_real'</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-number">10</tt><tt class="py-op">)</tt> </tt>
<a name="L235"></a><tt class="py-lineno">235</tt>  <tt class="py-line">     </tt>
<a name="L236"></a><tt class="py-lineno">236</tt>  <tt class="py-line">     </tt>
<a name="L237"></a><tt class="py-lineno">237</tt>  <tt class="py-line">    <tt class="py-name">dataDict</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-string">'not aligned file 1'</tt><tt class="py-op">:</tt><tt class="py-name">unmappedVector_1</tt><tt class="py-op">,</tt> <tt class="py-string">'not aligned file 2'</tt><tt class="py-op">:</tt><tt class="py-name">unmappedVector_2</tt><tt class="py-op">,</tt> </tt>
<a name="L238"></a><tt class="py-lineno">238</tt>  <tt class="py-line">                <tt class="py-string">'aligned file 1'</tt><tt class="py-op">:</tt><tt class="py-name">mappedVector_1</tt><tt class="py-op">,</tt> <tt class="py-string">'aligned file 2'</tt><tt class="py-op">:</tt><tt class="py-name">mappedVector_2</tt><tt class="py-op">}</tt> </tt>
<a name="L239"></a><tt class="py-lineno">239</tt>  <tt class="py-line">    <tt class="py-name">dataframe</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">DataFrame</tt><tt class="py-op">(</tt><tt class="py-name">dataDict</tt><tt class="py-op">)</tt>     </tt>
<a name="L240"></a><tt class="py-lineno">240</tt>  <tt class="py-line">     </tt>
<a name="L241"></a><tt class="py-lineno">241</tt>  <tt class="py-line">    <tt id="link-67" class="py-name"><a title="pyMSA.plots" class="py-name" href="#" onclick="return doclink('link-67', 'plots', 'link-18');">plots</a></tt> <tt class="py-op">=</tt> <tt id="link-68" class="py-name"><a title="pyMSA.rPlotGenerics" class="py-name" href="#" onclick="return doclink('link-68', 'rPlotGenerics', 'link-11');">rPlotGenerics</a></tt><tt class="py-op">.</tt><tt id="link-69" class="py-name"><a title="pyMSA.rPlotGenerics.Plots" class="py-name" href="#" onclick="return doclink('link-69', 'Plots', 'link-20');">Plots</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L242"></a><tt class="py-lineno">242</tt>  <tt class="py-line">    <tt id="link-70" class="py-name"><a title="pyMSA.plots" class="py-name" href="#" onclick="return doclink('link-70', 'plots', 'link-18');">plots</a></tt><tt class="py-op">.</tt><tt id="link-71" class="py-name" targets="Method pyMSA.rPlotGenerics.Plots.boxplotDataframe()=pyMSA.rPlotGenerics.Plots-class.html#boxplotDataframe"><a title="pyMSA.rPlotGenerics.Plots.boxplotDataframe" class="py-name" href="#" onclick="return doclink('link-71', 'boxplotDataframe', 'link-71');">boxplotDataframe</a></tt><tt class="py-op">(</tt><tt class="py-string">'example_files/output/intensity_of_mapped_and_unmapped.png'</tt><tt class="py-op">,</tt> <tt class="py-name">dataframe</tt><tt class="py-op">,</tt> <tt class="py-name">title</tt><tt class="py-op">=</tt><tt class="py-string">'Intensity of each aligned or non-aligned feature of two mapped featureXML files'</tt><tt class="py-op">,</tt> </tt>
<a name="L243"></a><tt class="py-lineno">243</tt>  <tt class="py-line">                    <tt class="py-name">xlab</tt><tt class="py-op">=</tt><tt class="py-string">''</tt><tt class="py-op">,</tt> <tt class="py-name">ylab</tt><tt class="py-op">=</tt><tt class="py-string">'intensity'</tt><tt class="py-op">,</tt> <tt class="py-name">width</tt><tt class="py-op">=</tt><tt class="py-number">600</tt><tt class="py-op">,</tt> <tt class="py-name">height</tt><tt class="py-op">=</tt><tt class="py-number">600</tt><tt class="py-op">)</tt> </tt>
</div><a name="L244"></a><tt class="py-lineno">244</tt>  <tt class="py-line">                    </tt>
<a name="L245"></a><tt class="py-lineno">245</tt>  <tt class="py-line">  </tt>
<a name="L246"></a><tt class="py-lineno">246</tt>  <tt class="py-line"><tt class="py-keyword">if</tt> <tt class="py-name">__name__</tt> <tt class="py-op">==</tt> <tt class="py-string">'__main__'</tt><tt class="py-op">:</tt> </tt>
<a name="L247"></a><tt class="py-lineno">247</tt>  <tt class="py-line">    <tt id="link-72" class="py-name" targets="Function example_scripts.compare_aligned_features.plot_trafoXML()=example_scripts.compare_aligned_features-module.html#plot_trafoXML"><a title="example_scripts.compare_aligned_features.plot_trafoXML" class="py-name" href="#" onclick="return doclink('link-72', 'plot_trafoXML', 'link-72');">plot_trafoXML</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L248"></a><tt class="py-lineno">248</tt>  <tt class="py-line">    <tt id="link-73" class="py-name" targets="Function example_scripts.compare_aligned_features.plot_trafoXML_plusFeatureIntensity()=example_scripts.compare_aligned_features-module.html#plot_trafoXML_plusFeatureIntensity"><a title="example_scripts.compare_aligned_features.plot_trafoXML_plusFeatureIntensity" class="py-name" href="#" onclick="return doclink('link-73', 'plot_trafoXML_plusFeatureIntensity', 'link-73');">plot_trafoXML_plusFeatureIntensity</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L249"></a><tt class="py-lineno">249</tt>  <tt class="py-line">    <tt id="link-74" class="py-name" targets="Function example_scripts.compare_aligned_features.plot_mapped_and_unmapped_intensities()=example_scripts.compare_aligned_features-module.html#plot_mapped_and_unmapped_intensities"><a title="example_scripts.compare_aligned_features.plot_mapped_and_unmapped_intensities" class="py-name" href="#" onclick="return doclink('link-74', 'plot_mapped_and_unmapped_intensities', 'link-74');">plot_mapped_and_unmapped_intensities</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L250"></a><tt class="py-lineno">250</tt>  <tt class="py-line"> </tt><script type="text/javascript">
<!--
expandto(location.href);
// -->
</script>
</pre>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0.1 on Tue Jun  5 15:10:35 2012
    </td>
    <td align="right" class="footer">
      <a target="mainFrame" href="http://epydoc.sourceforge.net"
        >http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie();
  // -->
</script>
</body>
</html>
