<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>pyMSA.test.test_rFunctions</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        <a href="pyMSA-module.html">Package&nbsp;pyMSA</a> ::
        <a href="pyMSA.test-module.html">Package&nbsp;test</a> ::
        Module&nbsp;test_rFunctions
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="pyMSA.test.test_rFunctions-pysrc.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<h1 class="epydoc">Source Code for <a href="pyMSA.test.test_rFunctions-module.html">Module pyMSA.test.test_rFunctions</a></h1>
<pre class="py-src">
<a name="L1"></a><tt class="py-lineno">  1</tt>  <tt class="py-line"><tt class="py-comment"># Copyright (c) 2012 - N.P. de Klein</tt> </tt>
<a name="L2"></a><tt class="py-lineno">  2</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L3"></a><tt class="py-lineno">  3</tt>  <tt class="py-line"><tt class="py-comment">#     This file is part of Python Mass Spec Analyzer (PyMSA).</tt> </tt>
<a name="L4"></a><tt class="py-lineno">  4</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L5"></a><tt class="py-lineno">  5</tt>  <tt class="py-line"><tt class="py-comment">#     Python Mass Spec Analyzer (PyMSA) is free software: you can redistribute it and/or modify</tt> </tt>
<a name="L6"></a><tt class="py-lineno">  6</tt>  <tt class="py-line"><tt class="py-comment">#     it under the terms of the GNU General Public License as published by</tt> </tt>
<a name="L7"></a><tt class="py-lineno">  7</tt>  <tt class="py-line"><tt class="py-comment">#     the Free Software Foundation, either version 3 of the License, or</tt> </tt>
<a name="L8"></a><tt class="py-lineno">  8</tt>  <tt class="py-line"><tt class="py-comment">#     (at your option) any later version.</tt> </tt>
<a name="L9"></a><tt class="py-lineno">  9</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L10"></a><tt class="py-lineno"> 10</tt>  <tt class="py-line"><tt class="py-comment">#     Python Mass Spec Analyzer (PyMSA) is distributed in the hope that it will be useful,</tt> </tt>
<a name="L11"></a><tt class="py-lineno"> 11</tt>  <tt class="py-line"><tt class="py-comment">#     but WITHOUT ANY WARRANTY; without even the implied warranty of</tt> </tt>
<a name="L12"></a><tt class="py-lineno"> 12</tt>  <tt class="py-line"><tt class="py-comment">#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</tt> </tt>
<a name="L13"></a><tt class="py-lineno"> 13</tt>  <tt class="py-line"><tt class="py-comment">#     GNU General Public License for more details.</tt> </tt>
<a name="L14"></a><tt class="py-lineno"> 14</tt>  <tt class="py-line"><tt class="py-comment">#</tt> </tt>
<a name="L15"></a><tt class="py-lineno"> 15</tt>  <tt class="py-line"><tt class="py-comment">#     You should have received a copy of the GNU General Public License</tt> </tt>
<a name="L16"></a><tt class="py-lineno"> 16</tt>  <tt class="py-line"><tt class="py-comment">#     along with Python Mass Spec Analyzer (PyMSA).  If not, see &lt;http://www.gnu.org/licenses/&gt;.")</tt> </tt>
<a name="L17"></a><tt class="py-lineno"> 17</tt>  <tt class="py-line"> </tt>
<a name="L18"></a><tt class="py-lineno"> 18</tt>  <tt class="py-line"><tt class="py-docstring">"""</tt> </tt>
<a name="L19"></a><tt class="py-lineno"> 19</tt>  <tt class="py-line"><tt class="py-docstring">Unit test of rFunctions.py</tt> </tt>
<a name="L20"></a><tt class="py-lineno"> 20</tt>  <tt class="py-line"><tt class="py-docstring">"""</tt> </tt>
<a name="L21"></a><tt class="py-lineno"> 21</tt>  <tt class="py-line"> </tt>
<a name="L22"></a><tt class="py-lineno"> 22</tt>  <tt class="py-line"><tt class="py-comment"># author: ndeklein</tt> </tt>
<a name="L23"></a><tt class="py-lineno"> 23</tt>  <tt class="py-line"><tt class="py-comment"># date:10/02/2012</tt> </tt>
<a name="L24"></a><tt class="py-lineno"> 24</tt>  <tt class="py-line"><tt class="py-comment"># summary: Unit testing functionality of the rFunctions.py script</tt> </tt>
<a name="L25"></a><tt class="py-lineno"> 25</tt>  <tt class="py-line"> </tt>
<a name="L26"></a><tt class="py-lineno"> 26</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">sys</tt> </tt>
<a name="L27"></a><tt class="py-lineno"> 27</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">os</tt> </tt>
<a name="L28"></a><tt class="py-lineno"> 28</tt>  <tt class="py-line"><tt class="py-comment"># to be able to import unittest2 from a locally installed unittest2     * REMOVE WHEN SENDING TO OTHER USERS *</tt> </tt>
<a name="L29"></a><tt class="py-lineno"> 29</tt>  <tt class="py-line"><tt class="py-keyword">try</tt><tt class="py-op">:</tt> </tt>
<a name="L30"></a><tt class="py-lineno"> 30</tt>  <tt class="py-line">    <tt class="py-name">sys</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-string">'/homes/ndeklein/python2.6/site-packages'</tt><tt class="py-op">)</tt> </tt>
<a name="L31"></a><tt class="py-lineno"> 31</tt>  <tt class="py-line"><tt class="py-keyword">except</tt><tt class="py-op">:</tt> </tt>
<a name="L32"></a><tt class="py-lineno"> 32</tt>  <tt class="py-line">    <tt class="py-keyword">pass</tt><tt class="py-comment"># some magic to import from pyMS. dirname(dirname(__file__)) gets the two directories closer to the root.</tt> </tt>
<a name="L33"></a><tt class="py-lineno"> 33</tt>  <tt class="py-line"><tt class="py-comment"># this is so that pyMS is added to the pythonpath and you can do import rFunctions.py</tt> </tt>
<a name="L34"></a><tt class="py-lineno"> 34</tt>  <tt class="py-line"><tt class="py-comment"># if this is made in a package from pyMS import rFunctions should also work</tt> </tt>
<a name="L35"></a><tt class="py-lineno"> 35</tt>  <tt class="py-line"><tt class="py-name">dirname</tt> <tt class="py-op">=</tt> <tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">dirname</tt> </tt>
<a name="L36"></a><tt class="py-lineno"> 36</tt>  <tt class="py-line"><tt class="py-name">sys</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">join</tt><tt class="py-op">(</tt><tt class="py-name">dirname</tt><tt class="py-op">(</tt><tt class="py-name">dirname</tt><tt class="py-op">(</tt><tt class="py-name">__file__</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L37"></a><tt class="py-lineno"> 37</tt>  <tt class="py-line"> </tt>
<a name="L38"></a><tt class="py-lineno"> 38</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt id="link-0" class="py-name" targets="Module pyMSA.config=pyMSA.config-module.html,Variable pyMSA.output.config=pyMSA.output-module.html#config,Variable pyMSA.test.test_compareFeatureXMLmzML.config=pyMSA.test.test_compareFeatureXMLmzML-module.html#config,Variable pyMSA.test.test_compareRuns.config=pyMSA.test.test_compareRuns-module.html#config,Variable pyMSA.test.test_database.config=pyMSA.test.test_database-module.html#config,Variable pyMSA.test.test_elementFunctions.config=pyMSA.test.test_elementFunctions-module.html#config,Variable pyMSA.test.test_featureFunctions.config=pyMSA.test.test_featureFunctions-module.html#config,Variable pyMSA.test.test_featureMapping.config=pyMSA.test.test_featureMapping-module.html#config,Variable pyMSA.test.test_fileHandling.config=pyMSA.test.test_fileHandling-module.html#config,Variable pyMSA.test.test_fillDatabase.config=pyMSA.test.test_fillDatabase-module.html#config,Variable pyMSA.test.test_getWindow.config=pyMSA.test.test_getWindow-module.html#config,Variable pyMSA.test.test_mzmlFunctions.config=pyMSA.test.test_mzmlFunctions-module.html#config,Variable pyMSA.test.test_output.config=pyMSA.test.test_output-module.html#config,Variable pyMSA.test.test_parseFeatureXML.config=pyMSA.test.test_parseFeatureXML-module.html#config,Variable pyMSA.test.test_parseMascot.config=pyMSA.test.test_parseMascot-module.html#config,Variable pyMSA.test.test_parsePeaksMzML.config=pyMSA.test.test_parsePeaksMzML-module.html#config,Variable pyMSA.test.test_plots.config=pyMSA.test.test_plots-module.html#config,Variable pyMSA.test.test_rFunctions.config=pyMSA.test.test_rFunctions-module.html#config,Variable pyMSA.test.test_rPlotGenerics.config=pyMSA.test.test_rPlotGenerics-module.html#config"><a title="pyMSA.config
pyMSA.output.config
pyMSA.test.test_compareFeatureXMLmzML.config
pyMSA.test.test_compareRuns.config
pyMSA.test.test_database.config
pyMSA.test.test_elementFunctions.config
pyMSA.test.test_featureFunctions.config
pyMSA.test.test_featureMapping.config
pyMSA.test.test_fileHandling.config
pyMSA.test.test_fillDatabase.config
pyMSA.test.test_getWindow.config
pyMSA.test.test_mzmlFunctions.config
pyMSA.test.test_output.config
pyMSA.test.test_parseFeatureXML.config
pyMSA.test.test_parseMascot.config
pyMSA.test.test_parsePeaksMzML.config
pyMSA.test.test_plots.config
pyMSA.test.test_rFunctions.config
pyMSA.test.test_rPlotGenerics.config" class="py-name" href="#" onclick="return doclink('link-0', 'config', 'link-0');">config</a></tt> </tt>
<a name="L39"></a><tt class="py-lineno"> 39</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt id="link-1" class="py-name" targets="Module pyMSA.rFunctions=pyMSA.rFunctions-module.html"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-1', 'rFunctions', 'link-1');">rFunctions</a></tt> </tt>
<a name="L40"></a><tt class="py-lineno"> 40</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">rpy2</tt><tt class="py-op">.</tt><tt class="py-name">robjects</tt> <tt class="py-keyword">as</tt> <tt class="py-name">R</tt> </tt>
<a name="L41"></a><tt class="py-lineno"> 41</tt>  <tt class="py-line"> </tt>
<a name="L42"></a><tt class="py-lineno"> 42</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">unittest2</tt> <tt class="py-keyword">as</tt> <tt class="py-name">unittest</tt> </tt>
<a name="L43"></a><tt class="py-lineno"> 43</tt>  <tt class="py-line"> </tt>
<a name="L44"></a><tt class="py-lineno"> 44</tt>  <tt class="py-line"> </tt>
<a name="L45"></a><tt class="py-lineno"> 45</tt>  <tt class="py-line"><tt id="link-2" class="py-name" targets="Variable pyMSA.output.configHandle=pyMSA.output-module.html#configHandle,Variable pyMSA.test.test_compareFeatureXMLmzML.configHandle=pyMSA.test.test_compareFeatureXMLmzML-module.html#configHandle,Variable pyMSA.test.test_compareRuns.configHandle=pyMSA.test.test_compareRuns-module.html#configHandle,Variable pyMSA.test.test_database.configHandle=pyMSA.test.test_database-module.html#configHandle,Variable pyMSA.test.test_elementFunctions.configHandle=pyMSA.test.test_elementFunctions-module.html#configHandle,Variable pyMSA.test.test_featureFunctions.configHandle=pyMSA.test.test_featureFunctions-module.html#configHandle,Variable pyMSA.test.test_featureMapping.configHandle=pyMSA.test.test_featureMapping-module.html#configHandle,Variable pyMSA.test.test_fileHandling.configHandle=pyMSA.test.test_fileHandling-module.html#configHandle,Variable pyMSA.test.test_fillDatabase.configHandle=pyMSA.test.test_fillDatabase-module.html#configHandle,Variable pyMSA.test.test_getWindow.configHandle=pyMSA.test.test_getWindow-module.html#configHandle,Variable pyMSA.test.test_mzmlFunctions.configHandle=pyMSA.test.test_mzmlFunctions-module.html#configHandle,Variable pyMSA.test.test_output.configHandle=pyMSA.test.test_output-module.html#configHandle,Variable pyMSA.test.test_parseFeatureXML.configHandle=pyMSA.test.test_parseFeatureXML-module.html#configHandle,Variable pyMSA.test.test_parseMascot.configHandle=pyMSA.test.test_parseMascot-module.html#configHandle,Variable pyMSA.test.test_parsePeaksMzML.configHandle=pyMSA.test.test_parsePeaksMzML-module.html#configHandle,Variable pyMSA.test.test_plots.configHandle=pyMSA.test.test_plots-module.html#configHandle,Variable pyMSA.test.test_rFunctions.configHandle=pyMSA.test.test_rFunctions-module.html#configHandle,Variable pyMSA.test.test_rPlotGenerics.configHandle=pyMSA.test.test_rPlotGenerics-module.html#configHandle"><a title="pyMSA.output.configHandle
pyMSA.test.test_compareFeatureXMLmzML.configHandle
pyMSA.test.test_compareRuns.configHandle
pyMSA.test.test_database.configHandle
pyMSA.test.test_elementFunctions.configHandle
pyMSA.test.test_featureFunctions.configHandle
pyMSA.test.test_featureMapping.configHandle
pyMSA.test.test_fileHandling.configHandle
pyMSA.test.test_fillDatabase.configHandle
pyMSA.test.test_getWindow.configHandle
pyMSA.test.test_mzmlFunctions.configHandle
pyMSA.test.test_output.configHandle
pyMSA.test.test_parseFeatureXML.configHandle
pyMSA.test.test_parseMascot.configHandle
pyMSA.test.test_parsePeaksMzML.configHandle
pyMSA.test.test_plots.configHandle
pyMSA.test.test_rFunctions.configHandle
pyMSA.test.test_rPlotGenerics.configHandle" class="py-name" href="#" onclick="return doclink('link-2', 'configHandle', 'link-2');">configHandle</a></tt> <tt class="py-op">=</tt>  <tt id="link-3" class="py-name"><a title="pyMSA.config
pyMSA.output.config
pyMSA.test.test_compareFeatureXMLmzML.config
pyMSA.test.test_compareRuns.config
pyMSA.test.test_database.config
pyMSA.test.test_elementFunctions.config
pyMSA.test.test_featureFunctions.config
pyMSA.test.test_featureMapping.config
pyMSA.test.test_fileHandling.config
pyMSA.test.test_fillDatabase.config
pyMSA.test.test_getWindow.config
pyMSA.test.test_mzmlFunctions.config
pyMSA.test.test_output.config
pyMSA.test.test_parseFeatureXML.config
pyMSA.test.test_parseMascot.config
pyMSA.test.test_parsePeaksMzML.config
pyMSA.test.test_plots.config
pyMSA.test.test_rFunctions.config
pyMSA.test.test_rPlotGenerics.config" class="py-name" href="#" onclick="return doclink('link-3', 'config', 'link-0');">config</a></tt><tt class="py-op">.</tt><tt id="link-4" class="py-name" targets="Class pyMSA.config.ConfigHandle=pyMSA.config.ConfigHandle-class.html"><a title="pyMSA.config.ConfigHandle" class="py-name" href="#" onclick="return doclink('link-4', 'ConfigHandle', 'link-4');">ConfigHandle</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L46"></a><tt class="py-lineno"> 46</tt>  <tt class="py-line"><tt id="link-5" class="py-name"><a title="pyMSA.config
pyMSA.output.config
pyMSA.test.test_compareFeatureXMLmzML.config
pyMSA.test.test_compareRuns.config
pyMSA.test.test_database.config
pyMSA.test.test_elementFunctions.config
pyMSA.test.test_featureFunctions.config
pyMSA.test.test_featureMapping.config
pyMSA.test.test_fileHandling.config
pyMSA.test.test_fillDatabase.config
pyMSA.test.test_getWindow.config
pyMSA.test.test_mzmlFunctions.config
pyMSA.test.test_output.config
pyMSA.test.test_parseFeatureXML.config
pyMSA.test.test_parseMascot.config
pyMSA.test.test_parsePeaksMzML.config
pyMSA.test.test_plots.config
pyMSA.test.test_rFunctions.config
pyMSA.test.test_rPlotGenerics.config" class="py-name" href="#" onclick="return doclink('link-5', 'config', 'link-0');">config</a></tt> <tt class="py-op">=</tt> <tt id="link-6" class="py-name"><a title="pyMSA.output.configHandle
pyMSA.test.test_compareFeatureXMLmzML.configHandle
pyMSA.test.test_compareRuns.configHandle
pyMSA.test.test_database.configHandle
pyMSA.test.test_elementFunctions.configHandle
pyMSA.test.test_featureFunctions.configHandle
pyMSA.test.test_featureMapping.configHandle
pyMSA.test.test_fileHandling.configHandle
pyMSA.test.test_fillDatabase.configHandle
pyMSA.test.test_getWindow.configHandle
pyMSA.test.test_mzmlFunctions.configHandle
pyMSA.test.test_output.configHandle
pyMSA.test.test_parseFeatureXML.configHandle
pyMSA.test.test_parseMascot.configHandle
pyMSA.test.test_parsePeaksMzML.configHandle
pyMSA.test.test_plots.configHandle
pyMSA.test.test_rFunctions.configHandle
pyMSA.test.test_rPlotGenerics.configHandle" class="py-name" href="#" onclick="return doclink('link-6', 'configHandle', 'link-2');">configHandle</a></tt><tt class="py-op">.</tt><tt id="link-7" class="py-name" targets="Method pyMSA.config.ConfigHandle.getConfig()=pyMSA.config.ConfigHandle-class.html#getConfig"><a title="pyMSA.config.ConfigHandle.getConfig" class="py-name" href="#" onclick="return doclink('link-7', 'getConfig', 'link-7');">getConfig</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L47"></a><tt class="py-lineno"> 47</tt>  <tt class="py-line"><tt id="link-8" class="py-name" targets="Variable pyMSA.test.test_compareFeatureXMLmzML.testFolder=pyMSA.test.test_compareFeatureXMLmzML-module.html#testFolder,Variable pyMSA.test.test_compareRuns.testFolder=pyMSA.test.test_compareRuns-module.html#testFolder,Variable pyMSA.test.test_database.testFolder=pyMSA.test.test_database-module.html#testFolder,Variable pyMSA.test.test_elementFunctions.testFolder=pyMSA.test.test_elementFunctions-module.html#testFolder,Variable pyMSA.test.test_featureFunctions.testFolder=pyMSA.test.test_featureFunctions-module.html#testFolder,Variable pyMSA.test.test_featureMapping.testFolder=pyMSA.test.test_featureMapping-module.html#testFolder,Variable pyMSA.test.test_fileHandling.testFolder=pyMSA.test.test_fileHandling-module.html#testFolder,Variable pyMSA.test.test_fillDatabase.testFolder=pyMSA.test.test_fillDatabase-module.html#testFolder,Variable pyMSA.test.test_getWindow.testFolder=pyMSA.test.test_getWindow-module.html#testFolder,Variable pyMSA.test.test_mzmlFunctions.testFolder=pyMSA.test.test_mzmlFunctions-module.html#testFolder,Variable pyMSA.test.test_output.testFolder=pyMSA.test.test_output-module.html#testFolder,Variable pyMSA.test.test_parseFeatureXML.testFolder=pyMSA.test.test_parseFeatureXML-module.html#testFolder,Variable pyMSA.test.test_parseMascot.testFolder=pyMSA.test.test_parseMascot-module.html#testFolder,Variable pyMSA.test.test_parsePeaksMzML.testFolder=pyMSA.test.test_parsePeaksMzML-module.html#testFolder,Variable pyMSA.test.test_plots.testFolder=pyMSA.test.test_plots-module.html#testFolder,Variable pyMSA.test.test_rFunctions.testFolder=pyMSA.test.test_rFunctions-module.html#testFolder,Variable pyMSA.test.test_rPlotGenerics.testFolder=pyMSA.test.test_rPlotGenerics-module.html#testFolder"><a title="pyMSA.test.test_compareFeatureXMLmzML.testFolder
pyMSA.test.test_compareRuns.testFolder
pyMSA.test.test_database.testFolder
pyMSA.test.test_elementFunctions.testFolder
pyMSA.test.test_featureFunctions.testFolder
pyMSA.test.test_featureMapping.testFolder
pyMSA.test.test_fileHandling.testFolder
pyMSA.test.test_fillDatabase.testFolder
pyMSA.test.test_getWindow.testFolder
pyMSA.test.test_mzmlFunctions.testFolder
pyMSA.test.test_output.testFolder
pyMSA.test.test_parseFeatureXML.testFolder
pyMSA.test.test_parseMascot.testFolder
pyMSA.test.test_parsePeaksMzML.testFolder
pyMSA.test.test_plots.testFolder
pyMSA.test.test_rFunctions.testFolder
pyMSA.test.test_rPlotGenerics.testFolder" class="py-name" href="#" onclick="return doclink('link-8', 'testFolder', 'link-8');">testFolder</a></tt> <tt class="py-op">=</tt> <tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">join</tt><tt class="py-op">(</tt><tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">dirname</tt><tt class="py-op">(</tt><tt class="py-name">__file__</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt id="link-9" class="py-name"><a title="pyMSA.config
pyMSA.output.config
pyMSA.test.test_compareFeatureXMLmzML.config
pyMSA.test.test_compareRuns.config
pyMSA.test.test_database.config
pyMSA.test.test_elementFunctions.config
pyMSA.test.test_featureFunctions.config
pyMSA.test.test_featureMapping.config
pyMSA.test.test_fileHandling.config
pyMSA.test.test_fillDatabase.config
pyMSA.test.test_getWindow.config
pyMSA.test.test_mzmlFunctions.config
pyMSA.test.test_output.config
pyMSA.test.test_parseFeatureXML.config
pyMSA.test.test_parseMascot.config
pyMSA.test.test_parsePeaksMzML.config
pyMSA.test.test_plots.config
pyMSA.test.test_rFunctions.config
pyMSA.test.test_rPlotGenerics.config" class="py-name" href="#" onclick="return doclink('link-9', 'config', 'link-0');">config</a></tt><tt class="py-op">.</tt><tt class="py-name">get</tt><tt class="py-op">(</tt><tt class="py-string">'test'</tt><tt class="py-op">,</tt><tt class="py-string">'testfilefolder'</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L48"></a><tt class="py-lineno"> 48</tt>  <tt class="py-line"> </tt>
<a name="L49"></a><tt class="py-lineno"> 49</tt>  <tt class="py-line"> </tt>
<a name="testRFunctions"></a><div id="testRFunctions-def"><a name="L50"></a><tt class="py-lineno"> 50</tt> <a class="py-toggle" href="#" id="testRFunctions-toggle" onclick="return toggle('testRFunctions');">-</a><tt class="py-line"><tt class="py-keyword">class</tt> <a class="py-def-name" href="pyMSA.test.test_rFunctions.testRFunctions-class.html">testRFunctions</a><tt class="py-op">(</tt><tt class="py-base-class">unittest</tt><tt class="py-op">.</tt><tt class="py-base-class">TestCase</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="testRFunctions-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="testRFunctions-expanded"><a name="L51"></a><tt class="py-lineno"> 51</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L52"></a><tt class="py-lineno"> 52</tt>  <tt class="py-line"><tt class="py-docstring">    A test class for the output module.</tt> </tt>
<a name="L53"></a><tt class="py-lineno"> 53</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L54"></a><tt class="py-lineno"> 54</tt>  <tt class="py-line"> </tt>
<a name="testRFunctions.test_index"></a><div id="testRFunctions.test_index-def"><a name="L55"></a><tt class="py-lineno"> 55</tt> <a class="py-toggle" href="#" id="testRFunctions.test_index-toggle" onclick="return toggle('testRFunctions.test_index');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMSA.test.test_rFunctions.testRFunctions-class.html#test_index">test_index</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="testRFunctions.test_index-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="testRFunctions.test_index-expanded"><a name="L56"></a><tt class="py-lineno"> 56</tt>  <tt class="py-line">        <tt class="py-name">expectedIndex</tt> <tt class="py-op">=</tt> <tt class="py-number">1</tt> </tt>
<a name="L57"></a><tt class="py-lineno"> 57</tt>  <tt class="py-line">         </tt>
<a name="L58"></a><tt class="py-lineno"> 58</tt>  <tt class="py-line">        <tt class="py-comment"># testing dataframe</tt> </tt>
<a name="L59"></a><tt class="py-lineno"> 59</tt>  <tt class="py-line">        <tt class="py-name">dict</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-string">'test1'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">15</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">32</tt><tt class="py-op">,</tt><tt class="py-number">4</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">3</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">26</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">}</tt>       <tt class="py-comment"># note that test1 has 12 in row 1 and row 2 </tt> </tt>
<a name="L60"></a><tt class="py-lineno"> 60</tt>  <tt class="py-line">        <tt class="py-name">testFrame</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">DataFrame</tt><tt class="py-op">(</tt><tt class="py-name">dict</tt><tt class="py-op">)</tt>     </tt>
<a name="L61"></a><tt class="py-lineno"> 61</tt>  <tt class="py-line">        <tt class="py-comment"># because the dict from which the dataframe is made is not ordened, the testframe is ordened first to make sure that the column 'test2' is always at the same position</tt> </tt>
<a name="L62"></a><tt class="py-lineno"> 62</tt>  <tt class="py-line">        <tt class="py-comment"># however, to do tis I'm using the index function that I'm testing, which might or might not be a right thing to do</tt> </tt>
<a name="L63"></a><tt class="py-lineno"> 63</tt>  <tt class="py-line">        <tt class="py-name">testFrame</tt> <tt class="py-op">=</tt> <tt class="py-name">testFrame</tt><tt class="py-op">.</tt><tt class="py-name">rx</tt><tt class="py-op">[</tt><tt class="py-name">True</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">[</tt><tt class="py-string">'with'</tt><tt class="py-op">]</tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">[</tt><tt class="py-string">'order'</tt><tt class="py-op">]</tt><tt class="py-op">(</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt id="link-10" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-10', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-11" class="py-name" targets="Function pyMSA.rFunctions.index()=pyMSA.rFunctions-module.html#index"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-11', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test1'</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt id="link-12" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-12', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-13" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-13', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt id="link-14" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-14', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-15" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-15', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">)</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-op">)</tt><tt class="py-op">]</tt> </tt>
<a name="L64"></a><tt class="py-lineno"> 64</tt>  <tt class="py-line"> </tt>
<a name="L65"></a><tt class="py-lineno"> 65</tt>  <tt class="py-line">        <tt class="py-name">actualDataFrameIndex</tt> <tt class="py-op">=</tt> <tt id="link-16" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-16', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-17" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-17', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">)</tt> </tt>
<a name="L66"></a><tt class="py-lineno"> 66</tt>  <tt class="py-line">        <tt class="py-comment"># testing matrix (same values as the dataframe)</tt> </tt>
<a name="L67"></a><tt class="py-lineno"> 67</tt>  <tt class="py-line">        <tt class="py-name">testMatrix</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">.</tt><tt class="py-name">matrix</tt><tt class="py-op">(</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">15</tt><tt class="py-op">,</tt><tt class="py-number">32</tt><tt class="py-op">,</tt><tt class="py-number">4</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">3</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">26</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-name">nrow</tt><tt class="py-op">=</tt><tt class="py-number">3</tt><tt class="py-op">)</tt> </tt>
<a name="L68"></a><tt class="py-lineno"> 68</tt>  <tt class="py-line">        <tt class="py-name">testMatrix</tt><tt class="py-op">.</tt><tt class="py-name">colnames</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">StrVector</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt class="py-string">'test1'</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">,</tt><tt class="py-string">'test3'</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L69"></a><tt class="py-lineno"> 69</tt>  <tt class="py-line">        <tt class="py-name">actualMatrixIndex</tt> <tt class="py-op">=</tt> <tt id="link-18" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-18', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-19" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-19', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testMatrix</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">)</tt> </tt>
<a name="L70"></a><tt class="py-lineno"> 70</tt>  <tt class="py-line"> </tt>
<a name="L71"></a><tt class="py-lineno"> 71</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertEqual</tt><tt class="py-op">(</tt><tt class="py-name">expectedIndex</tt><tt class="py-op">,</tt> <tt class="py-name">actualDataFrameIndex</tt><tt class="py-op">)</tt> </tt>
<a name="L72"></a><tt class="py-lineno"> 72</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertEqual</tt><tt class="py-op">(</tt><tt class="py-name">expectedIndex</tt><tt class="py-op">,</tt> <tt class="py-name">actualMatrixIndex</tt><tt class="py-op">)</tt> </tt>
</div><a name="L73"></a><tt class="py-lineno"> 73</tt>  <tt class="py-line"> </tt>
<a name="testRFunctions.test_indexException"></a><div id="testRFunctions.test_indexException-def"><a name="L74"></a><tt class="py-lineno"> 74</tt> <a class="py-toggle" href="#" id="testRFunctions.test_indexException-toggle" onclick="return toggle('testRFunctions.test_indexException');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMSA.test.test_rFunctions.testRFunctions-class.html#test_indexException">test_indexException</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="testRFunctions.test_indexException-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="testRFunctions.test_indexException-expanded"><a name="L75"></a><tt class="py-lineno"> 75</tt>  <tt class="py-line">        <tt class="py-comment"># testing dataframe</tt> </tt>
<a name="L76"></a><tt class="py-lineno"> 76</tt>  <tt class="py-line">        <tt class="py-name">dict</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-string">'test1'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">15</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">32</tt><tt class="py-op">,</tt><tt class="py-number">4</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">3</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">26</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">}</tt>       <tt class="py-comment"># note that test1 has 12 in row 1 and row 2 </tt> </tt>
<a name="L77"></a><tt class="py-lineno"> 77</tt>  <tt class="py-line">        <tt class="py-name">testFrame</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">DataFrame</tt><tt class="py-op">(</tt><tt class="py-name">dict</tt><tt class="py-op">)</tt>     </tt>
<a name="L78"></a><tt class="py-lineno"> 78</tt>  <tt class="py-line">        <tt class="py-comment"># because the dict from which the dataframe is made is not ordened, the testframe is ordened first to make sure that the column 'test2' is always at the same position</tt> </tt>
<a name="L79"></a><tt class="py-lineno"> 79</tt>  <tt class="py-line">        <tt class="py-comment"># however, to do tis I'm using the index function that I'm testing, which might or might not be a right thing to do</tt> </tt>
<a name="L80"></a><tt class="py-lineno"> 80</tt>  <tt class="py-line">        <tt class="py-name">testFrame</tt> <tt class="py-op">=</tt> <tt class="py-name">testFrame</tt><tt class="py-op">.</tt><tt class="py-name">rx</tt><tt class="py-op">[</tt><tt class="py-name">True</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">[</tt><tt class="py-string">'with'</tt><tt class="py-op">]</tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">[</tt><tt class="py-string">'order'</tt><tt class="py-op">]</tt><tt class="py-op">(</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt id="link-20" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-20', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-21" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-21', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test1'</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt id="link-22" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-22', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-23" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-23', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt id="link-24" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-24', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-25" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-25', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">)</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-op">)</tt><tt class="py-op">]</tt> </tt>
<a name="L81"></a><tt class="py-lineno"> 81</tt>  <tt class="py-line"> </tt>
<a name="L82"></a><tt class="py-lineno"> 82</tt>  <tt class="py-line">        <tt class="py-name">actualDataFrameIndex</tt> <tt class="py-op">=</tt> <tt id="link-26" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-26', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-27" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-27', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">)</tt> </tt>
<a name="L83"></a><tt class="py-lineno"> 83</tt>  <tt class="py-line"> </tt>
<a name="L84"></a><tt class="py-lineno"> 84</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertRaises</tt><tt class="py-op">(</tt><tt class="py-name">KeyError</tt><tt class="py-op">,</tt> <tt id="link-28" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-28', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-29" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-29', 'index', 'link-11');">index</a></tt><tt class="py-op">,</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'column_notindf'</tt><tt class="py-op">)</tt> </tt>
</div><a name="L85"></a><tt class="py-lineno"> 85</tt>  <tt class="py-line">    </tt>
<a name="L86"></a><tt class="py-lineno"> 86</tt>  <tt class="py-line"> </tt>
<a name="testRFunctions.test_getRowsWithUniqColumn"></a><div id="testRFunctions.test_getRowsWithUniqColumn-def"><a name="L87"></a><tt class="py-lineno"> 87</tt> <a class="py-toggle" href="#" id="testRFunctions.test_getRowsWithUniqColumn-toggle" onclick="return toggle('testRFunctions.test_getRowsWithUniqColumn');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMSA.test.test_rFunctions.testRFunctions-class.html#test_getRowsWithUniqColumn">test_getRowsWithUniqColumn</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="testRFunctions.test_getRowsWithUniqColumn-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="testRFunctions.test_getRowsWithUniqColumn-expanded"><a name="L88"></a><tt class="py-lineno"> 88</tt>  <tt class="py-line">         </tt>
<a name="L89"></a><tt class="py-lineno"> 89</tt>  <tt class="py-line">        <tt class="py-name">expectedDict</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-string">'test1'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">15</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">32</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">3</tt><tt class="py-op">,</tt><tt class="py-number">26</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">}</tt>   </tt>
<a name="L90"></a><tt class="py-lineno"> 90</tt>  <tt class="py-line">        <tt class="py-name">expectedSubset</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">DataFrame</tt><tt class="py-op">(</tt><tt class="py-name">expectedDict</tt><tt class="py-op">)</tt> </tt>
<a name="L91"></a><tt class="py-lineno"> 91</tt>  <tt class="py-line">        <tt class="py-comment"># because the dict from which the dataframe is made is not ordened, the testframe is ordened first to make sure that the column 'test2' is always at the same position</tt> </tt>
<a name="L92"></a><tt class="py-lineno"> 92</tt>  <tt class="py-line">        <tt class="py-name">expectedSubset</tt> <tt class="py-op">=</tt> <tt class="py-name">expectedSubset</tt><tt class="py-op">.</tt><tt class="py-name">rx</tt><tt class="py-op">[</tt><tt class="py-name">True</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">[</tt><tt class="py-string">'with'</tt><tt class="py-op">]</tt><tt class="py-op">(</tt><tt class="py-name">expectedSubset</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">[</tt><tt class="py-string">'order'</tt><tt class="py-op">]</tt><tt class="py-op">(</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt id="link-30" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-30', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-31" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-31', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">expectedSubset</tt><tt class="py-op">,</tt> <tt class="py-string">'test1'</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt id="link-32" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-32', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-33" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-33', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">expectedSubset</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt id="link-34" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-34', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-35" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-35', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">expectedSubset</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">)</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-op">)</tt><tt class="py-op">]</tt> </tt>
<a name="L93"></a><tt class="py-lineno"> 93</tt>  <tt class="py-line"> </tt>
<a name="L94"></a><tt class="py-lineno"> 94</tt>  <tt class="py-line"> </tt>
<a name="L95"></a><tt class="py-lineno"> 95</tt>  <tt class="py-line">        <tt class="py-name">testDict</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-string">'test1'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">15</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">32</tt><tt class="py-op">,</tt><tt class="py-number">4</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">3</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">26</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">}</tt>       <tt class="py-comment"># note that test1 has 12 in row 1 and row 2 </tt> </tt>
<a name="L96"></a><tt class="py-lineno"> 96</tt>  <tt class="py-line"> </tt>
<a name="L97"></a><tt class="py-lineno"> 97</tt>  <tt class="py-line">        <tt class="py-comment"># testing dataframe</tt> </tt>
<a name="L98"></a><tt class="py-lineno"> 98</tt>  <tt class="py-line">        <tt class="py-name">testFrame</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">DataFrame</tt><tt class="py-op">(</tt><tt class="py-name">testDict</tt><tt class="py-op">)</tt>     </tt>
<a name="L99"></a><tt class="py-lineno"> 99</tt>  <tt class="py-line">        <tt class="py-comment"># because the dict from which the dataframe is made is not ordened, the testframe is ordened first to make sure that the column 'test2' is always at the same position</tt> </tt>
<a name="L100"></a><tt class="py-lineno">100</tt>  <tt class="py-line">        <tt class="py-name">testFrame</tt> <tt class="py-op">=</tt> <tt class="py-name">testFrame</tt><tt class="py-op">.</tt><tt class="py-name">rx</tt><tt class="py-op">[</tt><tt class="py-name">True</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">[</tt><tt class="py-string">'with'</tt><tt class="py-op">]</tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">[</tt><tt class="py-string">'order'</tt><tt class="py-op">]</tt><tt class="py-op">(</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt id="link-36" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-36', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-37" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-37', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test1'</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt id="link-38" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-38', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-39" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-39', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt id="link-40" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-40', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-41" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-41', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">)</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-op">)</tt><tt class="py-op">]</tt> </tt>
<a name="L101"></a><tt class="py-lineno">101</tt>  <tt class="py-line">        <tt class="py-name">actualDfSubset</tt> <tt class="py-op">=</tt> <tt id="link-42" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-42', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-43" class="py-name" targets="Function pyMSA.rFunctions.getRowsWithUniqColumn()=pyMSA.rFunctions-module.html#getRowsWithUniqColumn"><a title="pyMSA.rFunctions.getRowsWithUniqColumn" class="py-name" href="#" onclick="return doclink('link-43', 'getRowsWithUniqColumn', 'link-43');">getRowsWithUniqColumn</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test1'</tt><tt class="py-op">)</tt>            <tt class="py-comment"># now only two of the three rows remain, because test1 had 12 twice in the row</tt> </tt>
<a name="L102"></a><tt class="py-lineno">102</tt>  <tt class="py-line">         </tt>
<a name="L103"></a><tt class="py-lineno">103</tt>  <tt class="py-line">        <tt class="py-comment"># a list to keep track of the results, can't compare two dataframes directly so want to compare their values only</tt> </tt>
<a name="L104"></a><tt class="py-lineno">104</tt>  <tt class="py-line">        <tt class="py-name">expectedResultList</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L105"></a><tt class="py-lineno">105</tt>  <tt class="py-line">        <tt class="py-name">actualResultList</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L106"></a><tt class="py-lineno">106</tt>  <tt class="py-line">        <tt class="py-comment"># getting the relevant data from both expected and actual subset. </tt> </tt>
<a name="L107"></a><tt class="py-lineno">107</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">values</tt> <tt class="py-keyword">in</tt> <tt class="py-name">expectedSubset</tt><tt class="py-op">.</tt><tt class="py-name">iteritems</tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L108"></a><tt class="py-lineno">108</tt>  <tt class="py-line">            <tt class="py-comment"># and append them to the list</tt> </tt>
<a name="L109"></a><tt class="py-lineno">109</tt>  <tt class="py-line">            <tt class="py-name">expectedResultList</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt class="py-name">values</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">,</tt><tt class="py-name">values</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-name">values</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L110"></a><tt class="py-lineno">110</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">values</tt> <tt class="py-keyword">in</tt> <tt class="py-name">actualDfSubset</tt><tt class="py-op">.</tt><tt class="py-name">iteritems</tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L111"></a><tt class="py-lineno">111</tt>  <tt class="py-line">            <tt class="py-name">actualResultList</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt class="py-name">values</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">,</tt><tt class="py-name">values</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-name">values</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L112"></a><tt class="py-lineno">112</tt>  <tt class="py-line">     </tt>
<a name="L113"></a><tt class="py-lineno">113</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertEqual</tt><tt class="py-op">(</tt><tt class="py-name">expectedResultList</tt><tt class="py-op">,</tt> <tt class="py-name">actualResultList</tt><tt class="py-op">)</tt> </tt>
</div><a name="L114"></a><tt class="py-lineno">114</tt>  <tt class="py-line">     </tt>
<a name="testRFunctions.test_getRowsWithUniqColumnException"></a><div id="testRFunctions.test_getRowsWithUniqColumnException-def"><a name="L115"></a><tt class="py-lineno">115</tt> <a class="py-toggle" href="#" id="testRFunctions.test_getRowsWithUniqColumnException-toggle" onclick="return toggle('testRFunctions.test_getRowsWithUniqColumnException');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMSA.test.test_rFunctions.testRFunctions-class.html#test_getRowsWithUniqColumnException">test_getRowsWithUniqColumnException</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="testRFunctions.test_getRowsWithUniqColumnException-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="testRFunctions.test_getRowsWithUniqColumnException-expanded"><a name="L116"></a><tt class="py-lineno">116</tt>  <tt class="py-line">        <tt class="py-comment"># testing dataframe</tt> </tt>
<a name="L117"></a><tt class="py-lineno">117</tt>  <tt class="py-line">        <tt class="py-name">dict</tt> <tt class="py-op">=</tt>  <tt class="py-op">{</tt><tt class="py-string">'test1'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">15</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">32</tt><tt class="py-op">,</tt><tt class="py-number">4</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">3</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">26</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">}</tt>  </tt>
<a name="L118"></a><tt class="py-lineno">118</tt>  <tt class="py-line">        <tt class="py-name">testFrame</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">DataFrame</tt><tt class="py-op">(</tt><tt class="py-name">dict</tt><tt class="py-op">)</tt>     </tt>
<a name="L119"></a><tt class="py-lineno">119</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertRaises</tt><tt class="py-op">(</tt><tt class="py-name">TypeError</tt><tt class="py-op">,</tt> <tt id="link-44" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-44', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-45" class="py-name"><a title="pyMSA.rFunctions.getRowsWithUniqColumn" class="py-name" href="#" onclick="return doclink('link-45', 'getRowsWithUniqColumn', 'link-43');">getRowsWithUniqColumn</a></tt><tt class="py-op">,</tt> <tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-op">{</tt><tt class="py-string">'nota'</tt><tt class="py-op">:</tt><tt class="py-string">'strType'</tt><tt class="py-op">}</tt><tt class="py-op">)</tt> </tt>
<a name="L120"></a><tt class="py-lineno">120</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertRaises</tt><tt class="py-op">(</tt><tt class="py-name">KeyError</tt><tt class="py-op">,</tt> <tt id="link-46" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-46', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-47" class="py-name"><a title="pyMSA.rFunctions.getRowsWithUniqColumn" class="py-name" href="#" onclick="return doclink('link-47', 'getRowsWithUniqColumn', 'link-43');">getRowsWithUniqColumn</a></tt><tt class="py-op">,</tt> <tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'notAcolumnName'</tt><tt class="py-op">)</tt> </tt>
</div><a name="L121"></a><tt class="py-lineno">121</tt>  <tt class="py-line"> </tt>
<a name="testRFunctions.test_getColumns"></a><div id="testRFunctions.test_getColumns-def"><a name="L122"></a><tt class="py-lineno">122</tt> <a class="py-toggle" href="#" id="testRFunctions.test_getColumns-toggle" onclick="return toggle('testRFunctions.test_getColumns');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMSA.test.test_rFunctions.testRFunctions-class.html#test_getColumns">test_getColumns</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="testRFunctions.test_getColumns-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="testRFunctions.test_getColumns-expanded"><a name="L123"></a><tt class="py-lineno">123</tt>  <tt class="py-line">        <tt class="py-comment"># the dict of whcih the dataframe is made to give to pass to the function, and of which the expected</tt> </tt>
<a name="L124"></a><tt class="py-lineno">124</tt>  <tt class="py-line">        <tt class="py-comment"># subset is made:</tt> </tt>
<a name="L125"></a><tt class="py-lineno">125</tt>  <tt class="py-line">        <tt class="py-name">expectedDict</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-string">'test1'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">15</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">3</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">26</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">}</tt>  </tt>
<a name="L126"></a><tt class="py-lineno">126</tt>  <tt class="py-line">        <tt class="py-name">expectedSubset</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">DataFrame</tt><tt class="py-op">(</tt><tt class="py-name">expectedDict</tt><tt class="py-op">)</tt> </tt>
<a name="L127"></a><tt class="py-lineno">127</tt>  <tt class="py-line">        <tt class="py-comment"># note that expectedDict is the same as testDict, but misses the test2 vector</tt> </tt>
<a name="L128"></a><tt class="py-lineno">128</tt>  <tt class="py-line">        <tt class="py-name">testDict</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-string">'test1'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">15</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">32</tt><tt class="py-op">,</tt><tt class="py-number">4</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">:</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">3</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">26</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">}</tt> </tt>
<a name="L129"></a><tt class="py-lineno">129</tt>  <tt class="py-line">        <tt class="py-comment"># testing dataframe</tt> </tt>
<a name="L130"></a><tt class="py-lineno">130</tt>  <tt class="py-line">        <tt class="py-name">testFrame</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">DataFrame</tt><tt class="py-op">(</tt><tt class="py-name">testDict</tt><tt class="py-op">)</tt>     </tt>
<a name="L131"></a><tt class="py-lineno">131</tt>  <tt class="py-line">        <tt class="py-comment"># because the dict from which the dataframe is made is not ordened, the testframe is ordened first to make sure that the column 'test2' is always at the same position</tt> </tt>
<a name="L132"></a><tt class="py-lineno">132</tt>  <tt class="py-line">        <tt class="py-name">testFrame</tt> <tt class="py-op">=</tt> <tt class="py-name">testFrame</tt><tt class="py-op">.</tt><tt class="py-name">rx</tt><tt class="py-op">[</tt><tt class="py-name">True</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">[</tt><tt class="py-string">'with'</tt><tt class="py-op">]</tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">[</tt><tt class="py-string">'order'</tt><tt class="py-op">]</tt><tt class="py-op">(</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt id="link-48" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-48', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-49" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-49', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test1'</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt id="link-50" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-50', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-51" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-51', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt id="link-52" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-52', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-53" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-53', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">)</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-op">)</tt><tt class="py-op">]</tt> </tt>
<a name="L133"></a><tt class="py-lineno">133</tt>  <tt class="py-line">        <tt class="py-name">actualDfSubset</tt> <tt class="py-op">=</tt> <tt id="link-54" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-54', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-55" class="py-name" targets="Function pyMSA.rFunctions.getColumns()=pyMSA.rFunctions-module.html#getColumns"><a title="pyMSA.rFunctions.getColumns" class="py-name" href="#" onclick="return doclink('link-55', 'getColumns', 'link-55');">getColumns</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test1'</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">)</tt>            <tt class="py-comment"># now only two of the three rows remain, because test1 had 12 twice in the row</tt> </tt>
<a name="L134"></a><tt class="py-lineno">134</tt>  <tt class="py-line"> </tt>
<a name="L135"></a><tt class="py-lineno">135</tt>  <tt class="py-line">        <tt class="py-comment"># a list to keep track of the results, can't compare two dataframes directly so want to compare their values only</tt> </tt>
<a name="L136"></a><tt class="py-lineno">136</tt>  <tt class="py-line">        <tt class="py-name">expectedResultList</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L137"></a><tt class="py-lineno">137</tt>  <tt class="py-line">        <tt class="py-name">actualResultList</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L138"></a><tt class="py-lineno">138</tt>  <tt class="py-line">        <tt class="py-comment"># getting the relevant data from both expected and actual subset. </tt> </tt>
<a name="L139"></a><tt class="py-lineno">139</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">values</tt> <tt class="py-keyword">in</tt> <tt class="py-name">expectedSubset</tt><tt class="py-op">.</tt><tt class="py-name">iteritems</tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L140"></a><tt class="py-lineno">140</tt>  <tt class="py-line">            <tt class="py-comment"># and append them to the list</tt> </tt>
<a name="L141"></a><tt class="py-lineno">141</tt>  <tt class="py-line">            <tt class="py-name">expectedResultList</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt class="py-name">values</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">,</tt><tt class="py-name">values</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-name">values</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L142"></a><tt class="py-lineno">142</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">values</tt> <tt class="py-keyword">in</tt> <tt class="py-name">actualDfSubset</tt><tt class="py-op">.</tt><tt class="py-name">iteritems</tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L143"></a><tt class="py-lineno">143</tt>  <tt class="py-line">            <tt class="py-name">actualResultList</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt class="py-name">values</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">,</tt><tt class="py-name">values</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-name">values</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L144"></a><tt class="py-lineno">144</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertEqual</tt><tt class="py-op">(</tt><tt class="py-name">expectedResultList</tt><tt class="py-op">,</tt> <tt class="py-name">actualResultList</tt><tt class="py-op">)</tt> </tt>
</div><a name="L145"></a><tt class="py-lineno">145</tt>  <tt class="py-line">     </tt>
<a name="testRFunctions.test_getColumnsException"></a><div id="testRFunctions.test_getColumnsException-def"><a name="L146"></a><tt class="py-lineno">146</tt> <a class="py-toggle" href="#" id="testRFunctions.test_getColumnsException-toggle" onclick="return toggle('testRFunctions.test_getColumnsException');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMSA.test.test_rFunctions.testRFunctions-class.html#test_getColumnsException">test_getColumnsException</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="testRFunctions.test_getColumnsException-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="testRFunctions.test_getColumnsException-expanded"><a name="L147"></a><tt class="py-lineno">147</tt>  <tt class="py-line">        <tt class="py-name">dict</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-string">'test1'</tt><tt class="py-op">:</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">12</tt><tt class="py-op">,</tt><tt class="py-number">15</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">:</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">32</tt><tt class="py-op">,</tt><tt class="py-number">12</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">:</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">3</tt><tt class="py-op">,</tt><tt class="py-number">26</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">}</tt> </tt>
<a name="L148"></a><tt class="py-lineno">148</tt>  <tt class="py-line">        <tt class="py-name">testFrame</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">DataFrame</tt><tt class="py-op">(</tt><tt class="py-name">dict</tt><tt class="py-op">)</tt> </tt>
<a name="L149"></a><tt class="py-lineno">149</tt>  <tt class="py-line">        <tt class="py-comment"># testing dataframe</tt> </tt>
<a name="L150"></a><tt class="py-lineno">150</tt>  <tt class="py-line">        <tt class="py-name">testFrame</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">DataFrame</tt><tt class="py-op">(</tt><tt class="py-name">dict</tt><tt class="py-op">)</tt>     </tt>
<a name="L151"></a><tt class="py-lineno">151</tt>  <tt class="py-line">        <tt class="py-comment"># because the dict from which the dataframe is made is not ordened, the testframe is ordened first to make sure that the column 'test2' is always at the same position</tt> </tt>
<a name="L152"></a><tt class="py-lineno">152</tt>  <tt class="py-line">        <tt class="py-name">testFrame</tt> <tt class="py-op">=</tt> <tt class="py-name">testFrame</tt><tt class="py-op">.</tt><tt class="py-name">rx</tt><tt class="py-op">[</tt><tt class="py-name">True</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">[</tt><tt class="py-string">'with'</tt><tt class="py-op">]</tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">[</tt><tt class="py-string">'order'</tt><tt class="py-op">]</tt><tt class="py-op">(</tt><tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt id="link-56" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-56', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-57" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-57', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test1'</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt id="link-58" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-58', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-59" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-59', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test2'</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt id="link-60" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-60', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-61" class="py-name"><a title="pyMSA.rFunctions.index" class="py-name" href="#" onclick="return doclink('link-61', 'index', 'link-11');">index</a></tt><tt class="py-op">(</tt><tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test3'</tt><tt class="py-op">)</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">,</tt><tt class="py-op">)</tt><tt class="py-op">]</tt> </tt>
<a name="L153"></a><tt class="py-lineno">153</tt>  <tt class="py-line">         </tt>
<a name="L154"></a><tt class="py-lineno">154</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertRaises</tt><tt class="py-op">(</tt><tt class="py-name">TypeError</tt><tt class="py-op">,</tt> <tt id="link-62" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-62', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-63" class="py-name"><a title="pyMSA.rFunctions.getColumns" class="py-name" href="#" onclick="return doclink('link-63', 'getColumns', 'link-55');">getColumns</a></tt><tt class="py-op">,</tt> <tt class="py-name">testFrame</tt><tt class="py-op">)</tt> </tt>
<a name="L155"></a><tt class="py-lineno">155</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertRaises</tt><tt class="py-op">(</tt><tt class="py-name">TypeError</tt><tt class="py-op">,</tt> <tt id="link-64" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-64', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-65" class="py-name"><a title="pyMSA.rFunctions.getColumns" class="py-name" href="#" onclick="return doclink('link-65', 'getColumns', 'link-55');">getColumns</a></tt><tt class="py-op">,</tt> <tt class="py-name">testFrame</tt><tt class="py-op">,</tt> <tt class="py-string">'test1'</tt><tt class="py-op">,</tt> <tt class="py-number">1</tt><tt class="py-op">)</tt>   </tt>
<a name="L156"></a><tt class="py-lineno">156</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertRaises</tt><tt class="py-op">(</tt><tt class="py-name">TypeError</tt><tt class="py-op">,</tt> <tt id="link-66" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-66', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-67" class="py-name"><a title="pyMSA.rFunctions.getColumns" class="py-name" href="#" onclick="return doclink('link-67', 'getColumns', 'link-55');">getColumns</a></tt><tt class="py-op">,</tt> <tt class="py-name">testFrame</tt><tt class="py-op">,</tt>  <tt class="py-number">1</tt><tt class="py-op">,</tt> <tt class="py-string">'test1'</tt><tt class="py-op">)</tt>   </tt>
<a name="L157"></a><tt class="py-lineno">157</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertRaises</tt><tt class="py-op">(</tt><tt class="py-name">TypeError</tt><tt class="py-op">,</tt> <tt id="link-68" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-68', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-69" class="py-name"><a title="pyMSA.rFunctions.getColumns" class="py-name" href="#" onclick="return doclink('link-69', 'getColumns', 'link-55');">getColumns</a></tt><tt class="py-op">,</tt> <tt class="py-op">[</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">,</tt><tt class="py-number">2</tt><tt class="py-op">,</tt><tt class="py-number">3</tt><tt class="py-op">]</tt><tt class="py-op">,</tt><tt class="py-op">[</tt><tt class="py-number">3</tt><tt class="py-op">,</tt><tt class="py-number">2</tt><tt class="py-op">,</tt><tt class="py-number">2</tt><tt class="py-op">]</tt><tt class="py-op">,</tt><tt class="py-op">[</tt><tt class="py-number">4</tt><tt class="py-op">,</tt><tt class="py-number">3</tt><tt class="py-op">,</tt><tt class="py-number">2</tt><tt class="py-op">]</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-string">'test1'</tt><tt class="py-op">)</tt> </tt>
</div><a name="L158"></a><tt class="py-lineno">158</tt>  <tt class="py-line">         </tt>
<a name="testRFunctions.test_takeLog"></a><div id="testRFunctions.test_takeLog-def"><a name="L159"></a><tt class="py-lineno">159</tt> <a class="py-toggle" href="#" id="testRFunctions.test_takeLog-toggle" onclick="return toggle('testRFunctions.test_takeLog');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMSA.test.test_rFunctions.testRFunctions-class.html#test_takeLog">test_takeLog</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="testRFunctions.test_takeLog-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="testRFunctions.test_takeLog-expanded"><a name="L160"></a><tt class="py-lineno">160</tt>  <tt class="py-line">        <tt class="py-comment"># because of rounding issues after 7 numbers after the comma I round both expected and actual to an int</tt> </tt>
<a name="L161"></a><tt class="py-lineno">161</tt>  <tt class="py-line">        <tt class="py-name">expectedLogVector</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">5.0</tt><tt class="py-op">,</tt> <tt class="py-number">5.0</tt><tt class="py-op">,</tt> <tt class="py-number">4.0</tt><tt class="py-op">,</tt> <tt class="py-number">5.0</tt><tt class="py-op">,</tt> <tt class="py-number">5.0</tt><tt class="py-op">,</tt> <tt class="py-number">5.0</tt><tt class="py-op">,</tt> <tt class="py-number">3.0</tt><tt class="py-op">,</tt> <tt class="py-number">5.0</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L162"></a><tt class="py-lineno">162</tt>  <tt class="py-line">        <tt class="py-name">expectedLogList</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L163"></a><tt class="py-lineno">163</tt>  <tt class="py-line">        <tt class="py-comment"># you can't compare vectors directly because this part &gt;&gt; Python:0x12241f80 &lt;&lt; is always different, I transform them to lists first</tt> </tt>
<a name="L164"></a><tt class="py-lineno">164</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">value</tt> <tt class="py-keyword">in</tt> <tt class="py-name">expectedLogVector</tt><tt class="py-op">:</tt> </tt>
<a name="L165"></a><tt class="py-lineno">165</tt>  <tt class="py-line">            <tt class="py-name">expectedLogList</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-name">value</tt><tt class="py-op">)</tt> </tt>
<a name="L166"></a><tt class="py-lineno">166</tt>  <tt class="py-line">         </tt>
<a name="L167"></a><tt class="py-lineno">167</tt>  <tt class="py-line">        <tt class="py-name">vector</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">59843</tt><tt class="py-op">,</tt> <tt class="py-number">34982</tt><tt class="py-op">,</tt> <tt class="py-number">12425</tt><tt class="py-op">,</tt> <tt class="py-number">90534</tt><tt class="py-op">,</tt> <tt class="py-number">34532</tt><tt class="py-op">,</tt> <tt class="py-number">54642</tt><tt class="py-op">,</tt> <tt class="py-number">1239</tt><tt class="py-op">,</tt> <tt class="py-number">43534</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L168"></a><tt class="py-lineno">168</tt>  <tt class="py-line">        <tt class="py-name">actualLogVector</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">r</tt><tt class="py-op">[</tt><tt class="py-string">'round'</tt><tt class="py-op">]</tt><tt class="py-op">(</tt><tt id="link-70" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-70', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-71" class="py-name" targets="Function pyMSA.rFunctions.takeLog()=pyMSA.rFunctions-module.html#takeLog"><a title="pyMSA.rFunctions.takeLog" class="py-name" href="#" onclick="return doclink('link-71', 'takeLog', 'link-71');">takeLog</a></tt><tt class="py-op">(</tt><tt class="py-name">vector</tt><tt class="py-op">,</tt> <tt class="py-number">10</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L169"></a><tt class="py-lineno">169</tt>  <tt class="py-line">        <tt class="py-name">actualLogList</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L170"></a><tt class="py-lineno">170</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">value</tt> <tt class="py-keyword">in</tt> <tt class="py-name">actualLogVector</tt><tt class="py-op">:</tt> </tt>
<a name="L171"></a><tt class="py-lineno">171</tt>  <tt class="py-line">            <tt class="py-name">actualLogList</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-name">value</tt><tt class="py-op">)</tt> </tt>
<a name="L172"></a><tt class="py-lineno">172</tt>  <tt class="py-line">         </tt>
<a name="L173"></a><tt class="py-lineno">173</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertEqual</tt><tt class="py-op">(</tt><tt class="py-name">expectedLogList</tt><tt class="py-op">,</tt> <tt class="py-name">actualLogList</tt><tt class="py-op">)</tt> </tt>
</div><a name="L174"></a><tt class="py-lineno">174</tt>  <tt class="py-line">         </tt>
<a name="testRFunctions.test_takeLogException"></a><div id="testRFunctions.test_takeLogException-def"><a name="L175"></a><tt class="py-lineno">175</tt> <a class="py-toggle" href="#" id="testRFunctions.test_takeLogException-toggle" onclick="return toggle('testRFunctions.test_takeLogException');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMSA.test.test_rFunctions.testRFunctions-class.html#test_takeLogException">test_takeLogException</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="testRFunctions.test_takeLogException-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="testRFunctions.test_takeLogException-expanded"><a name="L176"></a><tt class="py-lineno">176</tt>  <tt class="py-line">        <tt class="py-name">vector</tt> <tt class="py-op">=</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">IntVector</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-number">59843</tt><tt class="py-op">,</tt> <tt class="py-number">34982</tt><tt class="py-op">,</tt> <tt class="py-number">12425</tt><tt class="py-op">,</tt> <tt class="py-number">90534</tt><tt class="py-op">,</tt> <tt class="py-number">34532</tt><tt class="py-op">,</tt> <tt class="py-number">54642</tt><tt class="py-op">,</tt> <tt class="py-number">1239</tt><tt class="py-op">,</tt> <tt class="py-number">43534</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L177"></a><tt class="py-lineno">177</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertRaises</tt><tt class="py-op">(</tt><tt class="py-name">ValueError</tt><tt class="py-op">,</tt> <tt id="link-72" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-72', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-73" class="py-name"><a title="pyMSA.rFunctions.takeLog" class="py-name" href="#" onclick="return doclink('link-73', 'takeLog', 'link-71');">takeLog</a></tt><tt class="py-op">,</tt> <tt class="py-name">vector</tt><tt class="py-op">,</tt> <tt class="py-op">-</tt><tt class="py-number">2</tt><tt class="py-op">)</tt> </tt>
</div><a name="L178"></a><tt class="py-lineno">178</tt>  <tt class="py-line">         </tt>
<a name="L179"></a><tt class="py-lineno">179</tt>  <tt class="py-line"> </tt>
<a name="testRFunctions.test_readCsvFile"></a><div id="testRFunctions.test_readCsvFile-def"><a name="L180"></a><tt class="py-lineno">180</tt> <a class="py-toggle" href="#" id="testRFunctions.test_readCsvFile-toggle" onclick="return toggle('testRFunctions.test_readCsvFile');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMSA.test.test_rFunctions.testRFunctions-class.html#test_readCsvFile">test_readCsvFile</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="testRFunctions.test_readCsvFile-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="testRFunctions.test_readCsvFile-expanded"><a name="L181"></a><tt class="py-lineno">181</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertIsInstance</tt><tt class="py-op">(</tt><tt id="link-74" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-74', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-75" class="py-name" targets="Function pyMSA.rFunctions.readCsvFile()=pyMSA.rFunctions-module.html#readCsvFile"><a title="pyMSA.rFunctions.readCsvFile" class="py-name" href="#" onclick="return doclink('link-75', 'readCsvFile', 'link-75');">readCsvFile</a></tt><tt class="py-op">(</tt><tt id="link-76" class="py-name"><a title="pyMSA.test.test_compareFeatureXMLmzML.testFolder
pyMSA.test.test_compareRuns.testFolder
pyMSA.test.test_database.testFolder
pyMSA.test.test_elementFunctions.testFolder
pyMSA.test.test_featureFunctions.testFolder
pyMSA.test.test_featureMapping.testFolder
pyMSA.test.test_fileHandling.testFolder
pyMSA.test.test_fillDatabase.testFolder
pyMSA.test.test_getWindow.testFolder
pyMSA.test.test_mzmlFunctions.testFolder
pyMSA.test.test_output.testFolder
pyMSA.test.test_parseFeatureXML.testFolder
pyMSA.test.test_parseMascot.testFolder
pyMSA.test.test_parsePeaksMzML.testFolder
pyMSA.test.test_plots.testFolder
pyMSA.test.test_rFunctions.testFolder
pyMSA.test.test_rPlotGenerics.testFolder" class="py-name" href="#" onclick="return doclink('link-76', 'testFolder', 'link-8');">testFolder</a></tt><tt class="py-op">+</tt><tt class="py-string">'feature.csv'</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">vectors</tt><tt class="py-op">.</tt><tt class="py-name">DataFrame</tt><tt class="py-op">)</tt> </tt>
</div><a name="L182"></a><tt class="py-lineno">182</tt>  <tt class="py-line"> </tt>
<a name="testRFunctions.test_readCsvFileExceptions"></a><div id="testRFunctions.test_readCsvFileExceptions-def"><a name="L183"></a><tt class="py-lineno">183</tt> <a class="py-toggle" href="#" id="testRFunctions.test_readCsvFileExceptions-toggle" onclick="return toggle('testRFunctions.test_readCsvFileExceptions');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMSA.test.test_rFunctions.testRFunctions-class.html#test_readCsvFileExceptions">test_readCsvFileExceptions</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="testRFunctions.test_readCsvFileExceptions-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="testRFunctions.test_readCsvFileExceptions-expanded"><a name="L184"></a><tt class="py-lineno">184</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertRaises</tt><tt class="py-op">(</tt><tt class="py-name">IOError</tt><tt class="py-op">,</tt> <tt id="link-77" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-77', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-78" class="py-name"><a title="pyMSA.rFunctions.readCsvFile" class="py-name" href="#" onclick="return doclink('link-78', 'readCsvFile', 'link-75');">readCsvFile</a></tt><tt class="py-op">,</tt> <tt class="py-string">'fakefile'</tt><tt class="py-op">)</tt> </tt>
<a name="L185"></a><tt class="py-lineno">185</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertRaises</tt><tt class="py-op">(</tt><tt class="py-name">TypeError</tt><tt class="py-op">,</tt> <tt id="link-79" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-79', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-80" class="py-name"><a title="pyMSA.rFunctions.readCsvFile" class="py-name" href="#" onclick="return doclink('link-80', 'readCsvFile', 'link-75');">readCsvFile</a></tt><tt class="py-op">,</tt> <tt id="link-81" class="py-name"><a title="pyMSA.test.test_compareFeatureXMLmzML.testFolder
pyMSA.test.test_compareRuns.testFolder
pyMSA.test.test_database.testFolder
pyMSA.test.test_elementFunctions.testFolder
pyMSA.test.test_featureFunctions.testFolder
pyMSA.test.test_featureMapping.testFolder
pyMSA.test.test_fileHandling.testFolder
pyMSA.test.test_fillDatabase.testFolder
pyMSA.test.test_getWindow.testFolder
pyMSA.test.test_mzmlFunctions.testFolder
pyMSA.test.test_output.testFolder
pyMSA.test.test_parseFeatureXML.testFolder
pyMSA.test.test_parseMascot.testFolder
pyMSA.test.test_parsePeaksMzML.testFolder
pyMSA.test.test_plots.testFolder
pyMSA.test.test_rFunctions.testFolder
pyMSA.test.test_rPlotGenerics.testFolder" class="py-name" href="#" onclick="return doclink('link-81', 'testFolder', 'link-8');">testFolder</a></tt><tt class="py-op">+</tt><tt class="py-string">'feature.csv'</tt><tt class="py-op">,</tt> <tt class="py-name">head</tt><tt class="py-op">=</tt><tt class="py-string">'not a bool'</tt><tt class="py-op">)</tt> </tt>
</div><a name="L186"></a><tt class="py-lineno">186</tt>  <tt class="py-line"> </tt>
<a name="L187"></a><tt class="py-lineno">187</tt>  <tt class="py-line"> </tt>
<a name="testRFunctions.test_fillNA"></a><div id="testRFunctions.test_fillNA-def"><a name="L188"></a><tt class="py-lineno">188</tt> <a class="py-toggle" href="#" id="testRFunctions.test_fillNA-toggle" onclick="return toggle('testRFunctions.test_fillNA');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMSA.test.test_rFunctions.testRFunctions-class.html#test_fillNA">test_fillNA</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="testRFunctions.test_fillNA-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="testRFunctions.test_fillNA-expanded"><a name="L189"></a><tt class="py-lineno">189</tt>  <tt class="py-line">        <tt class="py-name">expectedList_1</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">,</tt><tt class="py-number">2</tt><tt class="py-op">,</tt><tt class="py-number">3</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">NA_Integer</tt><tt class="py-op">,</tt> <tt class="py-name">R</tt><tt class="py-op">.</tt><tt class="py-name">NA_Integer</tt><tt class="py-op">]</tt> </tt>
<a name="L190"></a><tt class="py-lineno">190</tt>  <tt class="py-line">        <tt class="py-name">expectedList_2</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">,</tt><tt class="py-number">2</tt><tt class="py-op">,</tt><tt class="py-number">3</tt><tt class="py-op">]</tt> </tt>
<a name="L191"></a><tt class="py-lineno">191</tt>  <tt class="py-line">         </tt>
<a name="L192"></a><tt class="py-lineno">192</tt>  <tt class="py-line">        <tt class="py-name">actualList_1</tt> <tt class="py-op">=</tt> <tt id="link-82" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-82', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-83" class="py-name" targets="Function pyMSA.rFunctions.fillNA()=pyMSA.rFunctions-module.html#fillNA"><a title="pyMSA.rFunctions.fillNA" class="py-name" href="#" onclick="return doclink('link-83', 'fillNA', 'link-83');">fillNA</a></tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">,</tt><tt class="py-number">2</tt><tt class="py-op">,</tt><tt class="py-number">3</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-number">2</tt><tt class="py-op">,</tt> <tt class="py-string">'NA_Integer'</tt><tt class="py-op">)</tt> </tt>
<a name="L193"></a><tt class="py-lineno">193</tt>  <tt class="py-line">        <tt class="py-comment"># this should not add any values, because amount is lower than 0.</tt> </tt>
<a name="L194"></a><tt class="py-lineno">194</tt>  <tt class="py-line">        <tt class="py-name">actualList_2</tt> <tt class="py-op">=</tt> <tt id="link-84" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-84', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-85" class="py-name"><a title="pyMSA.rFunctions.fillNA" class="py-name" href="#" onclick="return doclink('link-85', 'fillNA', 'link-83');">fillNA</a></tt><tt class="py-op">(</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">,</tt><tt class="py-number">2</tt><tt class="py-op">,</tt><tt class="py-number">3</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-op">-</tt><tt class="py-number">2</tt><tt class="py-op">,</tt> <tt class="py-string">'NA_Integer'</tt><tt class="py-op">)</tt> </tt>
<a name="L195"></a><tt class="py-lineno">195</tt>  <tt class="py-line">         </tt>
<a name="L196"></a><tt class="py-lineno">196</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertListEqual</tt><tt class="py-op">(</tt><tt class="py-name">expectedList_1</tt><tt class="py-op">,</tt> <tt class="py-name">actualList_1</tt><tt class="py-op">)</tt> </tt>
<a name="L197"></a><tt class="py-lineno">197</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertListEqual</tt><tt class="py-op">(</tt><tt class="py-name">expectedList_2</tt><tt class="py-op">,</tt> <tt class="py-name">actualList_2</tt><tt class="py-op">)</tt> </tt>
</div><a name="L198"></a><tt class="py-lineno">198</tt>  <tt class="py-line">         </tt>
<a name="testRFunctions.test_fillNAException"></a><div id="testRFunctions.test_fillNAException-def"><a name="L199"></a><tt class="py-lineno">199</tt> <a class="py-toggle" href="#" id="testRFunctions.test_fillNAException-toggle" onclick="return toggle('testRFunctions.test_fillNAException');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMSA.test.test_rFunctions.testRFunctions-class.html#test_fillNAException">test_fillNAException</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="testRFunctions.test_fillNAException-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="testRFunctions.test_fillNAException-expanded"><a name="L200"></a><tt class="py-lineno">200</tt>  <tt class="py-line">        <tt class="py-name">lst</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">,</tt><tt class="py-number">2</tt><tt class="py-op">,</tt><tt class="py-number">3</tt><tt class="py-op">]</tt> </tt>
<a name="L201"></a><tt class="py-lineno">201</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertRaises</tt><tt class="py-op">(</tt><tt class="py-name">TypeError</tt><tt class="py-op">,</tt> <tt id="link-86" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-86', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-87" class="py-name"><a title="pyMSA.rFunctions.fillNA" class="py-name" href="#" onclick="return doclink('link-87', 'fillNA', 'link-83');">fillNA</a></tt><tt class="py-op">,</tt> <tt class="py-string">'not a list'</tt><tt class="py-op">,</tt><tt class="py-number">4</tt><tt class="py-op">,</tt> <tt class="py-string">'NA_Integer'</tt><tt class="py-op">)</tt> </tt>
<a name="L202"></a><tt class="py-lineno">202</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertRaises</tt><tt class="py-op">(</tt><tt class="py-name">TypeError</tt><tt class="py-op">,</tt> <tt id="link-88" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-88', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-89" class="py-name"><a title="pyMSA.rFunctions.fillNA" class="py-name" href="#" onclick="return doclink('link-89', 'fillNA', 'link-83');">fillNA</a></tt><tt class="py-op">,</tt> <tt class="py-name">lst</tt><tt class="py-op">,</tt> <tt class="py-string">'not an int'</tt><tt class="py-op">,</tt> <tt class="py-string">'NA_Integer'</tt><tt class="py-op">)</tt> </tt>
<a name="L203"></a><tt class="py-lineno">203</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">assertRaises</tt><tt class="py-op">(</tt><tt class="py-name">TypeError</tt><tt class="py-op">,</tt> <tt id="link-90" class="py-name"><a title="pyMSA.rFunctions" class="py-name" href="#" onclick="return doclink('link-90', 'rFunctions', 'link-1');">rFunctions</a></tt><tt class="py-op">.</tt><tt id="link-91" class="py-name"><a title="pyMSA.rFunctions.fillNA" class="py-name" href="#" onclick="return doclink('link-91', 'fillNA', 'link-83');">fillNA</a></tt><tt class="py-op">,</tt> <tt class="py-name">lst</tt><tt class="py-op">,</tt> <tt class="py-number">4</tt><tt class="py-op">,</tt> <tt class="py-string">'Not allowed'</tt><tt class="py-op">)</tt> </tt>
</div></div><a name="L204"></a><tt class="py-lineno">204</tt>  <tt class="py-line"> </tt>
<a name="suite"></a><div id="suite-def"><a name="L205"></a><tt class="py-lineno">205</tt> <a class="py-toggle" href="#" id="suite-toggle" onclick="return toggle('suite');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="pyMSA.test.test_rFunctions-module.html#suite">suite</a><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="suite-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="suite-expanded"><a name="L206"></a><tt class="py-lineno">206</tt>  <tt class="py-line">    <tt id="link-92" class="py-name" targets="Function pyMSA.test.test_compareFeatureXMLmzML.suite()=pyMSA.test.test_compareFeatureXMLmzML-module.html#suite,Function pyMSA.test.test_compareRuns.suite()=pyMSA.test.test_compareRuns-module.html#suite,Function pyMSA.test.test_config.suite()=pyMSA.test.test_config-module.html#suite,Function pyMSA.test.test_database.suite()=pyMSA.test.test_database-module.html#suite,Function pyMSA.test.test_elementFunctions.suite()=pyMSA.test.test_elementFunctions-module.html#suite,Function pyMSA.test.test_featureFunctions.suite()=pyMSA.test.test_featureFunctions-module.html#suite,Function pyMSA.test.test_featureMapping.suite()=pyMSA.test.test_featureMapping-module.html#suite,Function pyMSA.test.test_fileHandling.suite()=pyMSA.test.test_fileHandling-module.html#suite,Function pyMSA.test.test_fillDatabase.suite()=pyMSA.test.test_fillDatabase-module.html#suite,Function pyMSA.test.test_getWindow.suite()=pyMSA.test.test_getWindow-module.html#suite,Function pyMSA.test.test_mzmlFunctions.suite()=pyMSA.test.test_mzmlFunctions-module.html#suite,Function pyMSA.test.test_output.suite()=pyMSA.test.test_output-module.html#suite,Function pyMSA.test.test_parseFeatureXML.suite()=pyMSA.test.test_parseFeatureXML-module.html#suite,Function pyMSA.test.test_parseMascot.suite()=pyMSA.test.test_parseMascot-module.html#suite,Function pyMSA.test.test_parsePeaksMzML.suite()=pyMSA.test.test_parsePeaksMzML-module.html#suite,Function pyMSA.test.test_plots.suite()=pyMSA.test.test_plots-module.html#suite,Function pyMSA.test.test_rFunctions.suite()=pyMSA.test.test_rFunctions-module.html#suite,Function pyMSA.test.test_rPlotGenerics.suite()=pyMSA.test.test_rPlotGenerics-module.html#suite"><a title="pyMSA.test.test_compareFeatureXMLmzML.suite
pyMSA.test.test_compareRuns.suite
pyMSA.test.test_config.suite
pyMSA.test.test_database.suite
pyMSA.test.test_elementFunctions.suite
pyMSA.test.test_featureFunctions.suite
pyMSA.test.test_featureMapping.suite
pyMSA.test.test_fileHandling.suite
pyMSA.test.test_fillDatabase.suite
pyMSA.test.test_getWindow.suite
pyMSA.test.test_mzmlFunctions.suite
pyMSA.test.test_output.suite
pyMSA.test.test_parseFeatureXML.suite
pyMSA.test.test_parseMascot.suite
pyMSA.test.test_parsePeaksMzML.suite
pyMSA.test.test_plots.suite
pyMSA.test.test_rFunctions.suite
pyMSA.test.test_rPlotGenerics.suite" class="py-name" href="#" onclick="return doclink('link-92', 'suite', 'link-92');">suite</a></tt> <tt class="py-op">=</tt> <tt class="py-name">unittest</tt><tt class="py-op">.</tt><tt class="py-name">TestSuite</tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L207"></a><tt class="py-lineno">207</tt>  <tt class="py-line">    <tt class="py-comment"># adding the unit tests to the test suite</tt> </tt>
<a name="L208"></a><tt class="py-lineno">208</tt>  <tt class="py-line">    <tt id="link-93" class="py-name"><a title="pyMSA.test.test_compareFeatureXMLmzML.suite
pyMSA.test.test_compareRuns.suite
pyMSA.test.test_config.suite
pyMSA.test.test_database.suite
pyMSA.test.test_elementFunctions.suite
pyMSA.test.test_featureFunctions.suite
pyMSA.test.test_featureMapping.suite
pyMSA.test.test_fileHandling.suite
pyMSA.test.test_fillDatabase.suite
pyMSA.test.test_getWindow.suite
pyMSA.test.test_mzmlFunctions.suite
pyMSA.test.test_output.suite
pyMSA.test.test_parseFeatureXML.suite
pyMSA.test.test_parseMascot.suite
pyMSA.test.test_parsePeaksMzML.suite
pyMSA.test.test_plots.suite
pyMSA.test.test_rFunctions.suite
pyMSA.test.test_rPlotGenerics.suite" class="py-name" href="#" onclick="return doclink('link-93', 'suite', 'link-92');">suite</a></tt><tt class="py-op">.</tt><tt class="py-name">addTest</tt><tt class="py-op">(</tt><tt class="py-name">unittest</tt><tt class="py-op">.</tt><tt class="py-name">makeSuite</tt><tt class="py-op">(</tt><tt id="link-94" class="py-name" targets="Class pyMSA.test.test_rFunctions.testRFunctions=pyMSA.test.test_rFunctions.testRFunctions-class.html"><a title="pyMSA.test.test_rFunctions.testRFunctions" class="py-name" href="#" onclick="return doclink('link-94', 'testRFunctions', 'link-94');">testRFunctions</a></tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L209"></a><tt class="py-lineno">209</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt id="link-95" class="py-name"><a title="pyMSA.test.test_compareFeatureXMLmzML.suite
pyMSA.test.test_compareRuns.suite
pyMSA.test.test_config.suite
pyMSA.test.test_database.suite
pyMSA.test.test_elementFunctions.suite
pyMSA.test.test_featureFunctions.suite
pyMSA.test.test_featureMapping.suite
pyMSA.test.test_fileHandling.suite
pyMSA.test.test_fillDatabase.suite
pyMSA.test.test_getWindow.suite
pyMSA.test.test_mzmlFunctions.suite
pyMSA.test.test_output.suite
pyMSA.test.test_parseFeatureXML.suite
pyMSA.test.test_parseMascot.suite
pyMSA.test.test_parsePeaksMzML.suite
pyMSA.test.test_plots.suite
pyMSA.test.test_rFunctions.suite
pyMSA.test.test_rPlotGenerics.suite" class="py-name" href="#" onclick="return doclink('link-95', 'suite', 'link-92');">suite</a></tt> </tt>
</div><a name="L210"></a><tt class="py-lineno">210</tt>  <tt class="py-line"> </tt>
<a name="L211"></a><tt class="py-lineno">211</tt>  <tt class="py-line"><tt class="py-name">unittest</tt><tt class="py-op">.</tt><tt class="py-name">TextTestRunner</tt><tt class="py-op">(</tt><tt class="py-name">verbosity</tt><tt class="py-op">=</tt><tt class="py-number">2</tt><tt class="py-op">)</tt><tt class="py-op">.</tt><tt class="py-name">run</tt><tt class="py-op">(</tt><tt id="link-96" class="py-name"><a title="pyMSA.test.test_compareFeatureXMLmzML.suite
pyMSA.test.test_compareRuns.suite
pyMSA.test.test_config.suite
pyMSA.test.test_database.suite
pyMSA.test.test_elementFunctions.suite
pyMSA.test.test_featureFunctions.suite
pyMSA.test.test_featureMapping.suite
pyMSA.test.test_fileHandling.suite
pyMSA.test.test_fillDatabase.suite
pyMSA.test.test_getWindow.suite
pyMSA.test.test_mzmlFunctions.suite
pyMSA.test.test_output.suite
pyMSA.test.test_parseFeatureXML.suite
pyMSA.test.test_parseMascot.suite
pyMSA.test.test_parsePeaksMzML.suite
pyMSA.test.test_plots.suite
pyMSA.test.test_rFunctions.suite
pyMSA.test.test_rPlotGenerics.suite" class="py-name" href="#" onclick="return doclink('link-96', 'suite', 'link-92');">suite</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L212"></a><tt class="py-lineno">212</tt>  <tt class="py-line"> </tt><script type="text/javascript">
<!--
expandto(location.href);
// -->
</script>
</pre>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0.1 on Tue Jun  5 15:10:36 2012
    </td>
    <td align="right" class="footer">
      <a target="mainFrame" href="http://epydoc.sourceforge.net"
        >http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie();
  // -->
</script>
</body>
</html>
